
F103C8T6_E32_Transmit_FSM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000836c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001914  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d8c  08009d8c  0002046c  2**0
                  CONTENTS
  4 .ARM          00000000  08009d8c  08009d8c  0002046c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d8c  08009d8c  0002046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  08009d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .got          000000d4  2000038c  0800a120  0002038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got.plt      0000000c  20000460  0800a1f4  00020460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000708  20000470  0800a200  00020470  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000b78  0800a200  00020b78  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001610e  00000000  00000000  00020495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037be  00000000  00000000  000365a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001570  00000000  00000000  00039d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001410  00000000  00000000  0003b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b354  00000000  00000000  0003c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000198c6  00000000  00000000  00057a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000955de  00000000  00000000  00071302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001068e0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000062e8  00000000  00000000  00106930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000470 	.word	0x20000470
 8000128:	00000000 	.word	0x00000000
 800012c:	08008460 	.word	0x08008460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000474 	.word	0x20000474
 8000148:	08008460 	.word	0x08008460

0800014c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e016      	b.n	8000188 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000160:	3301      	adds	r3, #1
 8000162:	029b      	lsls	r3, r3, #10
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	429a      	cmp	r2, r3
 8000168:	d20b      	bcs.n	8000182 <GetPage+0x36>
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000170:	029b      	lsls	r3, r3, #10
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	429a      	cmp	r2, r3
 8000176:	d304      	bcc.n	8000182 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800017e:	029b      	lsls	r3, r3, #10
 8000180:	e006      	b.n	8000190 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	3301      	adds	r3, #1
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	2b7f      	cmp	r3, #127	; 0x7f
 800018c:	dde5      	ble.n	800015a <GetPage+0xe>
	  }
  }

  return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800019c:	b5b0      	push	{r4, r5, r7, lr}
 800019e:	b08a      	sub	sp, #40	; 0x28
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	4613      	mov	r3, r2
 80001a8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80001ae:	f003 fc43 	bl	8003a38 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80001b2:	68f8      	ldr	r0, [r7, #12]
 80001b4:	f7ff ffca 	bl	800014c <GetPage>
 80001b8:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80001ba:	88fb      	ldrh	r3, [r7, #6]
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4413      	add	r3, r2
 80001c4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80001c6:	69f8      	ldr	r0, [r7, #28]
 80001c8:	f7ff ffc0 	bl	800014c <GetPage>
 80001cc:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80001ce:	4b23      	ldr	r3, [pc, #140]	; (800025c <Flash_Write_Data+0xc0>)
 80001d0:	447b      	add	r3, pc
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <Flash_Write_Data+0xc4>)
 80001d8:	447b      	add	r3, pc
 80001da:	6a3a      	ldr	r2, [r7, #32]
 80001dc:	609a      	str	r2, [r3, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80001de:	69ba      	ldr	r2, [r7, #24]
 80001e0:	6a3b      	ldr	r3, [r7, #32]
 80001e2:	1ad3      	subs	r3, r2, r3
 80001e4:	0a9b      	lsrs	r3, r3, #10
 80001e6:	1c5a      	adds	r2, r3, #1
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <Flash_Write_Data+0xc8>)
 80001ea:	447b      	add	r3, pc
 80001ec:	60da      	str	r2, [r3, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	4619      	mov	r1, r3
 80001f4:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <Flash_Write_Data+0xcc>)
 80001f6:	447b      	add	r3, pc
 80001f8:	4618      	mov	r0, r3
 80001fa:	f003 fd23 	bl	8003c44 <HAL_FLASHEx_Erase>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d01f      	beq.n	8000244 <Flash_Write_Data+0xa8>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000204:	f003 fc4e 	bl	8003aa4 <HAL_FLASH_GetError>
 8000208:	4603      	mov	r3, r0
 800020a:	e022      	b.n	8000252 <Flash_Write_Data+0xb6>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	4413      	add	r3, r2
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2200      	movs	r2, #0
 8000218:	461c      	mov	r4, r3
 800021a:	4615      	mov	r5, r2
 800021c:	4622      	mov	r2, r4
 800021e:	462b      	mov	r3, r5
 8000220:	68f9      	ldr	r1, [r7, #12]
 8000222:	2002      	movs	r0, #2
 8000224:	f003 fb90 	bl	8003948 <HAL_FLASH_Program>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d106      	bne.n	800023c <Flash_Write_Data+0xa0>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3304      	adds	r3, #4
 8000232:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000236:	3301      	adds	r3, #1
 8000238:	627b      	str	r3, [r7, #36]	; 0x24
 800023a:	e003      	b.n	8000244 <Flash_Write_Data+0xa8>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800023c:	f003 fc32 	bl	8003aa4 <HAL_FLASH_GetError>
 8000240:	4603      	mov	r3, r0
 8000242:	e006      	b.n	8000252 <Flash_Write_Data+0xb6>
	   while (sofar<numberofwords)
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000248:	429a      	cmp	r2, r3
 800024a:	dbdf      	blt.n	800020c <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800024c:	f003 fc1a 	bl	8003a84 <HAL_FLASH_Lock>

	   return 0;
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3728      	adds	r7, #40	; 0x28
 8000256:	46bd      	mov	sp, r7
 8000258:	bdb0      	pop	{r4, r5, r7, pc}
 800025a:	bf00      	nop
 800025c:	180002b8 	.word	0x180002b8
 8000260:	180002b0 	.word	0x180002b0
 8000264:	1800029e 	.word	0x1800029e
 8000268:	18000292 	.word	0x18000292

0800026c <outDisplayUser>:

//===============================================================================================================================//
//=================================================outDisplayUser()===============================================================//
//===============================================================================================================================//
void outDisplayUser(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	4c9b      	ldr	r4, [pc, #620]	; (80004e0 <outDisplayUser+0x274>)
 8000274:	447c      	add	r4, pc
	//HAL_Delay(200);
	 //SSD1306_Clear();
	char buffer[20];
	setInterruptState(NoUsaNoExtern);
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fb30 	bl	80008dc <setInterruptState>
	//HAL_NVIC_DisableIRQ(USART1_IRQn);
	//HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
	//HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
	SSD1306_Fill (0);
 800027c:	2000      	movs	r0, #0
 800027e:	f001 fd85 	bl	8001d8c <SSD1306_Fill>

	for(uint8_t i = 0; i< NUMBER_EXPLODER; i++ ){
 8000282:	2300      	movs	r3, #0
 8000284:	75fb      	strb	r3, [r7, #23]
 8000286:	e0c7      	b.n	8000418 <outDisplayUser+0x1ac>
		if (bufferDisplay.bfDetonator[i]==1){
 8000288:	7dfb      	ldrb	r3, [r7, #23]
 800028a:	4a96      	ldr	r2, [pc, #600]	; (80004e4 <outDisplayUser+0x278>)
 800028c:	58a2      	ldr	r2, [r4, r2]
 800028e:	5cd3      	ldrb	r3, [r2, r3]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d12c      	bne.n	80002ee <outDisplayUser+0x82>
			SSD1306_GotoXY (0,(i*12)+12);
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	3301      	adds	r3, #1
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	0052      	lsls	r2, r2, #1
 800029e:	4413      	add	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	4619      	mov	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f001 fdf4 	bl	8001e94 <SSD1306_GotoXY>
			//bufferDisplay.bfDetonator[i];
			sprintf(buffer, "%d", (i+1));
 80002ac:	7dfb      	ldrb	r3, [r7, #23]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	463b      	mov	r3, r7
 80002b2:	498d      	ldr	r1, [pc, #564]	; (80004e8 <outDisplayUser+0x27c>)
 80002b4:	4479      	add	r1, pc
 80002b6:	4618      	mov	r0, r3
 80002b8:	f006 ff7a 	bl	80071b0 <siprintf>
			SSD1306_Puts ("Det ", &Font_7x10, 1);
 80002bc:	2201      	movs	r2, #1
 80002be:	4b8b      	ldr	r3, [pc, #556]	; (80004ec <outDisplayUser+0x280>)
 80002c0:	58e3      	ldr	r3, [r4, r3]
 80002c2:	4619      	mov	r1, r3
 80002c4:	4b8a      	ldr	r3, [pc, #552]	; (80004f0 <outDisplayUser+0x284>)
 80002c6:	447b      	add	r3, pc
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fe93 	bl	8001ff4 <SSD1306_Puts>
			SSD1306_Puts (buffer, &Font_7x10, 1);
 80002ce:	4638      	mov	r0, r7
 80002d0:	2201      	movs	r2, #1
 80002d2:	4b86      	ldr	r3, [pc, #536]	; (80004ec <outDisplayUser+0x280>)
 80002d4:	58e3      	ldr	r3, [r4, r3]
 80002d6:	4619      	mov	r1, r3
 80002d8:	f001 fe8c 	bl	8001ff4 <SSD1306_Puts>
			SSD1306_Puts (":", &Font_7x10, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	4b83      	ldr	r3, [pc, #524]	; (80004ec <outDisplayUser+0x280>)
 80002e0:	58e3      	ldr	r3, [r4, r3]
 80002e2:	4619      	mov	r1, r3
 80002e4:	4b83      	ldr	r3, [pc, #524]	; (80004f4 <outDisplayUser+0x288>)
 80002e6:	447b      	add	r3, pc
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fe83 	bl	8001ff4 <SSD1306_Puts>
		}
		if (bufferDisplay.numberRxExploder[i] == 1){
 80002ee:	7dfb      	ldrb	r3, [r7, #23]
 80002f0:	4a7c      	ldr	r2, [pc, #496]	; (80004e4 <outDisplayUser+0x278>)
 80002f2:	58a2      	ldr	r2, [r4, r2]
 80002f4:	4413      	add	r3, r2
 80002f6:	795b      	ldrb	r3, [r3, #5]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d119      	bne.n	8000330 <outDisplayUser+0xc4>
			SSD1306_GotoXY (40,(i*12));
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	461a      	mov	r2, r3
 8000302:	0052      	lsls	r2, r2, #1
 8000304:	4413      	add	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	b29b      	uxth	r3, r3
 800030a:	4619      	mov	r1, r3
 800030c:	2028      	movs	r0, #40	; 0x28
 800030e:	f001 fdc1 	bl	8001e94 <SSD1306_GotoXY>
			SSD1306_Puts (" +", &Font_7x10, 1);
 8000312:	2201      	movs	r2, #1
 8000314:	4b75      	ldr	r3, [pc, #468]	; (80004ec <outDisplayUser+0x280>)
 8000316:	58e3      	ldr	r3, [r4, r3]
 8000318:	4619      	mov	r1, r3
 800031a:	4b77      	ldr	r3, [pc, #476]	; (80004f8 <outDisplayUser+0x28c>)
 800031c:	447b      	add	r3, pc
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fe68 	bl	8001ff4 <SSD1306_Puts>
			bufferDisplay.numberRxExploder[i] = 0;
 8000324:	7dfb      	ldrb	r3, [r7, #23]
 8000326:	4a6f      	ldr	r2, [pc, #444]	; (80004e4 <outDisplayUser+0x278>)
 8000328:	58a2      	ldr	r2, [r4, r2]
 800032a:	4413      	add	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	715a      	strb	r2, [r3, #5]
		}
		if (bufferDisplay.numberRxExploderOnDetonator[i] == 1){
 8000330:	7dfb      	ldrb	r3, [r7, #23]
 8000332:	4a6c      	ldr	r2, [pc, #432]	; (80004e4 <outDisplayUser+0x278>)
 8000334:	58a2      	ldr	r2, [r4, r2]
 8000336:	4413      	add	r3, r2
 8000338:	7bdb      	ldrb	r3, [r3, #15]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d119      	bne.n	8000372 <outDisplayUser+0x106>
			SSD1306_GotoXY (50,(i*12));
 800033e:	7dfb      	ldrb	r3, [r7, #23]
 8000340:	b29b      	uxth	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	0052      	lsls	r2, r2, #1
 8000346:	4413      	add	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	b29b      	uxth	r3, r3
 800034c:	4619      	mov	r1, r3
 800034e:	2032      	movs	r0, #50	; 0x32
 8000350:	f001 fda0 	bl	8001e94 <SSD1306_GotoXY>
			SSD1306_Puts ("D", &Font_7x10, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	4b65      	ldr	r3, [pc, #404]	; (80004ec <outDisplayUser+0x280>)
 8000358:	58e3      	ldr	r3, [r4, r3]
 800035a:	4619      	mov	r1, r3
 800035c:	4b67      	ldr	r3, [pc, #412]	; (80004fc <outDisplayUser+0x290>)
 800035e:	447b      	add	r3, pc
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fe47 	bl	8001ff4 <SSD1306_Puts>
			bufferDisplay.numberRxExploderOnDetonator[i] = 0;
 8000366:	7dfb      	ldrb	r3, [r7, #23]
 8000368:	4a5e      	ldr	r2, [pc, #376]	; (80004e4 <outDisplayUser+0x278>)
 800036a:	58a2      	ldr	r2, [r4, r2]
 800036c:	4413      	add	r3, r2
 800036e:	2200      	movs	r2, #0
 8000370:	73da      	strb	r2, [r3, #15]
		}
		if (bufferDisplay.numberRxExploderVolt[i] >6){
 8000372:	7dfb      	ldrb	r3, [r7, #23]
 8000374:	4a5b      	ldr	r2, [pc, #364]	; (80004e4 <outDisplayUser+0x278>)
 8000376:	58a2      	ldr	r2, [r4, r2]
 8000378:	4413      	add	r3, r2
 800037a:	7d1b      	ldrb	r3, [r3, #20]
 800037c:	2b06      	cmp	r3, #6
 800037e:	d948      	bls.n	8000412 <outDisplayUser+0x1a6>
			SSD1306_GotoXY (60,(i*12));
 8000380:	7dfb      	ldrb	r3, [r7, #23]
 8000382:	b29b      	uxth	r3, r3
 8000384:	461a      	mov	r2, r3
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	4413      	add	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	b29b      	uxth	r3, r3
 800038e:	4619      	mov	r1, r3
 8000390:	203c      	movs	r0, #60	; 0x3c
 8000392:	f001 fd7f 	bl	8001e94 <SSD1306_GotoXY>
			sprintf(buffer, "%d", bufferDisplay.numberRxExploderVolt[i]);
 8000396:	7dfb      	ldrb	r3, [r7, #23]
 8000398:	4a52      	ldr	r2, [pc, #328]	; (80004e4 <outDisplayUser+0x278>)
 800039a:	58a2      	ldr	r2, [r4, r2]
 800039c:	4413      	add	r3, r2
 800039e:	7d1b      	ldrb	r3, [r3, #20]
 80003a0:	461a      	mov	r2, r3
 80003a2:	463b      	mov	r3, r7
 80003a4:	4956      	ldr	r1, [pc, #344]	; (8000500 <outDisplayUser+0x294>)
 80003a6:	4479      	add	r1, pc
 80003a8:	4618      	mov	r0, r3
 80003aa:	f006 ff01 	bl	80071b0 <siprintf>
			SSD1306_Puts (buffer, &Font_7x10, 1);
 80003ae:	4638      	mov	r0, r7
 80003b0:	2201      	movs	r2, #1
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <outDisplayUser+0x280>)
 80003b4:	58e3      	ldr	r3, [r4, r3]
 80003b6:	4619      	mov	r1, r3
 80003b8:	f001 fe1c 	bl	8001ff4 <SSD1306_Puts>
			//SSD1306_GotoXY (67,i*12+12);
			//char* til[1];
			//til[0] = ',';
			SSD1306_Puts (",", &Font_7x10, 1);
 80003bc:	2201      	movs	r2, #1
 80003be:	4b4b      	ldr	r3, [pc, #300]	; (80004ec <outDisplayUser+0x280>)
 80003c0:	58e3      	ldr	r3, [r4, r3]
 80003c2:	4619      	mov	r1, r3
 80003c4:	4b4f      	ldr	r3, [pc, #316]	; (8000504 <outDisplayUser+0x298>)
 80003c6:	447b      	add	r3, pc
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fe13 	bl	8001ff4 <SSD1306_Puts>
			//SSD1306_GotoXY (72,i*12+12);
			sprintf(buffer, "%d", bufferDisplay.numberRxExploderVolt[i]);
 80003ce:	7dfb      	ldrb	r3, [r7, #23]
 80003d0:	4a44      	ldr	r2, [pc, #272]	; (80004e4 <outDisplayUser+0x278>)
 80003d2:	58a2      	ldr	r2, [r4, r2]
 80003d4:	4413      	add	r3, r2
 80003d6:	7d1b      	ldrb	r3, [r3, #20]
 80003d8:	461a      	mov	r2, r3
 80003da:	463b      	mov	r3, r7
 80003dc:	494a      	ldr	r1, [pc, #296]	; (8000508 <outDisplayUser+0x29c>)
 80003de:	4479      	add	r1, pc
 80003e0:	4618      	mov	r0, r3
 80003e2:	f006 fee5 	bl	80071b0 <siprintf>
			SSD1306_Puts (buffer, &Font_7x10, 1);
 80003e6:	4638      	mov	r0, r7
 80003e8:	2201      	movs	r2, #1
 80003ea:	4b40      	ldr	r3, [pc, #256]	; (80004ec <outDisplayUser+0x280>)
 80003ec:	58e3      	ldr	r3, [r4, r3]
 80003ee:	4619      	mov	r1, r3
 80003f0:	f001 fe00 	bl	8001ff4 <SSD1306_Puts>
			//SSD1306_GotoXY (79,i*12+12);
			//char* charVolt = " volt";
			SSD1306_Puts (" volt", &Font_7x10, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <outDisplayUser+0x280>)
 80003f8:	58e3      	ldr	r3, [r4, r3]
 80003fa:	4619      	mov	r1, r3
 80003fc:	4b43      	ldr	r3, [pc, #268]	; (800050c <outDisplayUser+0x2a0>)
 80003fe:	447b      	add	r3, pc
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fdf7 	bl	8001ff4 <SSD1306_Puts>
			bufferDisplay.numberRxExploderVolt[i] = 0;
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <outDisplayUser+0x278>)
 800040a:	58a2      	ldr	r2, [r4, r2]
 800040c:	4413      	add	r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	751a      	strb	r2, [r3, #20]
	for(uint8_t i = 0; i< NUMBER_EXPLODER; i++ ){
 8000412:	7dfb      	ldrb	r3, [r7, #23]
 8000414:	3301      	adds	r3, #1
 8000416:	75fb      	strb	r3, [r7, #23]
 8000418:	7dfb      	ldrb	r3, [r7, #23]
 800041a:	2b04      	cmp	r3, #4
 800041c:	f67f af34 	bls.w	8000288 <outDisplayUser+0x1c>
		}

	}

	SSD1306_GotoXY (0,0);
 8000420:	2100      	movs	r1, #0
 8000422:	2000      	movs	r0, #0
 8000424:	f001 fd36 	bl	8001e94 <SSD1306_GotoXY>
	SSD1306_Puts ("Menu", &Font_7x10, 1);
 8000428:	2201      	movs	r2, #1
 800042a:	4b30      	ldr	r3, [pc, #192]	; (80004ec <outDisplayUser+0x280>)
 800042c:	58e3      	ldr	r3, [r4, r3]
 800042e:	4619      	mov	r1, r3
 8000430:	4b37      	ldr	r3, [pc, #220]	; (8000510 <outDisplayUser+0x2a4>)
 8000432:	447b      	add	r3, pc
 8000434:	4618      	mov	r0, r3
 8000436:	f001 fddd 	bl	8001ff4 <SSD1306_Puts>

if(bufferDisplay.bfArm == 1){
 800043a:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <outDisplayUser+0x278>)
 800043c:	58e3      	ldr	r3, [r4, r3]
 800043e:	7f1b      	ldrb	r3, [r3, #28]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d10c      	bne.n	800045e <outDisplayUser+0x1f2>
	SSD1306_GotoXY (30,0);
 8000444:	2100      	movs	r1, #0
 8000446:	201e      	movs	r0, #30
 8000448:	f001 fd24 	bl	8001e94 <SSD1306_GotoXY>
	SSD1306_Puts ("ARM", &Font_7x10, 1);
 800044c:	2201      	movs	r2, #1
 800044e:	4b27      	ldr	r3, [pc, #156]	; (80004ec <outDisplayUser+0x280>)
 8000450:	58e3      	ldr	r3, [r4, r3]
 8000452:	4619      	mov	r1, r3
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <outDisplayUser+0x2a8>)
 8000456:	447b      	add	r3, pc
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fdcb 	bl	8001ff4 <SSD1306_Puts>
}

	SSD1306_GotoXY (45,0);
 800045e:	2100      	movs	r1, #0
 8000460:	202d      	movs	r0, #45	; 0x2d
 8000462:	f001 fd17 	bl	8001e94 <SSD1306_GotoXY>
	sprintf(buffer, "%d", bufferDisplay.bfPowerPult);
 8000466:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <outDisplayUser+0x278>)
 8000468:	58e3      	ldr	r3, [r4, r3]
 800046a:	7e9b      	ldrb	r3, [r3, #26]
 800046c:	461a      	mov	r2, r3
 800046e:	463b      	mov	r3, r7
 8000470:	4929      	ldr	r1, [pc, #164]	; (8000518 <outDisplayUser+0x2ac>)
 8000472:	4479      	add	r1, pc
 8000474:	4618      	mov	r0, r3
 8000476:	f006 fe9b 	bl	80071b0 <siprintf>
	SSD1306_Puts ("Volt: ", &Font_7x10, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <outDisplayUser+0x280>)
 800047e:	58e3      	ldr	r3, [r4, r3]
 8000480:	4619      	mov	r1, r3
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <outDisplayUser+0x2b0>)
 8000484:	447b      	add	r3, pc
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fdb4 	bl	8001ff4 <SSD1306_Puts>
	SSD1306_Puts (buffer, &Font_7x10, 1);
 800048c:	4638      	mov	r0, r7
 800048e:	2201      	movs	r2, #1
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <outDisplayUser+0x280>)
 8000492:	58e3      	ldr	r3, [r4, r3]
 8000494:	4619      	mov	r1, r3
 8000496:	f001 fdad 	bl	8001ff4 <SSD1306_Puts>
	SSD1306_Puts (",", &Font_7x10, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <outDisplayUser+0x280>)
 800049e:	58e3      	ldr	r3, [r4, r3]
 80004a0:	4619      	mov	r1, r3
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <outDisplayUser+0x2b4>)
 80004a4:	447b      	add	r3, pc
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fda4 	bl	8001ff4 <SSD1306_Puts>
	sprintf(buffer, "%d", bufferDisplay.bfPowerPult);
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <outDisplayUser+0x278>)
 80004ae:	58e3      	ldr	r3, [r4, r3]
 80004b0:	7e9b      	ldrb	r3, [r3, #26]
 80004b2:	461a      	mov	r2, r3
 80004b4:	463b      	mov	r3, r7
 80004b6:	491b      	ldr	r1, [pc, #108]	; (8000524 <outDisplayUser+0x2b8>)
 80004b8:	4479      	add	r1, pc
 80004ba:	4618      	mov	r0, r3
 80004bc:	f006 fe78 	bl	80071b0 <siprintf>
	SSD1306_Puts (buffer, &Font_7x10, 1);
 80004c0:	4638      	mov	r0, r7
 80004c2:	2201      	movs	r2, #1
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <outDisplayUser+0x280>)
 80004c6:	58e3      	ldr	r3, [r4, r3]
 80004c8:	4619      	mov	r1, r3
 80004ca:	f001 fd93 	bl	8001ff4 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 80004ce:	f001 fc2d 	bl	8001d2c <SSD1306_UpdateScreen>
	HAL_Delay(50);
 80004d2:	2032      	movs	r0, #50	; 0x32
 80004d4:	f002 fa40 	bl	8002958 <HAL_Delay>
		        SSD1306_GotoXY (0, 30);
		        SSD1306_Puts ("MOHIDEEN", &Font_11x18, 1);
		        SSD1306_UpdateScreen();
		        HAL_Delay (1000);
		        */
}
 80004d8:	bf00      	nop
 80004da:	371c      	adds	r7, #28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	18000114 	.word	0x18000114
 80004e4:	00000088 	.word	0x00000088
 80004e8:	000081c0 	.word	0x000081c0
 80004ec:	00000098 	.word	0x00000098
 80004f0:	000081b2 	.word	0x000081b2
 80004f4:	0000819a 	.word	0x0000819a
 80004f8:	00008168 	.word	0x00008168
 80004fc:	0000812a 	.word	0x0000812a
 8000500:	000080ce 	.word	0x000080ce
 8000504:	000080c6 	.word	0x000080c6
 8000508:	00008096 	.word	0x00008096
 800050c:	00008092 	.word	0x00008092
 8000510:	00008066 	.word	0x00008066
 8000514:	0000804a 	.word	0x0000804a
 8000518:	00008002 	.word	0x00008002
 800051c:	00008020 	.word	0x00008020
 8000520:	00007fe8 	.word	0x00007fe8
 8000524:	00007fbc 	.word	0x00007fbc

08000528 <outDisplayWakeTx>:
//=================================================outDisplayWakeTx===========================================================//
//============================================================================================================================//
/**
 * @brief Вывод информации на дисплей в режиме ожидания передачи (WakeTx).
 */
void outDisplayWakeTx(void) {
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	4c2f      	ldr	r4, [pc, #188]	; (80005ec <outDisplayWakeTx+0xc4>)
 8000530:	447c      	add	r4, pc
    char buffer[20];

    // Установка состояния прерываний в NoUsaNoExtern (запрет всех прерываний)
    setInterruptState(NoUsaNoExtern);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f9d2 	bl	80008dc <setInterruptState>

    #ifdef Debug
        // Вывод отладочной информации
        printf("outDisplayWakeTx.\n");
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <outDisplayWakeTx+0xc8>)
 800053a:	447b      	add	r3, pc
 800053c:	4618      	mov	r0, r3
 800053e:	f006 fe2f 	bl	80071a0 <puts>
    #endif

    // Очистка экрана
    SSD1306_Fill(0);
 8000542:	2000      	movs	r0, #0
 8000544:	f001 fc22 	bl	8001d8c <SSD1306_Fill>

    // Установка курсора в начало экрана
    SSD1306_GotoXY(0, 0);
 8000548:	2100      	movs	r1, #0
 800054a:	2000      	movs	r0, #0
 800054c:	f001 fca2 	bl	8001e94 <SSD1306_GotoXY>

    // Вывод информации в зависимости от состояния кнопок
    if (flagButtonDemolition == SET) {
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <outDisplayWakeTx+0xcc>)
 8000552:	58e3      	ldr	r3, [r4, r3]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10d      	bne.n	8000576 <outDisplayWakeTx+0x4e>
        SSD1306_Puts(" DEMOLITION", &Font_11x18, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <outDisplayWakeTx+0xd0>)
 800055e:	58e3      	ldr	r3, [r4, r3]
 8000560:	4619      	mov	r1, r3
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <outDisplayWakeTx+0xd4>)
 8000564:	447b      	add	r3, pc
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fd44 	bl	8001ff4 <SSD1306_Puts>
        flagButtonDemolition = RESET;
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <outDisplayWakeTx+0xcc>)
 800056e:	58e3      	ldr	r3, [r4, r3]
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e030      	b.n	80005d8 <outDisplayWakeTx+0xb0>
    } else if (flagButtonTest == SET) {
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <outDisplayWakeTx+0xd8>)
 8000578:	58e3      	ldr	r3, [r4, r3]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d10d      	bne.n	800059c <outDisplayWakeTx+0x74>
        SSD1306_Puts("   TEST", &Font_11x18, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <outDisplayWakeTx+0xd0>)
 8000584:	58e3      	ldr	r3, [r4, r3]
 8000586:	4619      	mov	r1, r3
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <outDisplayWakeTx+0xdc>)
 800058a:	447b      	add	r3, pc
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fd31 	bl	8001ff4 <SSD1306_Puts>
        flagButtonTest = RESET;
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <outDisplayWakeTx+0xd8>)
 8000594:	58e3      	ldr	r3, [r4, r3]
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e01d      	b.n	80005d8 <outDisplayWakeTx+0xb0>
    } else {
        SSD1306_Puts("   WAIT", &Font_11x18, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <outDisplayWakeTx+0xd0>)
 80005a0:	58e3      	ldr	r3, [r4, r3]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <outDisplayWakeTx+0xe0>)
 80005a6:	447b      	add	r3, pc
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fd23 	bl	8001ff4 <SSD1306_Puts>
        SSD1306_GotoXY(40, 30);
 80005ae:	211e      	movs	r1, #30
 80005b0:	2028      	movs	r0, #40	; 0x28
 80005b2:	f001 fc6f 	bl	8001e94 <SSD1306_GotoXY>
        // Преобразование числа времени в строку и вывод на дисплей
        sprintf(buffer, "%d", bufferDisplay.timeTxWake);
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <outDisplayWakeTx+0xe4>)
 80005b8:	58e3      	ldr	r3, [r4, r3]
 80005ba:	7fdb      	ldrb	r3, [r3, #31]
 80005bc:	461a      	mov	r2, r3
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4913      	ldr	r1, [pc, #76]	; (8000610 <outDisplayWakeTx+0xe8>)
 80005c2:	4479      	add	r1, pc
 80005c4:	4618      	mov	r0, r3
 80005c6:	f006 fdf3 	bl	80071b0 <siprintf>
        SSD1306_Puts(buffer, &Font_11x18, 1);
 80005ca:	1d38      	adds	r0, r7, #4
 80005cc:	2201      	movs	r2, #1
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <outDisplayWakeTx+0xd0>)
 80005d0:	58e3      	ldr	r3, [r4, r3]
 80005d2:	4619      	mov	r1, r3
 80005d4:	f001 fd0e 	bl	8001ff4 <SSD1306_Puts>
    }

    // Обновление содержимого экрана
    SSD1306_UpdateScreen();
 80005d8:	f001 fba8 	bl	8001d2c <SSD1306_UpdateScreen>

    // Задержка 1 миллисекунда
    HAL_Delay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f002 f9bb 	bl	8002958 <HAL_Delay>
}
 80005e2:	bf00      	nop
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	17fffe58 	.word	0x17fffe58
 80005f0:	00007f72 	.word	0x00007f72
 80005f4:	0000003c 	.word	0x0000003c
 80005f8:	000000b4 	.word	0x000000b4
 80005fc:	00007f5c 	.word	0x00007f5c
 8000600:	000000b8 	.word	0x000000b8
 8000604:	00007f42 	.word	0x00007f42
 8000608:	00007f2e 	.word	0x00007f2e
 800060c:	00000088 	.word	0x00000088
 8000610:	00007eb2 	.word	0x00007eb2

08000614 <outBufferDisplay>:
/**
 * @brief Обновление данных в структуре bufferDisplay.
 *
 * Функция считывает состояние кнопок, напряжение питания и обновляет соответствующие поля в структуре bufferDisplay.
 */
void outBufferDisplay(void) {
 8000614:	b598      	push	{r3, r4, r7, lr}
 8000616:	af00      	add	r7, sp, #0
 8000618:	4c36      	ldr	r4, [pc, #216]	; (80006f4 <outBufferDisplay+0xe0>)
 800061a:	447c      	add	r4, pc
    // Считывание состояния кнопок и обновление соответствующих полей в структуре
    bufferDisplay.bfDetonator[0] = !HAL_GPIO_ReadPin(PIN_BUTTON_10_GPIO_Port, PIN_BUTTON_10_Pin);
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	4832      	ldr	r0, [pc, #200]	; (80006ec <outBufferDisplay+0xd8>)
 8000622:	f003 fd4d 	bl	80040c0 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf0c      	ite	eq
 800062c:	2301      	moveq	r3, #1
 800062e:	2300      	movne	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <outBufferDisplay+0xe4>)
 8000636:	58e3      	ldr	r3, [r4, r3]
 8000638:	701a      	strb	r2, [r3, #0]
    bufferDisplay.bfDetonator[1] = !HAL_GPIO_ReadPin(PIN_BUTTON_11_GPIO_Port, PIN_BUTTON_11_Pin);
 800063a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063e:	482b      	ldr	r0, [pc, #172]	; (80006ec <outBufferDisplay+0xd8>)
 8000640:	f003 fd3e 	bl	80040c0 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf0c      	ite	eq
 800064a:	2301      	moveq	r3, #1
 800064c:	2300      	movne	r3, #0
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <outBufferDisplay+0xe4>)
 8000654:	58e3      	ldr	r3, [r4, r3]
 8000656:	705a      	strb	r2, [r3, #1]
    bufferDisplay.bfDetonator[2] = !HAL_GPIO_ReadPin(PIN_BUTTON_12_GPIO_Port, PIN_BUTTON_12_Pin);
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	4823      	ldr	r0, [pc, #140]	; (80006ec <outBufferDisplay+0xd8>)
 800065e:	f003 fd2f 	bl	80040c0 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf0c      	ite	eq
 8000668:	2301      	moveq	r3, #1
 800066a:	2300      	movne	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <outBufferDisplay+0xe4>)
 8000672:	58e3      	ldr	r3, [r4, r3]
 8000674:	709a      	strb	r2, [r3, #2]
    bufferDisplay.bfDetonator[3] = !HAL_GPIO_ReadPin(PIN_BUTTON_13_GPIO_Port, PIN_BUTTON_13_Pin);
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	481c      	ldr	r0, [pc, #112]	; (80006ec <outBufferDisplay+0xd8>)
 800067c:	f003 fd20 	bl	80040c0 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf0c      	ite	eq
 8000686:	2301      	moveq	r3, #1
 8000688:	2300      	movne	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <outBufferDisplay+0xe4>)
 8000690:	58e3      	ldr	r3, [r4, r3]
 8000692:	70da      	strb	r2, [r3, #3]
    bufferDisplay.bfDetonator[4] = !HAL_GPIO_ReadPin(PIN_BUTTON_14_GPIO_Port, PIN_BUTTON_14_Pin);
 8000694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <outBufferDisplay+0xd8>)
 800069a:	f003 fd11 	bl	80040c0 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	bf0c      	ite	eq
 80006a4:	2301      	moveq	r3, #1
 80006a6:	2300      	movne	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <outBufferDisplay+0xe4>)
 80006ae:	58e3      	ldr	r3, [r4, r3]
 80006b0:	711a      	strb	r2, [r3, #4]

    // Считывание состояния кнопки ARM и обновление соответствующего поля в структуре
    bufferDisplay.bfArm = !HAL_GPIO_ReadPin(PIN_BUTTON_ARM_GPIO_Port, PIN_BUTTON_ARM_Pin);
 80006b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <outBufferDisplay+0xdc>)
 80006b8:	f003 fd02 	bl	80040c0 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf0c      	ite	eq
 80006c2:	2301      	moveq	r3, #1
 80006c4:	2300      	movne	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <outBufferDisplay+0xe4>)
 80006cc:	58e3      	ldr	r3, [r4, r3]
 80006ce:	771a      	strb	r2, [r3, #28]

    // Считывание напряжения питания и обновление соответствующего поля в структуре
    readPower();
 80006d0:	f000 ffe8 	bl	80016a4 <readPower>
    bufferDisplay.bfPowerPult = adcVoltage[0];
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <outBufferDisplay+0xe8>)
 80006d6:	58e3      	ldr	r3, [r4, r3]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <outBufferDisplay+0xe4>)
 80006de:	58e3      	ldr	r3, [r4, r3]
 80006e0:	769a      	strb	r2, [r3, #26]

    // Задержка 1 миллисекунда (возможно, ошибка в оригинальном коде)
    HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f002 f938 	bl	8002958 <HAL_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	bd98      	pop	{r3, r4, r7, pc}
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	40010800 	.word	0x40010800
 80006f4:	17fffd6e 	.word	0x17fffd6e
 80006f8:	00000088 	.word	0x00000088
 80006fc:	00000094 	.word	0x00000094

08000700 <e32PinSetup>:
 * @brief Настройка пинов E32 в соответствии с режимом работы.
 *
 * @param mode Режим работы E32.
 * @return uint8_t Возвращает 0 при успешной настройке, 1 в случае ошибки.
 */
uint8_t e32PinSetup(E32PinState mode) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]

    // Выбор режима в зависимости от значения mode
    switch (mode) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d839      	bhi.n	8000788 <e32PinSetup+0x88>
 8000714:	a202      	add	r2, pc, #8	; (adr r2, 8000720 <e32PinSetup+0x20>)
 8000716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071a:	441a      	add	r2, r3
 800071c:	4710      	bx	r2
 800071e:	bf00      	nop
 8000720:	00000027 	.word	0x00000027
 8000724:	0000003d 	.word	0x0000003d
 8000728:	00000053 	.word	0x00000053
 800072c:	00000011 	.word	0x00000011
        case sleepMode:
            HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2120      	movs	r1, #32
 8000734:	481b      	ldr	r0, [pc, #108]	; (80007a4 <e32PinSetup+0xa4>)
 8000736:	f003 fcda 	bl	80040ee <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <e32PinSetup+0xa4>)
 8000740:	f003 fcd5 	bl	80040ee <HAL_GPIO_WritePin>
            break;
 8000744:	e028      	b.n	8000798 <e32PinSetup+0x98>
        case normalMode:
            HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4816      	ldr	r0, [pc, #88]	; (80007a4 <e32PinSetup+0xa4>)
 800074c:	f003 fccf 	bl	80040ee <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <e32PinSetup+0xa4>)
 8000756:	f003 fcca 	bl	80040ee <HAL_GPIO_WritePin>
            break;
 800075a:	e01d      	b.n	8000798 <e32PinSetup+0x98>
        case wakeUpMode:
            HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <e32PinSetup+0xa4>)
 8000762:	f003 fcc4 	bl	80040ee <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <e32PinSetup+0xa4>)
 800076c:	f003 fcbf 	bl	80040ee <HAL_GPIO_WritePin>
            break;
 8000770:	e012      	b.n	8000798 <e32PinSetup+0x98>
        case powerSavingMode:
            HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <e32PinSetup+0xa4>)
 8000778:	f003 fcb9 	bl	80040ee <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <e32PinSetup+0xa4>)
 8000782:	f003 fcb4 	bl	80040ee <HAL_GPIO_WritePin>
            break;
 8000786:	e007      	b.n	8000798 <e32PinSetup+0x98>
        default:
            status = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
            #ifdef Debug
                // Вывод отладочной информации в случае ошибки
                printf("NUMBER_ERROR_SETUP_E32_PIN\n");
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <e32PinSetup+0xa8>)
 800078e:	447b      	add	r3, pc
 8000790:	4618      	mov	r0, r3
 8000792:	f006 fd05 	bl	80071a0 <puts>
            #endif
            break;
 8000796:	bf00      	nop
    }

    // Возврат статуса (0 при успешной настройке, 1 в случае ошибки)
    return status;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40010800 	.word	0x40010800
 80007a8:	00007d4e 	.word	0x00007d4e

080007ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <__NVIC_SystemReset+0x24>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007be:	4904      	ldr	r1, [pc, #16]	; (80007d0 <__NVIC_SystemReset+0x24>)
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_SystemReset+0x28>)
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007c6:	f3bf 8f4f 	dsb	sy
}
 80007ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <__NVIC_SystemReset+0x20>
 80007d0:	e000ed00 	.word	0xe000ed00
 80007d4:	05fa0004 	.word	0x05fa0004

080007d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d013      	beq.n	8000818 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00b      	beq.n	8000818 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000800:	e000      	b.n	8000804 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000802:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000804:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f9      	beq.n	8000802 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800080e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <_write>:
 * @param ptr - Указатель на массив символов для вывода.
 * @param len - Длина массива.
 * @return int - Длина выводимых данных.
 */
int _write(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  (void)file; // Подавление предупреждения о неиспользуемом параметре.
  int DataIdx;

  // Цикл по каждому символу в массиве.
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e009      	b.n	800084a <_write+0x26>
  {
    ITM_SendChar(*ptr++); // Отправка символа.
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	60ba      	str	r2, [r7, #8]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffca 	bl	80007d8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbf1      	blt.n	8000836 <_write+0x12>
  }
  return len; // Возвращается длина выводимых данных.
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <setInterruptBeginState>:
 * @brief Устанавливает прерывания в начале состояния и вызывает функцию установки прерывания.
 *
 * @param sInterruptbeginState - Начальное состояние прерывания.
 */
void setInterruptBeginState(NumberStateInterrupt sInterruptbeginState)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <setInterruptBeginState+0x34>)
 8000868:	447c      	add	r4, pc
#ifdef Debug
    printf("setInterruptBeginState.\n"); // Вывод отладочного сообщения (если включен режим отладки)
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <setInterruptBeginState+0x38>)
 800086c:	447b      	add	r3, pc
 800086e:	4618      	mov	r0, r3
 8000870:	f006 fc96 	bl	80071a0 <puts>
#endif
    InterruptState = sInterruptbeginState; // Установка начального состояния прерывания
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <setInterruptBeginState+0x3c>)
 8000876:	58e3      	ldr	r3, [r4, r3]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	701a      	strb	r2, [r3, #0]
    setInterruptState(InterruptState);      // Вызов функции установки прерывания
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <setInterruptBeginState+0x3c>)
 800087e:	58e3      	ldr	r3, [r4, r3]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f82a 	bl	80008dc <setInterruptState>
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	17fffb20 	.word	0x17fffb20
 8000894:	00007c8c 	.word	0x00007c8c
 8000898:	00000008 	.word	0x00000008

0800089c <setInterruptEndState>:
/**
 * @brief Устанавливает прерывания в конце состояния и вызывает функцию установки прерывания
 *
 * @param sInterruptbeginState - Начальное состояние прерывания
 */
void setInterruptEndState(NumberStateInterrupt sInterruptEndState){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4c0a      	ldr	r4, [pc, #40]	; (80008d0 <setInterruptEndState+0x34>)
 80008a8:	447c      	add	r4, pc
#ifdef Debug
	printf("setInterruptEndState().\n"); //Вывод отладочного сообщения
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <setInterruptEndState+0x38>)
 80008ac:	447b      	add	r3, pc
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 fc76 	bl	80071a0 <puts>
#endif
	InterruptState= sInterruptEndState; // Установка конченого состояния прерывания
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <setInterruptEndState+0x3c>)
 80008b6:	58e3      	ldr	r3, [r4, r3]
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	701a      	strb	r2, [r3, #0]
	setInterruptState(InterruptState); // Вызов функции установки прерывания
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <setInterruptEndState+0x3c>)
 80008be:	58e3      	ldr	r3, [r4, r3]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f80a 	bl	80008dc <setInterruptState>
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	17fffae0 	.word	0x17fffae0
 80008d4:	00007c64 	.word	0x00007c64
 80008d8:	00000008 	.word	0x00000008

080008dc <setInterruptState>:
 * @brief Устанавливает состояние прерывания в соответствии с переданным значением.
 *
 * @param sInterruptState - Состояние прерывания, которое необходимо установить.
 */
void setInterruptState(NumberStateInterrupt sInterruptState)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    switch (sInterruptState)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d835      	bhi.n	8000958 <setInterruptState+0x7c>
 80008ec:	a202      	add	r2, pc, #8	; (adr r2, 80008f8 <setInterruptState+0x1c>)
 80008ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f2:	441a      	add	r2, r3
 80008f4:	4710      	bx	r2
 80008f6:	bf00      	nop
 80008f8:	00000011 	.word	0x00000011
 80008fc:	00000025 	.word	0x00000025
 8000900:	00000039 	.word	0x00000039
 8000904:	0000004d 	.word	0x0000004d
    {
    case NoUsaNoExtern:
        HAL_NVIC_DisableIRQ(USART1_IRQn); // Отключение прерывания USART1
 8000908:	2025      	movs	r0, #37	; 0x25
 800090a:	f002 fd60 	bl	80033ce <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // Отключение прерывания EXTI15_10
 800090e:	2028      	movs	r0, #40	; 0x28
 8000910:	f002 fd5d 	bl	80033ce <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(EXTI9_5_IRQn); // Отключение прерывания EXTI9_5
 8000914:	2017      	movs	r0, #23
 8000916:	f002 fd5a 	bl	80033ce <HAL_NVIC_DisableIRQ>
        break;
 800091a:	e01e      	b.n	800095a <setInterruptState+0x7e>
    case NoUsaExtern:
        HAL_NVIC_DisableIRQ(USART1_IRQn); // Отключение прерывания USART1
 800091c:	2025      	movs	r0, #37	; 0x25
 800091e:	f002 fd56 	bl	80033ce <HAL_NVIC_DisableIRQ>
        HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Включение прерывания EXTI15_10
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f002 fd45 	bl	80033b2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // Включение прерывания EXTI9_5
 8000928:	2017      	movs	r0, #23
 800092a:	f002 fd42 	bl	80033b2 <HAL_NVIC_EnableIRQ>
        break;
 800092e:	e014      	b.n	800095a <setInterruptState+0x7e>
    case UsaNoExtern:
        HAL_NVIC_EnableIRQ(USART1_IRQn); // Включение прерывания USART1
 8000930:	2025      	movs	r0, #37	; 0x25
 8000932:	f002 fd3e 	bl	80033b2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // Отключение прерывания EXTI15_10
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f002 fd49 	bl	80033ce <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(EXTI9_5_IRQn); // Отключение прерывания EXTI9_5
 800093c:	2017      	movs	r0, #23
 800093e:	f002 fd46 	bl	80033ce <HAL_NVIC_DisableIRQ>
        break;
 8000942:	e00a      	b.n	800095a <setInterruptState+0x7e>
    case UsaExtern:
        HAL_NVIC_EnableIRQ(USART1_IRQn); // Включение прерывания USART1
 8000944:	2025      	movs	r0, #37	; 0x25
 8000946:	f002 fd34 	bl	80033b2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Включение прерывания EXTI15_10
 800094a:	2028      	movs	r0, #40	; 0x28
 800094c:	f002 fd31 	bl	80033b2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); // Включение прерывания EXTI9_5
 8000950:	2017      	movs	r0, #23
 8000952:	f002 fd2e 	bl	80033b2 <HAL_NVIC_EnableIRQ>
        break;
 8000956:	e000      	b.n	800095a <setInterruptState+0x7e>
    default:
        break;
 8000958:	bf00      	nop
    }
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop

08000964 <outError>:

//Пустая функция для вечного цикла ошибки
void outError(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("---------------------------ERROR FOREVER-------------().\n");
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <outError+0x18>)
 800096a:	447b      	add	r3, pc
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fc17 	bl	80071a0 <puts>
#endif
	HAL_Delay(1);
 8000972:	2001      	movs	r0, #1
 8000974:	f001 fff0 	bl	8002958 <HAL_Delay>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	00007bbe 	.word	0x00007bbe

08000980 <outBlank>:
//Пустая функция
void outBlank(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f001 ffe7 	bl	8002958 <HAL_Delay>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <outRxMessage>:
//Пустая функция для состояния приема сообщения
void outRxMessage(void){
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f001 ffe0 	bl	8002958 <HAL_Delay>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <waitShort>:
//Функция короткого ожидания. 1 мс
void waitShort(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("waitShort().\n");
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <waitShort+0x18>)
 80009a2:	447b      	add	r3, pc
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 fbfb 	bl	80071a0 <puts>
#endif
	HAL_Delay(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f001 ffd4 	bl	8002958 <HAL_Delay>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	00007bc2 	.word	0x00007bc2

080009b8 <waitLongMenu>:
//Пустая функция ожидания
void waitLongMenu(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 ffcb 	bl	8002958 <HAL_Delay>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <checkRxStartMessage>:
 *
 * @param pTx - Указатель на массив ожидаемого сообщения.
 * @param n - Размер ожидаемого сообщения.
 * @return uint8_t - Статус проверки (0 - совпадение, 1 - несовпадение).
 */
uint8_t checkRxStartMessage(uint8_t* pTx, uint8_t n) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
 80009d4:	4c22      	ldr	r4, [pc, #136]	; (8000a60 <checkRxStartMessage+0x98>)
 80009d6:	447c      	add	r4, pc
#ifdef Debug
    printf("checkRxStartMessage().\n");
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <checkRxStartMessage+0x9c>)
 80009da:	447b      	add	r3, pc
 80009dc:	4618      	mov	r0, r3
 80009de:	f006 fbdf 	bl	80071a0 <puts>
#endif
    HAL_Delay(500);
 80009e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e6:	f001 ffb7 	bl	8002958 <HAL_Delay>

    for (uint8_t i = 0; i < n; i++) { // Проверяет совпадения первых n символов с ожиданием
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e02e      	b.n	8000a4e <checkRxStartMessage+0x86>
        if (receiveBuffer[i] != *(pTx + i)) {
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <checkRxStartMessage+0xa0>)
 80009f4:	58a2      	ldr	r2, [r4, r2]
 80009f6:	5cd2      	ldrb	r2, [r2, r3]
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	440b      	add	r3, r1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d021      	beq.n	8000a48 <checkRxStartMessage+0x80>
            nextState = error;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <checkRxStartMessage+0xa4>)
 8000a06:	58e3      	ldr	r3, [r4, r3]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
#ifdef Debug
            printf("compareRxMessage_Error.\n");
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <checkRxStartMessage+0xa8>)
 8000a0e:	447b      	add	r3, pc
 8000a10:	4618      	mov	r0, r3
 8000a12:	f006 fbc5 	bl	80071a0 <puts>
            for (int k = 0; k < 5; k++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	e00d      	b.n	8000a38 <checkRxStartMessage+0x70>
                printf("compareRxMessage_Error.%d\n", receiveBuffer[k]); // Выводит первые пять символов при несовпадении для отладки
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <checkRxStartMessage+0xa0>)
 8000a1e:	58e2      	ldr	r2, [r4, r3]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <checkRxStartMessage+0xac>)
 8000a2a:	447b      	add	r3, pc
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f006 fb31 	bl	8007094 <iprintf>
            for (int k = 0; k < 5; k++) {
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	ddee      	ble.n	8000a1c <checkRxStartMessage+0x54>
            }
#endif
            handlerError(startE32RxError);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f000 f81a 	bl	8000a78 <handlerError>
            return 1; // Несовпадение сообщений
 8000a44:	2301      	movs	r3, #1
 8000a46:	e007      	b.n	8000a58 <checkRxStartMessage+0x90>
    for (uint8_t i = 0; i < n; i++) { // Проверяет совпадения первых n символов с ожиданием
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	7bfa      	ldrb	r2, [r7, #15]
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3cc      	bcc.n	80009f0 <checkRxStartMessage+0x28>
        }
    }

    return 0; // Совпадение сообщений
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	17fff9b2 	.word	0x17fff9b2
 8000a64:	00007b9a 	.word	0x00007b9a
 8000a68:	000000c0 	.word	0x000000c0
 8000a6c:	0000005c 	.word	0x0000005c
 8000a70:	00007b7e 	.word	0x00007b7e
 8000a74:	00007b7a 	.word	0x00007b7a

08000a78 <handlerError>:
/**
 * @brief Обрабатывает ошибку и выполняет соответствующие действия в зависимости от типа ошибки.
 *
 * @param error - Тип ошибки (перечисление ErrorType).
 */
void handlerError(ErrorType error) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
    switch (error) {
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d854      	bhi.n	8000b34 <handlerError+0xbc>
 8000a8a:	a202      	add	r2, pc, #8	; (adr r2, 8000a94 <handlerError+0x1c>)
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	441a      	add	r2, r3
 8000a92:	4710      	bx	r2
 8000a94:	0000001d 	.word	0x0000001d
 8000a98:	00000045 	.word	0x00000045
 8000a9c:	0000008d 	.word	0x0000008d
 8000aa0:	00000059 	.word	0x00000059
 8000aa4:	00000031 	.word	0x00000031
 8000aa8:	0000006d 	.word	0x0000006d
 8000aac:	00000081 	.word	0x00000081
        case e32FunctionInit:
#ifdef Debug
            printf("++++++++++++++++++++++++++++Error in e32PinSetup\n");
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <handlerError+0xcc>)
 8000ab2:	447b      	add	r3, pc
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fb73 	bl	80071a0 <puts>
#endif
            errorReboot((uint8_t)error);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f84f 	bl	8000b60 <errorReboot>
            break;
 8000ac2:	e038      	b.n	8000b36 <handlerError+0xbe>
        case txLogicError:
#ifdef Debug
            printf("+++++++++++++++++++++++Error in outTxMessage.\n");
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <handlerError+0xd0>)
 8000ac6:	447b      	add	r3, pc
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f006 fb69 	bl	80071a0 <puts>
#endif
            errorReboot((uint8_t)error);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f845 	bl	8000b60 <errorReboot>
            break;
 8000ad6:	e02e      	b.n	8000b36 <handlerError+0xbe>
        case startE32Error:
#ifdef Debug
            printf("+++++++++++++++++++++++Error in Start.\n");
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <handlerError+0xd4>)
 8000ada:	447b      	add	r3, pc
 8000adc:	4618      	mov	r0, r3
 8000ade:	f006 fb5f 	bl	80071a0 <puts>
#endif
            errorReboot((uint8_t)error);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f83b 	bl	8000b60 <errorReboot>
            break;
 8000aea:	e024      	b.n	8000b36 <handlerError+0xbe>
        case startDisplayError:
#ifdef Debug
            printf("+++++++++++++++++++++++Error in startDisplay.\n");
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <handlerError+0xd8>)
 8000aee:	447b      	add	r3, pc
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 fb55 	bl	80071a0 <puts>
#endif
            errorReboot((uint8_t)error);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f831 	bl	8000b60 <errorReboot>
            break;
 8000afe:	e01a      	b.n	8000b36 <handlerError+0xbe>
        case txIntruptError:
#ifdef Debug
            printf("+++++++++++++++++++++++Error in outTxMessage.\n");
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <handlerError+0xdc>)
 8000b02:	447b      	add	r3, pc
 8000b04:	4618      	mov	r0, r3
 8000b06:	f006 fb4b 	bl	80071a0 <puts>
#endif
            errorReboot((uint8_t)error);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f827 	bl	8000b60 <errorReboot>
            break;
 8000b12:	e010      	b.n	8000b36 <handlerError+0xbe>
        case readVoltageError:
#ifdef Debug
            printf("+++++++++++++++++++++++Error in ReadVolt.\n");
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <handlerError+0xe0>)
 8000b16:	447b      	add	r3, pc
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 fb41 	bl	80071a0 <puts>
#endif
            break;
 8000b1e:	e00a      	b.n	8000b36 <handlerError+0xbe>
        case startE32RxError:
#ifdef Debug
            printf("+++++++++++++++++++++++Error in outTxMessage.\n");
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <handlerError+0xe4>)
 8000b22:	447b      	add	r3, pc
 8000b24:	4618      	mov	r0, r3
 8000b26:	f006 fb3b 	bl	80071a0 <puts>
#endif
            errorReboot((uint8_t)error);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f817 	bl	8000b60 <errorReboot>
            break;
 8000b32:	e000      	b.n	8000b36 <handlerError+0xbe>
        default:
            break;
 8000b34:	bf00      	nop
    }
    HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f001 ff0e 	bl	8002958 <HAL_Delay>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	00007b0e 	.word	0x00007b0e
 8000b48:	00007b2e 	.word	0x00007b2e
 8000b4c:	00007b4a 	.word	0x00007b4a
 8000b50:	00007b5e 	.word	0x00007b5e
 8000b54:	00007af2 	.word	0x00007af2
 8000b58:	00007b66 	.word	0x00007b66
 8000b5c:	00007ad2 	.word	0x00007ad2

08000b60 <errorReboot>:
/**
 * @brief Конечный цикл мигания светодиодом в случае ошибки, с последующим сбросом системы.
 *
 * @param numError - Номер ошибки (используется для определения числа миганий).
 */
void errorReboot(uint8_t numError) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
    while (1) {
        for (int i = 0; i < (numError * 2); i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e008      	b.n	8000b82 <errorReboot+0x22>
            // Мигаем светодиодом
            togleLed();
 8000b70:	f000 fffa 	bl	8001b68 <togleLed>
            HAL_Delay(400);
 8000b74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b78:	f001 feee 	bl	8002958 <HAL_Delay>
        for (int i = 0; i < (numError * 2); i++) {
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <errorReboot+0x10>
        }
        HAL_Delay(500);
 8000b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b90:	f001 fee2 	bl	8002958 <HAL_Delay>
        // Включаем сброс устройства
        //RCC_DeInit();//-------------------------------------------------------
        // Инициализируем системные настройки (тактовую частоту и т.д.)
        SystemInit();
 8000b94:	f001 fe3c 	bl	8002810 <SystemInit>
        // Включаем сброс системы
        NVIC_SystemReset();
 8000b98:	f7ff fe08 	bl	80007ac <__NVIC_SystemReset>

08000b9c <cheсkRxMessage>:
 * @param pTx Указатель на первый байт принятого сообщения.
 * @param pTx2 Указатель на первый байт жидаемого сообщения.
 * @param n Размер сообщения.
 * @return NextState - Следующее состояние автомата.
 */
uint8_t cheсkRxMessage(uint8_t* pTx, uint8_t* pTx2, uint8_t n) {
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	4c28      	ldr	r4, [pc, #160]	; (8000c4c <cheсkRxMessage+0xb0>)
 8000bac:	447c      	add	r4, pc
    if (bufferDisplay.timeTxWake >= 1) {  // Проверка условия времени передачи
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <cheсkRxMessage+0xb4>)
 8000bb0:	58e3      	ldr	r3, [r4, r3]
 8000bb2:	7fdb      	ldrb	r3, [r3, #31]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d02e      	beq.n	8000c16 <cheсkRxMessage+0x7a>
        if ((compareMessage(pTx, n) == 1) && (compareAdressMessage(pTx) == 1)) { // Проверка совпадения сообщения и адреса
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f000 f84b 	bl	8000c58 <compareMessage>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d13b      	bne.n	8000c40 <cheсkRxMessage+0xa4>
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 f889 	bl	8000ce0 <compareAdressMessage>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d135      	bne.n	8000c40 <cheсkRxMessage+0xa4>
            // Обновление данных в буфере дисплея
            bufferDisplay.numberRxExploder[receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]] = 1;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <cheсkRxMessage+0xb8>)
 8000bd6:	58e3      	ldr	r3, [r4, r3]
 8000bd8:	78db      	ldrb	r3, [r3, #3]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <cheсkRxMessage+0xb4>)
 8000bde:	58e3      	ldr	r3, [r4, r3]
 8000be0:	4413      	add	r3, r2
 8000be2:	2201      	movs	r2, #1
 8000be4:	715a      	strb	r2, [r3, #5]
            bufferDisplay.numberRxExploderOnDetonator[receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]] = receiveBuffer[ADRES_NUMBER_BYTE_DETONATOR_ON];
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <cheсkRxMessage+0xb8>)
 8000be8:	58e3      	ldr	r3, [r4, r3]
 8000bea:	78db      	ldrb	r3, [r3, #3]
 8000bec:	4619      	mov	r1, r3
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <cheсkRxMessage+0xb8>)
 8000bf0:	58e3      	ldr	r3, [r4, r3]
 8000bf2:	791a      	ldrb	r2, [r3, #4]
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <cheсkRxMessage+0xb4>)
 8000bf6:	58e3      	ldr	r3, [r4, r3]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	73da      	strb	r2, [r3, #15]
            bufferDisplay.numberRxExploderVolt[receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]] = receiveBuffer[ADRES_NUMBER_BYTE_VOLT];
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <cheсkRxMessage+0xb8>)
 8000bfe:	58e3      	ldr	r3, [r4, r3]
 8000c00:	78db      	ldrb	r3, [r3, #3]
 8000c02:	4619      	mov	r1, r3
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <cheсkRxMessage+0xb8>)
 8000c06:	58e3      	ldr	r3, [r4, r3]
 8000c08:	795a      	ldrb	r2, [r3, #5]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <cheсkRxMessage+0xb4>)
 8000c0c:	58e3      	ldr	r3, [r4, r3]
 8000c0e:	440b      	add	r3, r1
 8000c10:	751a      	strb	r2, [r3, #20]
            // Возврат состояния передачии
            return waitTx;
 8000c12:	2309      	movs	r3, #9
 8000c14:	e015      	b.n	8000c42 <cheсkRxMessage+0xa6>
        }
    }
    // Проверка условия времени передачи (если не выполнено предыдущее условие)
    else if (bufferDisplay.timeTxWake < 1) {
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <cheсkRxMessage+0xb4>)
 8000c18:	58e3      	ldr	r3, [r4, r3]
 8000c1a:	7fdb      	ldrb	r3, [r3, #31]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10f      	bne.n	8000c40 <cheсkRxMessage+0xa4>
        // Проверка совпадения сообщения и адреса (второе сообщение)
        if ((compareMessage(pTx2, n) == 1) && (compareAdressMessage(pTx2) == 1)) {
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4619      	mov	r1, r3
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f000 f817 	bl	8000c58 <compareMessage>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <cheсkRxMessage+0xa4>
 8000c30:	68b8      	ldr	r0, [r7, #8]
 8000c32:	f000 f855 	bl	8000ce0 <compareAdressMessage>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <cheсkRxMessage+0xa4>
            // Возврат состояния меню
            return waitMenu;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	e000      	b.n	8000c42 <cheсkRxMessage+0xa6>
        }
    }
    // Возврат состояния ожидания
    return wait;
 8000c40:	230b      	movs	r3, #11
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	17fff7dc 	.word	0x17fff7dc
 8000c50:	00000088 	.word	0x00000088
 8000c54:	000000c0 	.word	0x000000c0

08000c58 <compareMessage>:
 *
 * @param pTx Указатель на первый байт ожидаемого сообщения.
 * @param n Размер сообщения.
 * @return uint8_t - 1, если сообщения совпадают, 0 в противном случае.
 */
uint8_t compareMessage(uint8_t* pTx, uint8_t n) {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
 8000c64:	4c1a      	ldr	r4, [pc, #104]	; (8000cd0 <compareMessage+0x78>)
 8000c66:	447c      	add	r4, pc
    // Цикл сравнения байтов сообщений
    for (uint8_t i = 0; i < n; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e027      	b.n	8000cbe <compareMessage+0x66>
        // Проверка совпадения байтов
        if (receiveBuffer[i] != *(pTx + i)) {
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <compareMessage+0x7c>)
 8000c72:	58a2      	ldr	r2, [r4, r2]
 8000c74:	5cd2      	ldrb	r2, [r2, r3]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d01a      	beq.n	8000cb8 <compareMessage+0x60>
            #ifdef Debug
                // Вывод отладочной информации об несовпадении
                printf("compareRxMessage_Error.\n");
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <compareMessage+0x80>)
 8000c84:	447b      	add	r3, pc
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 fa8a 	bl	80071a0 <puts>
                for (int k = 0; k < 16; k++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	e00d      	b.n	8000cae <compareMessage+0x56>
                    printf("compareRxMessage_Error.%d\n", receiveBuffer[k]);
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <compareMessage+0x7c>)
 8000c94:	58e2      	ldr	r2, [r4, r3]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <compareMessage+0x84>)
 8000ca0:	447b      	add	r3, pc
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f006 f9f6 	bl	8007094 <iprintf>
                for (int k = 0; k < 16; k++) {
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3301      	adds	r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	ddee      	ble.n	8000c92 <compareMessage+0x3a>
                }
            #endif
            return 0; // Возврат 0 в случае несовпадения
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e007      	b.n	8000cc8 <compareMessage+0x70>
    for (uint8_t i = 0; i < n; i++) {
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3d3      	bcc.n	8000c6e <compareMessage+0x16>
        }
    }
    return 1; // Возврат 1, если сообщения совпадают
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	17fff722 	.word	0x17fff722
 8000cd4:	000000c0 	.word	0x000000c0
 8000cd8:	00007908 	.word	0x00007908
 8000cdc:	00007904 	.word	0x00007904

08000ce0 <compareAdressMessage>:
 * @brief Сравнивает адрес полученного сообщения с допустимыми значениями.
 *
 * @param pTx Указатель на байт адреса сообщения.
 * @return uint8_t - 1, если адрес в пределах допустимых значений, 0 в противном случае.
 */
uint8_t compareAdressMessage(uint8_t* pTx) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <compareAdressMessage+0x38>)
 8000cea:	447b      	add	r3, pc
    // Проверка адреса на превышение максимального значения
    if (receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER] > NUMBER_EXPLODER) {
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <compareAdressMessage+0x3c>)
 8000cee:	589a      	ldr	r2, [r3, r2]
 8000cf0:	78d2      	ldrb	r2, [r2, #3]
 8000cf2:	2a05      	cmp	r2, #5
 8000cf4:	d90a      	bls.n	8000d0c <compareAdressMessage+0x2c>
        #ifdef Debug
            // Вывод отладочной информации об ошибке
            printf("+++++++++++++++ERROR NUMBAR EXPLODER RX MESSAGE TEST.%d\n", receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]);
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <compareAdressMessage+0x3c>)
 8000cf8:	589b      	ldr	r3, [r3, r2]
 8000cfa:	78db      	ldrb	r3, [r3, #3]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <compareAdressMessage+0x40>)
 8000d00:	447b      	add	r3, pc
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 f9c6 	bl	8007094 <iprintf>
        #endif
        return 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e000      	b.n	8000d0e <compareAdressMessage+0x2e>
    } else {
        return 1; // Возврат 1, если адрес в пределах допустимых значений
 8000d0c:	2301      	movs	r3, #1
    }
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	17fff69e 	.word	0x17fff69e
 8000d1c:	000000c0 	.word	0x000000c0
 8000d20:	000079a8 	.word	0x000079a8

08000d24 <ForewerHandlerError>:
/**
 * @brief Обработчик ошибок, выполняющий бесконечный цикл мигания светодиода и запись ошибки во флеш-память.
 *
 * @return uint32_t Возвращает 0 (не достигается, так как функция выполняет бесконечный цикл).
 */
uint32_t ForewerHandlerError(void) {
 8000d24:	b598      	push	{r3, r4, r7, lr}
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4c0d      	ldr	r4, [pc, #52]	; (8000d60 <ForewerHandlerError+0x3c>)
 8000d2a:	447c      	add	r4, pc
    #ifdef Debug
        // Вывод отладочной информации
        printf("ERROR_FOREVER\n");
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <ForewerHandlerError+0x40>)
 8000d2e:	447b      	add	r3, pc
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fa35 	bl	80071a0 <puts>
    #endif

    // Запись ошибки во флеш-память
    Flash_Write_Data(FLASH_ADDRES_START_ERROR, (uint32_t *)flashData, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <ForewerHandlerError+0x44>)
 8000d3a:	58e3      	ldr	r3, [r4, r3]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <ForewerHandlerError+0x34>)
 8000d40:	f7ff fa2c 	bl	800019c <Flash_Write_Data>

    // Бесконечный цикл мигания светодиода
    while (1) {
            HAL_GPIO_TogglePin(PIN_LED_GPIO_Port, PIN_LED_Pin);
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <ForewerHandlerError+0x38>)
 8000d4a:	f003 f9e8 	bl	800411e <HAL_GPIO_TogglePin>
            HAL_Delay(200);
 8000d4e:	20c8      	movs	r0, #200	; 0xc8
 8000d50:	f001 fe02 	bl	8002958 <HAL_Delay>
            HAL_GPIO_TogglePin(PIN_LED_GPIO_Port, PIN_LED_Pin);
 8000d54:	e7f6      	b.n	8000d44 <ForewerHandlerError+0x20>
 8000d56:	bf00      	nop
 8000d58:	08010010 	.word	0x08010010
 8000d5c:	40011000 	.word	0x40011000
 8000d60:	17fff65e 	.word	0x17fff65e
 8000d64:	000079b6 	.word	0x000079b6
 8000d68:	00000040 	.word	0x00000040

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b598      	push	{r3, r4, r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4c2e      	ldr	r4, [pc, #184]	; (8000e2c <main+0xc0>)
 8000d72:	447c      	add	r4, pc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f001 fd78 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f860 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa60 	bl	8001240 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d80:	f000 fa30 	bl	80011e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d84:	f000 f9f6 	bl	8001174 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d88:	f000 f8f6 	bl	8000f78 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d8c:	f000 f8a6 	bl	8000edc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d90:	f000 f930 	bl	8000ff4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d94:	f000 f990 	bl	80010b8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  FSM[currentState].out(); //Вызов функции out() для текущего состояния конечного автомата
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <main+0xc4>)
 8000d9a:	58e3      	ldr	r3, [r4, r3]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <main+0xc8>)
 8000da0:	58a2      	ldr	r2, [r4, r2]
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	4413      	add	r3, r2
 8000da6:	3304      	adds	r3, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4798      	blx	r3
	  setInterruptBeginState(FSM[currentState].interruptBeginState); //Установка начального состояния для прерывания
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <main+0xc4>)
 8000dae:	58e3      	ldr	r3, [r4, r3]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <main+0xc8>)
 8000db4:	58a2      	ldr	r2, [r4, r2]
 8000db6:	019b      	lsls	r3, r3, #6
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fd4d 	bl	800085c <setInterruptBeginState>
	  FSM[currentState].time(); //Вызов функции time() для управления временем ожидания
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <main+0xc4>)
 8000dc4:	58e3      	ldr	r3, [r4, r3]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <main+0xc8>)
 8000dca:	58a2      	ldr	r2, [r4, r2]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	4413      	add	r3, r2
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4798      	blx	r3
	  setInterruptEndState(FSM[currentState].interruptEndState); //Установка конечного состояния для прерывания
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <main+0xc4>)
 8000dd8:	58e3      	ldr	r3, [r4, r3]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <main+0xc8>)
 8000dde:	58a2      	ldr	r2, [r4, r2]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	4413      	add	r3, r2
 8000de4:	3301      	adds	r3, #1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd57 	bl	800089c <setInterruptEndState>
	  input = FSM[currentState].in(); //Получение входных данных с помощью функции in()
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <main+0xc4>)
 8000df0:	58e3      	ldr	r3, [r4, r3]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <main+0xc8>)
 8000df6:	58a2      	ldr	r2, [r4, r2]
 8000df8:	019b      	lsls	r3, r3, #6
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4798      	blx	r3
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <main+0xcc>)
 8000e06:	58e3      	ldr	r3, [r4, r3]
 8000e08:	601a      	str	r2, [r3, #0]
	  currentState = FSM[currentState].next[input]; //переход в следующее состояние
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <main+0xc4>)
 8000e0c:	58e3      	ldr	r3, [r4, r3]
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <main+0xcc>)
 8000e12:	58e3      	ldr	r3, [r4, r3]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <main+0xc8>)
 8000e18:	58e3      	ldr	r3, [r4, r3]
 8000e1a:	0109      	lsls	r1, r1, #4
 8000e1c:	440a      	add	r2, r1
 8000e1e:	3204      	adds	r2, #4
 8000e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <main+0xc4>)
 8000e26:	58e3      	ldr	r3, [r4, r3]
 8000e28:	601a      	str	r2, [r3, #0]
	  FSM[currentState].out(); //Вызов функции out() для текущего состояния конечного автомата
 8000e2a:	e7b5      	b.n	8000d98 <main+0x2c>
 8000e2c:	17fff616 	.word	0x17fff616
 8000e30:	00000028 	.word	0x00000028
 8000e34:	0000006c 	.word	0x0000006c
 8000e38:	0000002c 	.word	0x0000002c

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	; 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	2228      	movs	r2, #40	; 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 f91a 	bl	8007084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 ff9d 	bl	8004dc0 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e8c:	f000 fe78 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 fa0a 	bl	80052c4 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000eb6:	f000 fe63 	bl	8001b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fbab 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ed0:	f000 fe56 	bl	8001b80 <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3750      	adds	r7, #80	; 0x50
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4c23      	ldr	r4, [pc, #140]	; (8000f70 <MX_ADC1_Init+0x94>)
 8000ee4:	447c      	add	r4, pc

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef2:	58e3      	ldr	r3, [r4, r3]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <MX_ADC1_Init+0x90>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000efa:	58e3      	ldr	r3, [r4, r3]
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f02:	58e3      	ldr	r3, [r4, r3]
 8000f04:	2200      	movs	r2, #0
 8000f06:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f0a:	58e3      	ldr	r3, [r4, r3]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f12:	58e3      	ldr	r3, [r4, r3]
 8000f14:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f1c:	58e3      	ldr	r3, [r4, r3]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f24:	58e3      	ldr	r3, [r4, r3]
 8000f26:	2201      	movs	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f2c:	58e3      	ldr	r3, [r4, r3]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fd56 	bl	80029e0 <HAL_ADC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000f3a:	f000 fe21 	bl	8001b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f46:	2307      	movs	r3, #7
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f50:	58e3      	ldr	r3, [r4, r3]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 ff12 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f5e:	f000 fe0f 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd90      	pop	{r4, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40012400 	.word	0x40012400
 8000f70:	17fff4a4 	.word	0x17fff4a4
 8000f74:	00000058 	.word	0x00000058

08000f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f7e:	447b      	add	r3, pc
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000f82:	589a      	ldr	r2, [r3, r2]
 8000f84:	4917      	ldr	r1, [pc, #92]	; (8000fe4 <MX_I2C1_Init+0x6c>)
 8000f86:	6011      	str	r1, [r2, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000f8a:	589a      	ldr	r2, [r3, r2]
 8000f8c:	4916      	ldr	r1, [pc, #88]	; (8000fe8 <MX_I2C1_Init+0x70>)
 8000f8e:	6051      	str	r1, [r2, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000f92:	589a      	ldr	r2, [r3, r2]
 8000f94:	2100      	movs	r1, #0
 8000f96:	6091      	str	r1, [r2, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f98:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000f9a:	589a      	ldr	r2, [r3, r2]
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	60d1      	str	r1, [r2, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000fa2:	589a      	ldr	r2, [r3, r2]
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	6111      	str	r1, [r2, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000faa:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000fac:	589a      	ldr	r2, [r3, r2]
 8000fae:	2100      	movs	r1, #0
 8000fb0:	6151      	str	r1, [r2, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000fb4:	589a      	ldr	r2, [r3, r2]
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	6191      	str	r1, [r2, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000fbc:	589a      	ldr	r2, [r3, r2]
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	61d1      	str	r1, [r2, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000fc4:	589a      	ldr	r2, [r3, r2]
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	6211      	str	r1, [r2, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000fcc:	589b      	ldr	r3, [r3, r2]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 f8d6 	bl	8004180 <HAL_I2C_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 8000fda:	f000 fdd1 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	00061a80 	.word	0x00061a80
 8000fec:	17fff40a 	.word	0x17fff40a
 8000ff0:	00000014 	.word	0x00000014

08000ff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4c2d      	ldr	r4, [pc, #180]	; (80010b0 <MX_TIM1_Init+0xbc>)
 8000ffc:	447c      	add	r4, pc

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001016:	58e3      	ldr	r3, [r4, r3]
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <MX_TIM1_Init+0xb8>)
 800101a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15000;
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <MX_TIM1_Init+0xc0>)
 800101e:	58e3      	ldr	r3, [r4, r3]
 8001020:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001024:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001028:	58e3      	ldr	r3, [r4, r3]
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15000;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001030:	58e3      	ldr	r3, [r4, r3]
 8001032:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_TIM1_Init+0xc0>)
 800103a:	58e3      	ldr	r3, [r4, r3]
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001042:	58e3      	ldr	r3, [r4, r3]
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM1_Init+0xc0>)
 800104a:	58e3      	ldr	r3, [r4, r3]
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001052:	58e3      	ldr	r3, [r4, r3]
 8001054:	4618      	mov	r0, r3
 8001056:	f004 fb99 	bl	800578c <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fd8e 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001072:	58e3      	ldr	r3, [r4, r3]
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fd61 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001080:	f000 fd7e 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_TIM1_Init+0xc0>)
 8001092:	58e3      	ldr	r3, [r4, r3]
 8001094:	4618      	mov	r0, r3
 8001096:	f004 ff35 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80010a0:	f000 fd6e 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	17fff38c 	.word	0x17fff38c
 80010b4:	00000090 	.word	0x00000090

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4c2b      	ldr	r4, [pc, #172]	; (800116c <MX_TIM2_Init+0xb4>)
 80010c0:	447c      	add	r4, pc

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_TIM2_Init+0xb8>)
 80010da:	58e3      	ldr	r3, [r4, r3]
 80010dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_TIM2_Init+0xb8>)
 80010e4:	58e3      	ldr	r3, [r4, r3]
 80010e6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_TIM2_Init+0xb8>)
 80010ee:	58e3      	ldr	r3, [r4, r3]
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_TIM2_Init+0xb8>)
 80010f6:	58e3      	ldr	r3, [r4, r3]
 80010f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_TIM2_Init+0xb8>)
 8001100:	58e3      	ldr	r3, [r4, r3]
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_TIM2_Init+0xb8>)
 8001108:	58e3      	ldr	r3, [r4, r3]
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_TIM2_Init+0xb8>)
 8001110:	58e3      	ldr	r3, [r4, r3]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fb3a 	bl	800578c <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800111e:	f000 fd2f 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_TIM2_Init+0xb8>)
 8001130:	58e3      	ldr	r3, [r4, r3]
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fd02 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800113e:	f000 fd1f 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_TIM2_Init+0xb8>)
 8001150:	58e3      	ldr	r3, [r4, r3]
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fed6 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800115e:	f000 fd0f 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	17fff2c8 	.word	0x17fff2c8
 8001170:	000000a0 	.word	0x000000a0

08001174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_USART1_UART_Init+0x68>)
 800117a:	447b      	add	r3, pc
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 800117e:	589a      	ldr	r2, [r3, r2]
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <MX_USART1_UART_Init+0x64>)
 8001182:	6011      	str	r1, [r2, #0]
  huart1.Init.BaudRate = 9600;
 8001184:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 8001186:	589a      	ldr	r2, [r3, r2]
 8001188:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800118c:	6051      	str	r1, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 8001190:	589a      	ldr	r2, [r3, r2]
 8001192:	2100      	movs	r1, #0
 8001194:	6091      	str	r1, [r2, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 8001198:	589a      	ldr	r2, [r3, r2]
 800119a:	2100      	movs	r1, #0
 800119c:	60d1      	str	r1, [r2, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 80011a0:	589a      	ldr	r2, [r3, r2]
 80011a2:	2100      	movs	r1, #0
 80011a4:	6111      	str	r1, [r2, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 80011a8:	589a      	ldr	r2, [r3, r2]
 80011aa:	210c      	movs	r1, #12
 80011ac:	6151      	str	r1, [r2, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 80011b0:	589a      	ldr	r2, [r3, r2]
 80011b2:	2100      	movs	r1, #0
 80011b4:	6191      	str	r1, [r2, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 80011b8:	589a      	ldr	r2, [r3, r2]
 80011ba:	2100      	movs	r1, #0
 80011bc:	61d1      	str	r1, [r2, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <MX_USART1_UART_Init+0x6c>)
 80011c0:	589b      	ldr	r3, [r3, r2]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 ff0e 	bl	8005fe4 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80011ce:	f000 fcd7 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40013800 	.word	0x40013800
 80011dc:	17fff20e 	.word	0x17fff20e
 80011e0:	00000064 	.word	0x00000064

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_DMA_Init+0x58>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_DMA_Init+0x58>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6153      	str	r3, [r2, #20]
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_DMA_Init+0x58>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200b      	movs	r0, #11
 8001208:	f002 f8b7 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 f8d0 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200e      	movs	r0, #14
 8001218:	f002 f8af 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800121c:	200e      	movs	r0, #14
 800121e:	f002 f8c8 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	200f      	movs	r0, #15
 8001228:	f002 f8a7 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800122c:	200f      	movs	r0, #15
 800122e:	f002 f8c0 	bl	80033b2 <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <MX_GPIO_Init+0x13c>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a48      	ldr	r2, [pc, #288]	; (800137c <MX_GPIO_Init+0x13c>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <MX_GPIO_Init+0x13c>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <MX_GPIO_Init+0x13c>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a42      	ldr	r2, [pc, #264]	; (800137c <MX_GPIO_Init+0x13c>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b40      	ldr	r3, [pc, #256]	; (800137c <MX_GPIO_Init+0x13c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <MX_GPIO_Init+0x13c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a3c      	ldr	r2, [pc, #240]	; (800137c <MX_GPIO_Init+0x13c>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b3a      	ldr	r3, [pc, #232]	; (800137c <MX_GPIO_Init+0x13c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_Pin|PIN_POWER_DISPLAY_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80012a2:	4837      	ldr	r0, [pc, #220]	; (8001380 <MX_GPIO_Init+0x140>)
 80012a4:	f002 ff23 	bl	80040ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_M0_Pin|PIN_M1_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2160      	movs	r1, #96	; 0x60
 80012ac:	4835      	ldr	r0, [pc, #212]	; (8001384 <MX_GPIO_Init+0x144>)
 80012ae:	f002 ff1e 	bl	80040ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_LED_Pin PIN_POWER_DISPLAY_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin|PIN_POWER_DISPLAY_Pin;
 80012b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	482d      	ldr	r0, [pc, #180]	; (8001380 <MX_GPIO_Init+0x140>)
 80012cc:	f002 fd72 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_M0_Pin PIN_M1_Pin */
  GPIO_InitStruct.Pin = PIN_M0_Pin|PIN_M1_Pin;
 80012d0:	2360      	movs	r3, #96	; 0x60
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2302      	movs	r3, #2
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <MX_GPIO_Init+0x144>)
 80012e8:	f002 fd64 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_AUX_Pin */
  GPIO_InitStruct.Pin = PIN_AUX_Pin;
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_GPIO_Init+0x148>)
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIN_AUX_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	4821      	ldr	r0, [pc, #132]	; (8001384 <MX_GPIO_Init+0x144>)
 8001300:	f002 fd58 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_BUTTON_10_Pin PIN_BUTTON_11_Pin PIN_BUTTON_12_Pin PIN_BUTTON_13_Pin
                           PIN_BUTTON_14_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_10_Pin|PIN_BUTTON_11_Pin|PIN_BUTTON_12_Pin|PIN_BUTTON_13_Pin
 8001304:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001308:	613b      	str	r3, [r7, #16]
                          |PIN_BUTTON_14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_GPIO_Init+0x14c>)
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	481d      	ldr	r0, [pc, #116]	; (8001390 <MX_GPIO_Init+0x150>)
 800131a:	f002 fd4b 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_BUTTON_DEMOLITION_Pin PIN_BUTTON_TEST_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_DEMOLITION_Pin|PIN_BUTTON_TEST_Pin;
 800131e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_GPIO_Init+0x154>)
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4817      	ldr	r0, [pc, #92]	; (8001390 <MX_GPIO_Init+0x150>)
 8001334:	f002 fd3e 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_BUTTON_ARM_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_ARM_Pin;
 8001338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_GPIO_Init+0x14c>)
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIN_BUTTON_ARM_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_GPIO_Init+0x144>)
 800134e:	f002 fd31 	bl	8003db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2017      	movs	r0, #23
 8001358:	f002 f80f 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800135c:	2017      	movs	r0, #23
 800135e:	f002 f828 	bl	80033b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2028      	movs	r0, #40	; 0x28
 8001368:	f002 f807 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800136c:	2028      	movs	r0, #40	; 0x28
 800136e:	f002 f820 	bl	80033b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001372:	bf00      	nop
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	40011000 	.word	0x40011000
 8001384:	40010800 	.word	0x40010800
 8001388:	10110000 	.word	0x10110000
 800138c:	10310000 	.word	0x10310000
 8001390:	40010c00 	.word	0x40010c00
 8001394:	10210000 	.word	0x10210000

08001398 <startFsm>:
/* USER CODE BEGIN 4 */
//=========================================================================================================================================//
//=================================================startFsm=================================================================//
//=========================================================================================================================================//

void startFsm(void) {
 8001398:	b598      	push	{r3, r4, r7, lr}
 800139a:	af00      	add	r7, sp, #0
 800139c:	4c42      	ldr	r4, [pc, #264]	; (80014a8 <startFsm+0x110>)
 800139e:	447c      	add	r4, pc
#ifdef Debug
    printf("stnvartstart: \n"); // Вывод отладочной информации в режиме отладки
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <startFsm+0x114>)
 80013a2:	447b      	add	r3, pc
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 fefb 	bl	80071a0 <puts>
#endif
    setInterruptState(UsaNoExtern); // Установка состояния прерывания
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fa96 	bl	80008dc <setInterruptState>
    HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET); // Сброс состояния пина LED
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	483b      	ldr	r0, [pc, #236]	; (80014a4 <startFsm+0x10c>)
 80013b8:	f002 fe99 	bl	80040ee <HAL_GPIO_WritePin>
    if(e32PinSetup(sleepMode)) // Инициализация E32 в режиме сна
 80013bc:	2003      	movs	r0, #3
 80013be:	f7ff f99f 	bl	8000700 <e32PinSetup>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <startFsm+0x36>
        handlerError(e32FunctionInit); // Обработка ошибки инициализации E32 в режиме сна
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fb55 	bl	8000a78 <handlerError>
    HAL_Delay(1000); // Задержка 1000 миллисекунд
 80013ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d2:	f001 fac1 	bl	8002958 <HAL_Delay>
    HAL_UART_Transmit_DMA(&huart1, &txByteSetup0, sizeof(txByteSetup0)); // Отправка установочных байтов по UART в режиме DMA (Direct Memory Access)
 80013d6:	2206      	movs	r2, #6
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <startFsm+0x118>)
 80013da:	58e3      	ldr	r3, [r4, r3]
 80013dc:	4619      	mov	r1, r3
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <startFsm+0x11c>)
 80013e0:	58e3      	ldr	r3, [r4, r3]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fe4e 	bl	8006084 <HAL_UART_Transmit_DMA>
    HAL_Delay(500); // Задержка 500 миллисекунд
 80013e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ec:	f001 fab4 	bl	8002958 <HAL_Delay>
    HAL_UART_Transmit_DMA(&huart1, &txByteSetup1, sizeof(txByteSetup1)); // Отправка проверки исправности e32 по UART в режиме DMA
 80013f0:	2203      	movs	r2, #3
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <startFsm+0x120>)
 80013f4:	58e3      	ldr	r3, [r4, r3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <startFsm+0x11c>)
 80013fa:	58e3      	ldr	r3, [r4, r3]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 fe41 	bl	8006084 <HAL_UART_Transmit_DMA>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveBuffer, rxByteSize); // Перевод UART в режим приема с использованием DMA
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <startFsm+0x124>)
 8001404:	58e3      	ldr	r3, [r4, r3]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <startFsm+0x128>)
 800140e:	58e3      	ldr	r3, [r4, r3]
 8001410:	4619      	mov	r1, r3
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <startFsm+0x11c>)
 8001414:	58e3      	ldr	r3, [r4, r3]
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fea6 	bl	8006168 <HAL_UARTEx_ReceiveToIdle_DMA>

    if(checkRxStartMessage(txByteSetup0, rxByteSize)) // Проверка корректности работы е32
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <startFsm+0x124>)
 800141e:	58e3      	ldr	r3, [r4, r3]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <startFsm+0x118>)
 8001426:	58e3      	ldr	r3, [r4, r3]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff facd 	bl	80009c8 <checkRxStartMessage>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <startFsm+0xa2>
        handlerError(startE32Error); // Обработка ошибки стартового сообщения E32
 8001434:	2002      	movs	r0, #2
 8001436:	f7ff fb1f 	bl	8000a78 <handlerError>
    rxByteSize = sizeof(txByteDemolition); // Установка нового размера буфера приема для E32
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <startFsm+0x124>)
 800143c:	58e3      	ldr	r3, [r4, r3]
 800143e:	2206      	movs	r2, #6
 8001440:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(PIN_POWER_DISPLAY_GPIO_Port, PIN_POWER_DISPLAY_Pin, SET); // Установка состояния пина питания дисплея
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <startFsm+0x10c>)
 800144a:	f002 fe50 	bl	80040ee <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Задержка 1000 миллисекунд
 800144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001452:	f001 fa81 	bl	8002958 <HAL_Delay>
    SSD1306_Init(); // Инициализация дисплея SSD1306
 8001456:	f000 fb99 	bl	8001b8c <SSD1306_Init>
    if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) { // Проверка доступности дисплея по I2C
 800145a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800145e:	2201      	movs	r2, #1
 8001460:	2178      	movs	r1, #120	; 0x78
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <startFsm+0x12c>)
 8001464:	5820      	ldr	r0, [r4, r0]
 8001466:	f003 f8cd 	bl	8004604 <HAL_I2C_IsDeviceReady>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <startFsm+0xe0>
        /* Return false */
        handlerError(startDisplayError); // Обработка ошибки инициализации дисплея
 8001470:	2004      	movs	r0, #4
 8001472:	f7ff fb01 	bl	8000a78 <handlerError>
        return 0;
 8001476:	e013      	b.n	80014a0 <startFsm+0x108>
    }
    outDispl = outDisplayUser; // Установка функции вывода на дисплей
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <startFsm+0x130>)
 800147a:	58e3      	ldr	r3, [r4, r3]
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <startFsm+0x134>)
 800147e:	58a2      	ldr	r2, [r4, r2]
 8001480:	601a      	str	r2, [r3, #0]
    outBufferDisplay(); // Обработка буфера дисплея
 8001482:	f7ff f8c7 	bl	8000614 <outBufferDisplay>
    e32PinSetup(powerSavingMode); // Инициализация пинов E32 в режим энергосбережения
 8001486:	2002      	movs	r0, #2
 8001488:	f7ff f93a 	bl	8000700 <e32PinSetup>
    setInterruptState(UsaExtern); // Установка состояния прерывания
 800148c:	2003      	movs	r0, #3
 800148e:	f7ff fa25 	bl	80008dc <setInterruptState>
    nextState = wait; // следующее состояние автомата
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <startFsm+0x138>)
 8001494:	58e3      	ldr	r3, [r4, r3]
 8001496:	220b      	movs	r2, #11
 8001498:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1); // Задержка 1 миллисекунда
 800149a:	2001      	movs	r0, #1
 800149c:	f001 fa5c 	bl	8002958 <HAL_Delay>
}
 80014a0:	bd98      	pop	{r3, r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40011000 	.word	0x40011000
 80014a8:	17ffefea 	.word	0x17ffefea
 80014ac:	00007352 	.word	0x00007352
 80014b0:	000000a8 	.word	0x000000a8
 80014b4:	00000064 	.word	0x00000064
 80014b8:	00000048 	.word	0x00000048
 80014bc:	000000bc 	.word	0x000000bc
 80014c0:	000000c0 	.word	0x000000c0
 80014c4:	00000014 	.word	0x00000014
 80014c8:	00000070 	.word	0x00000070
 80014cc:	000000c4 	.word	0x000000c4
 80014d0:	0000005c 	.word	0x0000005c

080014d4 <outTxMessage>:
 *
 * Эта функция управляет передачей сообщений в модуль передатчика.
 * Она настраивает модуль E32 для передачи и отправляет соответствующее сообщение.
 * Функция также обновляет дисплей и обрабатывает ошибки.
 */
void outTxMessage(void) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4c59      	ldr	r4, [pc, #356]	; (8001640 <outTxMessage+0x16c>)
 80014dc:	447c      	add	r4, pc
    //HAL_Delay(NUMBER_NOD * 2000);
#ifdef Debug
    printf(" outTxMessage.\n"); // Отладочный вывод
 80014de:	4b59      	ldr	r3, [pc, #356]	; (8001644 <outTxMessage+0x170>)
 80014e0:	447b      	add	r3, pc
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fe5c 	bl	80071a0 <puts>
#endif
    switch (txStatus) {
 80014e8:	4b57      	ldr	r3, [pc, #348]	; (8001648 <outTxMessage+0x174>)
 80014ea:	58e3      	ldr	r3, [r4, r3]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d007      	beq.n	8001502 <outTxMessage+0x2e>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f300 808a 	bgt.w	800160c <outTxMessage+0x138>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d033      	beq.n	8001564 <outTxMessage+0x90>
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d009      	beq.n	8001514 <outTxMessage+0x40>
 8001500:	e084      	b.n	800160c <outTxMessage+0x138>
    case txNoTx: // Ошибка логики программы
#ifdef Debug
        printf("ERROR logic outTxMessage.\n"); // Отладочный вывод
 8001502:	4b52      	ldr	r3, [pc, #328]	; (800164c <outTxMessage+0x178>)
 8001504:	447b      	add	r3, pc
 8001506:	4618      	mov	r0, r3
 8001508:	f005 fe4a 	bl	80071a0 <puts>
#endif
        handlerError(txLogicError); // Обработчик ошибок
 800150c:	2005      	movs	r0, #5
 800150e:	f7ff fab3 	bl	8000a78 <handlerError>
        break;
 8001512:	e084      	b.n	800161e <outTxMessage+0x14a>
    case txTest: // Было прерывание кнопки тест
        if (flagButtonTest == RESET) {
 8001514:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <outTxMessage+0x17c>)
 8001516:	58e3      	ldr	r3, [r4, r3]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <outTxMessage+0x5a>
#ifdef Debug
            printf("ERROR outTxMessage.\n"); // Ошибка вызова функции
 800151e:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <outTxMessage+0x180>)
 8001520:	447b      	add	r3, pc
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fe3c 	bl	80071a0 <puts>
#endif
            handlerError(txIntruptError); // Обработчик ошибок
 8001528:	2006      	movs	r0, #6
 800152a:	f7ff faa5 	bl	8000a78 <handlerError>
        }
        e32PinSetup(wakeUpMode); // Настройка модуля E32 в режим пробуждения приемников
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff f8e6 	bl	8000700 <e32PinSetup>
        HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f001 fa0f 	bl	8002958 <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart1, &txByteTest, sizeof(txByteTest)); // Отправка тестового сообщения
 800153a:	2206      	movs	r2, #6
 800153c:	4b46      	ldr	r3, [pc, #280]	; (8001658 <outTxMessage+0x184>)
 800153e:	58e3      	ldr	r3, [r4, r3]
 8001540:	4619      	mov	r1, r3
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <outTxMessage+0x188>)
 8001544:	58e3      	ldr	r3, [r4, r3]
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fd9c 	bl	8006084 <HAL_UART_Transmit_DMA>
        HAL_Delay(100);
 800154c:	2064      	movs	r0, #100	; 0x64
 800154e:	f001 fa03 	bl	8002958 <HAL_Delay>
        bufferDisplay.timeTxWake = (TIME_TX_DEMOLITION_WEAKE) + ((TIME_TX_TEST_1_WEAKE) * (NUMBER_EXPLODER)); // Установка времени ожидания для дисплея режима тест
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <outTxMessage+0x18c>)
 8001554:	58e3      	ldr	r3, [r4, r3]
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	77da      	strb	r2, [r3, #31]
        txStatus = txNoTx; // Сброс статуса передачи
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <outTxMessage+0x174>)
 800155c:	58e3      	ldr	r3, [r4, r3]
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
        break;
 8001562:	e05c      	b.n	800161e <outTxMessage+0x14a>
    case txDemolition: // Было прерывание кнопки демолитион
        if (flagButtonDemolition == RESET) {
 8001564:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <outTxMessage+0x190>)
 8001566:	58e3      	ldr	r3, [r4, r3]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <outTxMessage+0xaa>
#ifdef Debug
            printf("ERROR outTxMessage.\n"); // Отладочный вывод
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <outTxMessage+0x194>)
 8001570:	447b      	add	r3, pc
 8001572:	4618      	mov	r0, r3
 8001574:	f005 fe14 	bl	80071a0 <puts>
#endif
            handlerError(txIntruptError); // Обработчик ошибок
 8001578:	2006      	movs	r0, #6
 800157a:	f7ff fa7d 	bl	8000a78 <handlerError>
        }

        if (bufferDisplay.bfArm == 0) { // Если не нажата кнопка АРМ - выход из функции
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <outTxMessage+0x18c>)
 8001580:	58e3      	ldr	r3, [r4, r3]
 8001582:	7f1b      	ldrb	r3, [r3, #28]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d057      	beq.n	8001638 <outTxMessage+0x164>
            return;
        }

        e32PinSetup(wakeUpMode); // Настройка модуля E32 в режим пробуждения приемников
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff f8b9 	bl	8000700 <e32PinSetup>
        HAL_Delay(10);
 800158e:	200a      	movs	r0, #10
 8001590:	f001 f9e2 	bl	8002958 <HAL_Delay>
        txByteDemolition[ADRES_NUMBER_BYTE_DEMOLITION_ON_EXPLODER] = 0; // Сбрасываем байты адресов выбранных приемников.
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <outTxMessage+0x198>)
 8001596:	58e3      	ldr	r3, [r4, r3]
 8001598:	2200      	movs	r2, #0
 800159a:	711a      	strb	r2, [r3, #4]
        for (uint8_t i = 0; i < NUMBER_EXPLODER; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	e01c      	b.n	80015dc <outTxMessage+0x108>
            int8_t x = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	71bb      	strb	r3, [r7, #6]
            if (bufferDisplay.bfDetonator[i] == 1) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <outTxMessage+0x18c>)
 80015aa:	58a2      	ldr	r2, [r4, r2]
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d111      	bne.n	80015d6 <outTxMessage+0x102>
                x = x << (i + 1); // Битовыми сдвигами формируем байт из адресов приемников
 80015b2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	3301      	adds	r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	71bb      	strb	r3, [r7, #6]
                txByteDemolition[ADRES_NUMBER_BYTE_DEMOLITION_ON_EXPLODER] = txByteDemolition[ADRES_NUMBER_BYTE_DEMOLITION_ON_EXPLODER] | x; // Формирование байта, указывающего на подключенные взрыватели
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <outTxMessage+0x198>)
 80015c2:	58e3      	ldr	r3, [r4, r3]
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	b25a      	sxtb	r2, r3
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <outTxMessage+0x198>)
 80015d2:	58e3      	ldr	r3, [r4, r3]
 80015d4:	711a      	strb	r2, [r3, #4]
        for (uint8_t i = 0; i < NUMBER_EXPLODER; i++) {
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	3301      	adds	r3, #1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d9df      	bls.n	80015a2 <outTxMessage+0xce>
            }
        }
        HAL_UART_Transmit_DMA(&huart1, &txByteDemolition, sizeof(txByteDemolition)); // Отправка сообщения о взрыве
 80015e2:	2206      	movs	r2, #6
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <outTxMessage+0x198>)
 80015e6:	58e3      	ldr	r3, [r4, r3]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <outTxMessage+0x188>)
 80015ec:	58e3      	ldr	r3, [r4, r3]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fd48 	bl	8006084 <HAL_UART_Transmit_DMA>
        HAL_Delay(100);
 80015f4:	2064      	movs	r0, #100	; 0x64
 80015f6:	f001 f9af 	bl	8002958 <HAL_Delay>
        bufferDisplay.timeTxWake = TIME_TX_DEMOLITION_WEAKE; // Установка времени ожидания для дисплея режима взрыва
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <outTxMessage+0x18c>)
 80015fc:	58e3      	ldr	r3, [r4, r3]
 80015fe:	2206      	movs	r2, #6
 8001600:	77da      	strb	r2, [r3, #31]
        txStatus = txNoTx; // Сброс статуса передачи
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <outTxMessage+0x174>)
 8001604:	58e3      	ldr	r3, [r4, r3]
 8001606:	2202      	movs	r2, #2
 8001608:	701a      	strb	r2, [r3, #0]
        break;
 800160a:	e008      	b.n	800161e <outTxMessage+0x14a>
    default: // Ошибка логики программы
        handlerError(txLogicError); // Обработчик ошибок
 800160c:	2005      	movs	r0, #5
 800160e:	f7ff fa33 	bl	8000a78 <handlerError>
#ifdef Debug
        printf("ERROR outTxMessage.\n"); // Отладочный вывод
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <outTxMessage+0x19c>)
 8001614:	447b      	add	r3, pc
 8001616:	4618      	mov	r0, r3
 8001618:	f005 fdc2 	bl	80071a0 <puts>
#endif
        break;
 800161c:	bf00      	nop
    }

    outDispl = outDisplayWakeTx; // Установка указателя на функцию для работы дисплея в режиме ожидания
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <outTxMessage+0x1a0>)
 8001620:	58e3      	ldr	r3, [r4, r3]
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <outTxMessage+0x1a4>)
 8001624:	58a2      	ldr	r2, [r4, r2]
 8001626:	601a      	str	r2, [r3, #0]
    nextState = waitTx; // Следующее состояние конечного автомата
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <outTxMessage+0x1a8>)
 800162a:	58e3      	ldr	r3, [r4, r3]
 800162c:	2209      	movs	r2, #9
 800162e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);
 8001630:	2001      	movs	r0, #1
 8001632:	f001 f991 	bl	8002958 <HAL_Delay>
 8001636:	e000      	b.n	800163a <outTxMessage+0x166>
            return;
 8001638:	bf00      	nop
}
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	17ffeeac 	.word	0x17ffeeac
 8001644:	00007224 	.word	0x00007224
 8001648:	00000078 	.word	0x00000078
 800164c:	00007210 	.word	0x00007210
 8001650:	000000b8 	.word	0x000000b8
 8001654:	00007210 	.word	0x00007210
 8001658:	0000007c 	.word	0x0000007c
 800165c:	00000064 	.word	0x00000064
 8001660:	00000088 	.word	0x00000088
 8001664:	0000003c 	.word	0x0000003c
 8001668:	000071c0 	.word	0x000071c0
 800166c:	000000cc 	.word	0x000000cc
 8001670:	0000711c 	.word	0x0000711c
 8001674:	00000070 	.word	0x00000070
 8001678:	00000030 	.word	0x00000030
 800167c:	0000005c 	.word	0x0000005c

08001680 <outDisplay>:

//=============================================================================================================================//
//=====================================================outDisplay==============================================================//
//=============================================================================================================================//
//В этой инструкции по указателю вызывается нужная функция обновление дисплея.
void outDisplay(void){
 8001680:	b598      	push	{r3, r4, r7, lr}
 8001682:	af00      	add	r7, sp, #0
 8001684:	4c05      	ldr	r4, [pc, #20]	; (800169c <outDisplay+0x1c>)
 8001686:	447c      	add	r4, pc
	HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 f965 	bl	8002958 <HAL_Delay>
	outDispl();
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <outDisplay+0x20>)
 8001690:	58e3      	ldr	r3, [r4, r3]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4798      	blx	r3
	}
 8001696:	bf00      	nop
 8001698:	bd98      	pop	{r3, r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	17ffed02 	.word	0x17ffed02
 80016a0:	00000070 	.word	0x00000070

080016a4 <readPower>:
 *
 * Эта функция запускает измерение напряжения питания с помощью АЦП
 * и обрабатывает результаты. В случае обнаружения ошибки в напряжении,
 * функция выводит сообщение об ошибке.
 */
void readPower() {
 80016a4:	b598      	push	{r3, r4, r7, lr}
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4c13      	ldr	r4, [pc, #76]	; (80016f8 <readPower+0x54>)
 80016aa:	447c      	add	r4, pc
#ifdef Debug
    printf("readPower().\n"); // Отладочный вывод
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <readPower+0x58>)
 80016ae:	447b      	add	r3, pc
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 fd75 	bl	80071a0 <puts>
#endif
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM); // Запуск измерения напряжения
 80016b6:	2202      	movs	r2, #2
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <readPower+0x5c>)
 80016ba:	58e3      	ldr	r3, [r4, r3]
 80016bc:	4619      	mov	r1, r3
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <readPower+0x60>)
 80016c0:	58e3      	ldr	r3, [r4, r3]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fa64 	bl	8002b90 <HAL_ADC_Start_DMA>
    HAL_Delay(50);  // Задержка перед возвратом результата
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f001 f945 	bl	8002958 <HAL_Delay>
    if (adcVoltage[0] > 50 || adcVoltage[0] < 10) {
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <readPower+0x64>)
 80016d0:	58e3      	ldr	r3, [r4, r3]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b32      	cmp	r3, #50	; 0x32
 80016d6:	d804      	bhi.n	80016e2 <readPower+0x3e>
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <readPower+0x64>)
 80016da:	58e3      	ldr	r3, [r4, r3]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b09      	cmp	r3, #9
 80016e0:	d807      	bhi.n	80016f2 <readPower+0x4e>
#ifdef Debug
        printf("ErrorReadVolt.\n"); // Отладочный вывод
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <readPower+0x68>)
 80016e4:	447b      	add	r3, pc
 80016e6:	4618      	mov	r0, r3
 80016e8:	f005 fd5a 	bl	80071a0 <puts>
#endif
        handlerError(readVoltageError);
 80016ec:	2007      	movs	r0, #7
 80016ee:	f7ff f9c3 	bl	8000a78 <handlerError>
    }
}
 80016f2:	bf00      	nop
 80016f4:	bd98      	pop	{r3, r4, r7, pc}
 80016f6:	bf00      	nop
 80016f8:	17ffecde 	.word	0x17ffecde
 80016fc:	00007096 	.word	0x00007096
 8001700:	000000d0 	.word	0x000000d0
 8001704:	00000058 	.word	0x00000058
 8001708:	00000094 	.word	0x00000094
 800170c:	00007070 	.word	0x00007070

08001710 <waitLong>:
 *
 * Эта функция устанавливает длинную задержку с использованием таймера
 * и переводит микроконтроллер в режим сна. Микроконтроллер просыпается
 * по прерыванием или по истечению таймера
 */
void waitLong(void) {
 8001710:	b598      	push	{r3, r4, r7, lr}
 8001712:	af00      	add	r7, sp, #0
 8001714:	4c0e      	ldr	r4, [pc, #56]	; (8001750 <waitLong+0x40>)
 8001716:	447c      	add	r4, pc
#ifdef Debug
    printf("waitLong.\n"); // Отладочный вывод
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <waitLong+0x44>)
 800171a:	447b      	add	r3, pc
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fd3f 	bl	80071a0 <puts>
#endif
    HAL_TIM_Base_Start_IT(&htim1); // Запуск таймера для задержки
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <waitLong+0x48>)
 8001724:	58e3      	ldr	r3, [r4, r3]
 8001726:	4618      	mov	r0, r3
 8001728:	f004 f880 	bl	800582c <HAL_TIM_Base_Start_IT>
    HAL_SuspendTick(); // Остановка системного таймера
 800172c:	f001 f93c 	bl	80029a8 <HAL_SuspendTick>
    HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // Перевод в режим сна
 8001730:	2101      	movs	r1, #1
 8001732:	2001      	movs	r0, #1
 8001734:	f003 faf6 	bl	8004d24 <HAL_PWR_EnterSLEEPMode>
    HAL_ResumeTick(); // Возобновление системного таймера после выхода из сна
 8001738:	f001 f944 	bl	80029c4 <HAL_ResumeTick>
    HAL_TIM_Base_Stop_IT(&htim1); // Остановка таймера
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <waitLong+0x48>)
 800173e:	58e3      	ldr	r3, [r4, r3]
 8001740:	4618      	mov	r0, r3
 8001742:	f004 f8c5 	bl	80058d0 <HAL_TIM_Base_Stop_IT>
    HAL_Delay(1); // Задержка для стабилизации
 8001746:	2001      	movs	r0, #1
 8001748:	f001 f906 	bl	8002958 <HAL_Delay>
}
 800174c:	bf00      	nop
 800174e:	bd98      	pop	{r3, r4, r7, pc}
 8001750:	17ffec72 	.word	0x17ffec72
 8001754:	0000704a 	.word	0x0000704a
 8001758:	00000090 	.word	0x00000090

0800175c <readInterrupt>:
//============================================================================================================================//
//================================================readInterrupt===============================================================//
//============================================================================================================================//
//Функция читает прерывания и возвращает следующую стадию конечного автомата
uint32_t readInterrupt(void){
 800175c:	b598      	push	{r3, r4, r7, lr}
 800175e:	af00      	add	r7, sp, #0
 8001760:	4c04      	ldr	r4, [pc, #16]	; (8001774 <readInterrupt+0x18>)
 8001762:	447c      	add	r4, pc

	HAL_Delay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f001 f8f7 	bl	8002958 <HAL_Delay>
	return nextState;
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <readInterrupt+0x1c>)
 800176c:	58e3      	ldr	r3, [r4, r3]
 800176e:	781b      	ldrb	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd98      	pop	{r3, r4, r7, pc}
 8001774:	17ffec26 	.word	0x17ffec26
 8001778:	0000005c 	.word	0x0000005c

0800177c <waitForever>:
 * Эта функция устанавливает микроконтроллер в вечный режим ожидания.
 * В это состояние входит выключение дисплея, остановка системного таймера
 * и перевод в режим Stop Mode для минимизации энергопотребления.
 * При прерываниях микроконтроллер возвращается из сна.
 */
void waitForever(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
#ifdef Debug
    printf("waitForever.\n"); // Отладочный вывод
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <waitForever+0x58>)
 8001782:	447b      	add	r3, pc
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fd0b 	bl	80071a0 <puts>
#endif
    SSD1306_Clear(); // Очистка дисплея
 800178a:	f000 fc58 	bl	800203e <SSD1306_Clear>
    //ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAE); // Выключение дисплея (отладка, разкоментрировать)
    HAL_GPIO_WritePin(PIN_POWER_DISPLAY_GPIO_Port, PIN_POWER_DISPLAY_Pin, RESET);// Выключение дисплея
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <waitForever+0x54>)
 8001796:	f002 fcaa 	bl	80040ee <HAL_GPIO_WritePin>
    HAL_SuspendTick(); // Остановка системного таймера
 800179a:	f001 f905 	bl	80029a8 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // Перевод в режим Stop Mode
 800179e:	2101      	movs	r1, #1
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 fadb 	bl	8004d5c <HAL_PWR_EnterSTOPMode>
    HAL_ResumeTick(); // Возобновление системного таймера
 80017a6:	f001 f90d 	bl	80029c4 <HAL_ResumeTick>
    HAL_GPIO_WritePin(PIN_POWER_DISPLAY_GPIO_Port, PIN_POWER_DISPLAY_Pin, SET); // Включение дисплея
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <waitForever+0x54>)
 80017b2:	f002 fc9c 	bl	80040ee <HAL_GPIO_WritePin>
    ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAF); // Включение дисплея
 80017b6:	22af      	movs	r2, #175	; 0xaf
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	; 0x78
 80017bc:	f000 fcc8 	bl	8002150 <ssd1306_I2C_Write>
    SSD1306_Init();
 80017c0:	f000 f9e4 	bl	8001b8c <SSD1306_Init>
    HAL_Delay(1000); // Задержка для стабилизации (отладачная, поставить меньше)
 80017c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c8:	f001 f8c6 	bl	8002958 <HAL_Delay>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40011000 	.word	0x40011000
 80017d4:	00006fee 	.word	0x00006fee

080017d8 <waitLongTx>:
 *
 * Эта функция реализует ожидание в режиме передачи, учитывая время передачи и ожидания.
 * В зависимости от времени ожидания управляется режим работы модуля E32 и системного таймера.
 * По завершении ожидания микроконтроллер переходит в нормальному режиму работы.
 */
void waitLongTx(void) {
 80017d8:	b598      	push	{r3, r4, r7, lr}
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4c34      	ldr	r4, [pc, #208]	; (80018b0 <waitLongTx+0xd8>)
 80017de:	447c      	add	r4, pc

#ifdef Debug
    printf("waitLongTx\n"); // Отладочный вывод
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <waitLongTx+0xdc>)
 80017e2:	447b      	add	r3, pc
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fcdb 	bl	80071a0 <puts>
#endif

    if (countButtonDemolitionClock < 6) { // Проверка времени передачи и ожидания, первые 6 секунд, ме должен не спать
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <waitLongTx+0xe0>)
 80017ec:	58e3      	ldr	r3, [r4, r3]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d817      	bhi.n	8001824 <waitLongTx+0x4c>
        HAL_Delay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f001 f8af 	bl	8002958 <HAL_Delay>
        HAL_Delay(1000);
 80017fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017fe:	f001 f8ab 	bl	8002958 <HAL_Delay>
        bufferDisplay.timeTxWake--; // Уменьшение времени ожидания
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <waitLongTx+0xe4>)
 8001804:	58e3      	ldr	r3, [r4, r3]
 8001806:	7fdb      	ldrb	r3, [r3, #31]
 8001808:	3b01      	subs	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <waitLongTx+0xe4>)
 800180e:	58e3      	ldr	r3, [r4, r3]
 8001810:	77da      	strb	r2, [r3, #31]
        countButtonDemolitionClock++;
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <waitLongTx+0xe0>)
 8001814:	58e3      	ldr	r3, [r4, r3]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <waitLongTx+0xe0>)
 800181e:	58e3      	ldr	r3, [r4, r3]
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e032      	b.n	800188a <waitLongTx+0xb2>
    } else {
        e32PinSetup(normalMode); // Перевод модуля E32 в нормальный режим
 8001824:	2000      	movs	r0, #0
 8001826:	f7fe ff6b 	bl	8000700 <e32PinSetup>
        HAL_TIM_Base_Start_IT(&htim2); // Запуск таймера 2 (на одну секунду)
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <waitLongTx+0xe8>)
 800182c:	58e3      	ldr	r3, [r4, r3]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fffc 	bl	800582c <HAL_TIM_Base_Start_IT>
        HAL_SuspendTick(); // Остановка системного таймера
 8001834:	f001 f8b8 	bl	80029a8 <HAL_SuspendTick>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // Вход в режим SLEEP
 8001838:	2101      	movs	r1, #1
 800183a:	2001      	movs	r0, #1
 800183c:	f003 fa72 	bl	8004d24 <HAL_PWR_EnterSLEEPMode>
        HAL_ResumeTick(); // Возобновление системного таймера
 8001840:	f001 f8c0 	bl	80029c4 <HAL_ResumeTick>
#ifdef Debug
        printf("HAL_PWR_EnterSLEEPMode\n"); // Отладочный вывод
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <waitLongTx+0xec>)
 8001846:	447b      	add	r3, pc
 8001848:	4618      	mov	r0, r3
 800184a:	f005 fca9 	bl	80071a0 <puts>
#endif
        if (flagPeriodic2 == SET) {
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <waitLongTx+0xf0>)
 8001850:	58e3      	ldr	r3, [r4, r3]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d118      	bne.n	800188a <waitLongTx+0xb2>
            HAL_TIM_Base_Stop_IT(&htim2); // Остановка таймера
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <waitLongTx+0xe8>)
 800185a:	58e3      	ldr	r3, [r4, r3]
 800185c:	4618      	mov	r0, r3
 800185e:	f004 f837 	bl	80058d0 <HAL_TIM_Base_Stop_IT>
            bufferDisplay.timeTxWake--;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <waitLongTx+0xe4>)
 8001864:	58e3      	ldr	r3, [r4, r3]
 8001866:	7fdb      	ldrb	r3, [r3, #31]
 8001868:	3b01      	subs	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <waitLongTx+0xe4>)
 800186e:	58e3      	ldr	r3, [r4, r3]
 8001870:	77da      	strb	r2, [r3, #31]
            countButtonDemolitionClock++;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <waitLongTx+0xe0>)
 8001874:	58e3      	ldr	r3, [r4, r3]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <waitLongTx+0xe0>)
 800187e:	58e3      	ldr	r3, [r4, r3]
 8001880:	701a      	strb	r2, [r3, #0]
            flagPeriodic2 = RESET;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <waitLongTx+0xf0>)
 8001884:	58e3      	ldr	r3, [r4, r3]
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
        }
    }
    if (bufferDisplay.timeTxWake < 1) {
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <waitLongTx+0xe4>)
 800188c:	58e3      	ldr	r3, [r4, r3]
 800188e:	7fdb      	ldrb	r3, [r3, #31]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10b      	bne.n	80018ac <waitLongTx+0xd4>
        e32PinSetup(sleepMode); // Перевод модуля E32 в режим сна
 8001894:	2003      	movs	r0, #3
 8001896:	f7fe ff33 	bl	8000700 <e32PinSetup>
        nextState = wait; // Установка следующего состояния
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <waitLongTx+0xf4>)
 800189c:	58e3      	ldr	r3, [r4, r3]
 800189e:	220b      	movs	r2, #11
 80018a0:	701a      	strb	r2, [r3, #0]
        outDispl = outDisplayUser; // Установка указателя на функцию вывода на дисплей пользователя
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <waitLongTx+0xf8>)
 80018a4:	58e3      	ldr	r3, [r4, r3]
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <waitLongTx+0xfc>)
 80018a8:	58a2      	ldr	r2, [r4, r2]
 80018aa:	601a      	str	r2, [r3, #0]
    }

}
 80018ac:	bf00      	nop
 80018ae:	bd98      	pop	{r3, r4, r7, pc}
 80018b0:	17ffebaa 	.word	0x17ffebaa
 80018b4:	00006f9e 	.word	0x00006f9e
 80018b8:	00000044 	.word	0x00000044
 80018bc:	00000088 	.word	0x00000088
 80018c0:	000000a0 	.word	0x000000a0
 80018c4:	00006f46 	.word	0x00006f46
 80018c8:	00000020 	.word	0x00000020
 80018cc:	0000005c 	.word	0x0000005c
 80018d0:	00000070 	.word	0x00000070
 80018d4:	000000c4 	.word	0x000000c4

080018d8 <handlerRxMessage>:
//============================================================================================================================//
//=================================================handlerRxMessage===========================================================//
//============================================================================================================================//
//Проверяет сообщение, возвращает следующее состояние
uint32_t handlerRxMessage(void){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <handlerRxMessage+0x20>)
 80018de:	447b      	add	r3, pc
	return cheсkRxMessage(rxByteTest, rxByteLog, ADRES_NUMBER_BYTE_EXPLODER);
 80018e0:	2203      	movs	r2, #3
 80018e2:	4906      	ldr	r1, [pc, #24]	; (80018fc <handlerRxMessage+0x24>)
 80018e4:	5859      	ldr	r1, [r3, r1]
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <handlerRxMessage+0x28>)
 80018e8:	581b      	ldr	r3, [r3, r0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f956 	bl	8000b9c <cheсkRxMessage>
 80018f0:	4603      	mov	r3, r0

	HAL_Delay(1);
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	17ffeaaa 	.word	0x17ffeaaa
 80018fc:	0000000c 	.word	0x0000000c
 8001900:	00000084 	.word	0x00000084

08001904 <HAL_UARTEx_RxEventCallback>:
 * Также запускается новый прием данных по DMA.
 *
 * @param huart Указатель на структуру UART_HandleTypeDef, представляющую конфигурацию UART.
 * @param Size Количество принятых байт.
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4c18      	ldr	r4, [pc, #96]	; (8001974 <HAL_UARTEx_RxEventCallback+0x70>)
 8001912:	447c      	add	r4, pc

#ifdef Debug
    printf("HAL_UARTEx_RxEventCallback.\n"); // Отладочный вывод
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UARTEx_RxEventCallback+0x74>)
 8001916:	447b      	add	r3, pc
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fc41 	bl	80071a0 <puts>
#endif

    if (huart->Instance == USART1) { // Проверка, что событие произошло для UART1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d11e      	bne.n	8001966 <HAL_UARTEx_RxEventCallback+0x62>
        flagInterrupt = SET; // Установка флага прерывания
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UARTEx_RxEventCallback+0x78>)
 800192a:	58e3      	ldr	r3, [r4, r3]
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
        nextState = rxMessage; // Установка следующего состояния для конечного автомата
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001932:	58e3      	ldr	r3, [r4, r3]
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveBuffer, rxByteSize); // Запуск нового приема данных по DMA
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_UARTEx_RxEventCallback+0x80>)
 800193a:	58e3      	ldr	r3, [r4, r3]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_UARTEx_RxEventCallback+0x84>)
 8001944:	58e3      	ldr	r3, [r4, r3]
 8001946:	4619      	mov	r1, r3
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_UARTEx_RxEventCallback+0x88>)
 800194a:	58e3      	ldr	r3, [r4, r3]
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fc0b 	bl	8006168 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); // Отключение прерывания при половине буфера
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001954:	58e3      	ldr	r3, [r4, r3]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_UARTEx_RxEventCallback+0x8c>)
 800195c:	58e3      	ldr	r3, [r4, r3]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0204 	bic.w	r2, r2, #4
 8001964:	601a      	str	r2, [r3, #0]
    }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	bf00      	nop
 8001970:	40013800 	.word	0x40013800
 8001974:	17ffea76 	.word	0x17ffea76
 8001978:	00006e8e 	.word	0x00006e8e
 800197c:	0000009c 	.word	0x0000009c
 8001980:	0000005c 	.word	0x0000005c
 8001984:	000000bc 	.word	0x000000bc
 8001988:	000000c0 	.word	0x000000c0
 800198c:	00000064 	.word	0x00000064
 8001990:	00000060 	.word	0x00000060

08001994 <HAL_GPIO_EXTI_Callback>:
 *
 * Эта функция вызывается при прерывании от входов GPIO, отвечающих за кнопки.
 * В зависимости от нажатой кнопки устанавливает соответствующее состояние и флаги для последующего обработчика.
 * Каждый блок условия относится к конкретной кнопке (взрыватель, демонтаж, тест), и в зависимости от нее устанавливаются определенные параметры.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
 800199e:	4c32      	ldr	r4, [pc, #200]	; (8001a68 <HAL_GPIO_EXTI_Callback+0xd4>)
 80019a0:	447c      	add	r4, pc
    #ifdef Debug
        printf("HAL_GPIO_EXTI_Callback.\n"); // Отладочный вывод
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <HAL_GPIO_EXTI_Callback+0xd8>)
 80019a4:	447b      	add	r3, pc
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fbfa 	bl	80071a0 <puts>
    #endif
    if (GPIO_Pin == PIN_BUTTON_10_Pin || GPIO_Pin == PIN_BUTTON_11_Pin ||
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d013      	beq.n	80019dc <HAL_GPIO_EXTI_Callback+0x48>
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ba:	d00f      	beq.n	80019dc <HAL_GPIO_EXTI_Callback+0x48>
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c2:	d00b      	beq.n	80019dc <HAL_GPIO_EXTI_Callback+0x48>
        GPIO_Pin == PIN_BUTTON_12_Pin || GPIO_Pin == PIN_BUTTON_13_Pin ||
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_EXTI_Callback+0x48>
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_EXTI_Callback+0x48>
        GPIO_Pin == PIN_BUTTON_14_Pin || GPIO_Pin == PIN_BUTTON_ARM_Pin) {
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019da:	d108      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0x5a>
        nextState = buttonDetonator; // Устанавливаем следующее состояние в режим кнопки выбора взрывателя
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_GPIO_EXTI_Callback+0xdc>)
 80019de:	58e3      	ldr	r3, [r4, r3]
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
        flagInterrupt = SET; // Устанавливаем флаг прерывания
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019e6:	58e3      	ldr	r3, [r4, r3]
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
        txStatus = txTest; // Устанавливаем статус передачи в режим Тест
        flagButtonTestUpdateDisplay = SET; // Устанавливаем флаг обновления дисплея для кнопки Тест
        countButtonTestClock = 0; // Сбрасываем счетчик времени кнопки Тест
    }

}
 80019ec:	e038      	b.n	8001a60 <HAL_GPIO_EXTI_Callback+0xcc>
    } else if (GPIO_Pin == PIN_BUTTON_DEMOLITION_Pin) {
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f4:	d118      	bne.n	8001a28 <HAL_GPIO_EXTI_Callback+0x94>
        nextState = buttonDemolition; // Устанавливаем следующее состояние в режим кнопки Демонтаж
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_GPIO_EXTI_Callback+0xdc>)
 80019f8:	58e3      	ldr	r3, [r4, r3]
 80019fa:	2205      	movs	r2, #5
 80019fc:	701a      	strb	r2, [r3, #0]
        flagInterrupt = SET; // Устанавливаем флаг прерывания
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a00:	58e3      	ldr	r3, [r4, r3]
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
        flagButtonDemolition = SET; // Устанавливаем флаг кнопки Демонтаж
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a08:	58e3      	ldr	r3, [r4, r3]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
        flagButtonDemolitionUpdateDisplay = SET; // Устанавливаем флаг обновления дисплея для кнопки Демонтаж
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a10:	58e3      	ldr	r3, [r4, r3]
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
        countButtonDemolitionClock = 0; // Сбрасываем счетчик времени кнопки Демонтаж
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_GPIO_EXTI_Callback+0xec>)
 8001a18:	58e3      	ldr	r3, [r4, r3]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
        txStatus = txDemolition; // Устанавливаем статус передачи в режим Демонтаж
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a20:	58e3      	ldr	r3, [r4, r3]
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	e01b      	b.n	8001a60 <HAL_GPIO_EXTI_Callback+0xcc>
    } else if (GPIO_Pin == PIN_BUTTON_TEST_Pin) {
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2e:	d117      	bne.n	8001a60 <HAL_GPIO_EXTI_Callback+0xcc>
        nextState = buttonTest; // Устанавливаем следующее состояние в режим кнопки Тест
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a32:	58e3      	ldr	r3, [r4, r3]
 8001a34:	2204      	movs	r2, #4
 8001a36:	701a      	strb	r2, [r3, #0]
        flagInterrupt = SET; // Устанавливаем флаг прерывания
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a3a:	58e3      	ldr	r3, [r4, r3]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
        flagButtonTest = SET; // Устанавливаем флаг кнопки Тест
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a42:	58e3      	ldr	r3, [r4, r3]
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
        txStatus = txTest; // Устанавливаем статус передачи в режим Тест
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a4a:	58e3      	ldr	r3, [r4, r3]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
        flagButtonTestUpdateDisplay = SET; // Устанавливаем флаг обновления дисплея для кнопки Тест
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a52:	58e3      	ldr	r3, [r4, r3]
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
        countButtonTestClock = 0; // Сбрасываем счетчик времени кнопки Тест
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a5a:	58e3      	ldr	r3, [r4, r3]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	17ffe9e8 	.word	0x17ffe9e8
 8001a6c:	00006e1c 	.word	0x00006e1c
 8001a70:	0000005c 	.word	0x0000005c
 8001a74:	0000009c 	.word	0x0000009c
 8001a78:	0000003c 	.word	0x0000003c
 8001a7c:	0000008c 	.word	0x0000008c
 8001a80:	00000044 	.word	0x00000044
 8001a84:	00000078 	.word	0x00000078
 8001a88:	000000b8 	.word	0x000000b8
 8001a8c:	00000074 	.word	0x00000074
 8001a90:	00000018 	.word	0x00000018

08001a94 <HAL_ADC_ConvCpltCallback>:
 * При условии, что прерывание было вызвано ADC1, останавливает DMA, присваивает переменной adcVoltage[0] значение,
 * преобразованное из данных ADC.
 *
 * @param hadc Указатель на структуру ADC_HandleTypeDef.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_ADC_ConvCpltCallback+0x40>)
 8001a9e:	447b      	add	r3, pc
    if (hadc->Instance == ADC1) { // Проверяем, вызвано ли прерывание от ADC1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4909      	ldr	r1, [pc, #36]	; (8001acc <HAL_ADC_ConvCpltCallback+0x38>)
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_ADC_ConvCpltCallback+0x2e>
        adcVoltage[0] = adcData[0] / 88; // Преобразуем данные ADC в напряжение и сохраняем в массиве adcVoltage
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_ADC_ConvCpltCallback+0x44>)
 8001aac:	589a      	ldr	r2, [r3, r2]
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001ab2:	fba1 1202 	umull	r1, r2, r1, r2
 8001ab6:	0992      	lsrs	r2, r2, #6
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	4611      	mov	r1, r2
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_ADC_ConvCpltCallback+0x48>)
 8001abe:	589b      	ldr	r3, [r3, r2]
 8001ac0:	6019      	str	r1, [r3, #0]
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40012400 	.word	0x40012400
 8001ad0:	ba2e8ba3 	.word	0xba2e8ba3
 8001ad4:	17ffe8ea 	.word	0x17ffe8ea
 8001ad8:	000000d0 	.word	0x000000d0
 8001adc:	00000094 	.word	0x00000094

08001ae0 <HAL_TIM_PeriodElapsedCallback>:
 * Эта функция вызывается по истечении периода таймера.
 * В зависимости от таймера, устанавливает соответствующие флаги прерывания и переключает состояние конечного автомата.
 *
 * @param htim Указатель на структуру TIM_HandleTypeDef, представляющую таймер.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001aea:	447b      	add	r3, pc
    if (htim->Instance == TIM1) { // Проверяем, вызвано ли прерывание от TIM1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	4916      	ldr	r1, [pc, #88]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001af2:	428a      	cmp	r2, r1
 8001af4:	d10b      	bne.n	8001b0e <HAL_TIM_PeriodElapsedCallback+0x2e>
        flagInterrupt = SET; // Устанавливаем флаг прерывания
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001af8:	589a      	ldr	r2, [r3, r2]
 8001afa:	2101      	movs	r1, #1
 8001afc:	7011      	strb	r1, [r2, #0]
        flagPeriodic1 = SET; // Устанавливаем флаг периодического прерывания 1
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b00:	589a      	ldr	r2, [r3, r2]
 8001b02:	2101      	movs	r1, #1
 8001b04:	7011      	strb	r1, [r2, #0]
         nextState = waitForev; // Указываем следующее состояние конечного автомата
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b08:	589a      	ldr	r2, [r3, r2]
 8001b0a:	2107      	movs	r1, #7
 8001b0c:	7011      	strb	r1, [r2, #0]
    }
    if (htim->Instance == TIM2) { // Проверяем, вызвано ли прерывание от TIM2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001b16:	d114      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x62>
        flagInterrupt = SET; // Устанавливаем флаг прерывания
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b1a:	589a      	ldr	r2, [r3, r2]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	7011      	strb	r1, [r2, #0]
        flagPeriodic2 = SET; // Устанавливаем флаг периодического прерывания 2
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b22:	589a      	ldr	r2, [r3, r2]
 8001b24:	2101      	movs	r1, #1
 8001b26:	7011      	strb	r1, [r2, #0]
        nextState = waitTx; // Указываем следующее состояние конечного автомата
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b2a:	589a      	ldr	r2, [r3, r2]
 8001b2c:	2109      	movs	r1, #9
 8001b2e:	7011      	strb	r1, [r2, #0]
        if (bufferDisplay.timeTxWake < 1) { // Если время ожидания для передачи истекло
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b32:	589a      	ldr	r2, [r3, r2]
 8001b34:	7fd2      	ldrb	r2, [r2, #31]
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d103      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x62>
            nextState = wait; // Переключаемся в состояние ожидания
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b3c:	589b      	ldr	r3, [r3, r2]
 8001b3e:	220b      	movs	r2, #11
 8001b40:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40012c00 	.word	0x40012c00
 8001b50:	17ffe89e 	.word	0x17ffe89e
 8001b54:	0000009c 	.word	0x0000009c
 8001b58:	0000004c 	.word	0x0000004c
 8001b5c:	0000005c 	.word	0x0000005c
 8001b60:	00000020 	.word	0x00000020
 8001b64:	00000088 	.word	0x00000088

08001b68 <togleLed>:
//=============================================================================================================================//
//===========================================togleLed()=====================================================//
//=============================================================================================================================//
extern void togleLed() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(PIN_LED_GPIO_Port, PIN_LED_Pin); // Переключает состояние пина светодиода
 8001b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <togleLed+0x14>)
 8001b72:	f002 fad4 	bl	800411e <HAL_GPIO_TogglePin>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40011000 	.word	0x40011000

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4c61      	ldr	r4, [pc, #388]	; (8001d18 <SSD1306_Init+0x18c>)
 8001b94:	447c      	add	r4, pc

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b96:	f000 fa5b 	bl	8002050 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2178      	movs	r1, #120	; 0x78
 8001ba2:	485e      	ldr	r0, [pc, #376]	; (8001d1c <SSD1306_Init+0x190>)
 8001ba4:	5820      	ldr	r0, [r4, r0]
 8001ba6:	f002 fd2d 	bl	8004604 <HAL_I2C_IsDeviceReady>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SSD1306_Init+0x28>
		/* Return false */
		return 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e0ac      	b.n	8001d0e <SSD1306_Init+0x182>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001bb4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001bb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bba:	e002      	b.n	8001bc2 <SSD1306_Init+0x36>
		p--;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <SSD1306_Init+0x30>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bc8:	22ae      	movs	r2, #174	; 0xae
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2078      	movs	r0, #120	; 0x78
 8001bce:	f000 fabf 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2078      	movs	r0, #120	; 0x78
 8001bd8:	f000 faba 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bdc:	2210      	movs	r2, #16
 8001bde:	2100      	movs	r1, #0
 8001be0:	2078      	movs	r0, #120	; 0x78
 8001be2:	f000 fab5 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001be6:	22b0      	movs	r2, #176	; 0xb0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2078      	movs	r0, #120	; 0x78
 8001bec:	f000 fab0 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001bf0:	22c8      	movs	r2, #200	; 0xc8
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2078      	movs	r0, #120	; 0x78
 8001bf6:	f000 faab 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2078      	movs	r0, #120	; 0x78
 8001c00:	f000 faa6 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001c04:	2210      	movs	r2, #16
 8001c06:	2100      	movs	r1, #0
 8001c08:	2078      	movs	r0, #120	; 0x78
 8001c0a:	f000 faa1 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	2100      	movs	r1, #0
 8001c12:	2078      	movs	r0, #120	; 0x78
 8001c14:	f000 fa9c 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c18:	2281      	movs	r2, #129	; 0x81
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2078      	movs	r0, #120	; 0x78
 8001c1e:	f000 fa97 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c22:	22ff      	movs	r2, #255	; 0xff
 8001c24:	2100      	movs	r1, #0
 8001c26:	2078      	movs	r0, #120	; 0x78
 8001c28:	f000 fa92 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c2c:	22a1      	movs	r2, #161	; 0xa1
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2078      	movs	r0, #120	; 0x78
 8001c32:	f000 fa8d 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c36:	22a6      	movs	r2, #166	; 0xa6
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2078      	movs	r0, #120	; 0x78
 8001c3c:	f000 fa88 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c40:	22a8      	movs	r2, #168	; 0xa8
 8001c42:	2100      	movs	r1, #0
 8001c44:	2078      	movs	r0, #120	; 0x78
 8001c46:	f000 fa83 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c4a:	223f      	movs	r2, #63	; 0x3f
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2078      	movs	r0, #120	; 0x78
 8001c50:	f000 fa7e 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c54:	22a4      	movs	r2, #164	; 0xa4
 8001c56:	2100      	movs	r1, #0
 8001c58:	2078      	movs	r0, #120	; 0x78
 8001c5a:	f000 fa79 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c5e:	22d3      	movs	r2, #211	; 0xd3
 8001c60:	2100      	movs	r1, #0
 8001c62:	2078      	movs	r0, #120	; 0x78
 8001c64:	f000 fa74 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2078      	movs	r0, #120	; 0x78
 8001c6e:	f000 fa6f 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c72:	22d5      	movs	r2, #213	; 0xd5
 8001c74:	2100      	movs	r1, #0
 8001c76:	2078      	movs	r0, #120	; 0x78
 8001c78:	f000 fa6a 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c7c:	22f0      	movs	r2, #240	; 0xf0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2078      	movs	r0, #120	; 0x78
 8001c82:	f000 fa65 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c86:	22d9      	movs	r2, #217	; 0xd9
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2078      	movs	r0, #120	; 0x78
 8001c8c:	f000 fa60 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c90:	2222      	movs	r2, #34	; 0x22
 8001c92:	2100      	movs	r1, #0
 8001c94:	2078      	movs	r0, #120	; 0x78
 8001c96:	f000 fa5b 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c9a:	22da      	movs	r2, #218	; 0xda
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2078      	movs	r0, #120	; 0x78
 8001ca0:	f000 fa56 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001ca4:	2212      	movs	r2, #18
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2078      	movs	r0, #120	; 0x78
 8001caa:	f000 fa51 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001cae:	22db      	movs	r2, #219	; 0xdb
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2078      	movs	r0, #120	; 0x78
 8001cb4:	f000 fa4c 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001cb8:	2220      	movs	r2, #32
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2078      	movs	r0, #120	; 0x78
 8001cbe:	f000 fa47 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cc2:	228d      	movs	r2, #141	; 0x8d
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2078      	movs	r0, #120	; 0x78
 8001cc8:	f000 fa42 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ccc:	2214      	movs	r2, #20
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2078      	movs	r0, #120	; 0x78
 8001cd2:	f000 fa3d 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cd6:	22af      	movs	r2, #175	; 0xaf
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2078      	movs	r0, #120	; 0x78
 8001cdc:	f000 fa38 	bl	8002150 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ce0:	222e      	movs	r2, #46	; 0x2e
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2078      	movs	r0, #120	; 0x78
 8001ce6:	f000 fa33 	bl	8002150 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 f84e 	bl	8001d8c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001cf0:	f000 f81c 	bl	8001d2c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <SSD1306_Init+0x194>)
 8001cf6:	447b      	add	r3, pc
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <SSD1306_Init+0x198>)
 8001cfe:	447b      	add	r3, pc
 8001d00:	2200      	movs	r2, #0
 8001d02:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <SSD1306_Init+0x19c>)
 8001d06:	447b      	add	r3, pc
 8001d08:	2201      	movs	r2, #1
 8001d0a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	17ffe7f4 	.word	0x17ffe7f4
 8001d1c:	00000014 	.word	0x00000014
 8001d20:	17ffebae 	.word	0x17ffebae
 8001d24:	17ffeba6 	.word	0x17ffeba6
 8001d28:	17ffeb9e 	.word	0x17ffeb9e

08001d2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	e01e      	b.n	8001d76 <SSD1306_UpdateScreen+0x4a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	3b50      	subs	r3, #80	; 0x50
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	2078      	movs	r0, #120	; 0x78
 8001d44:	f000 fa04 	bl	8002150 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2078      	movs	r0, #120	; 0x78
 8001d4e:	f000 f9ff 	bl	8002150 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d52:	2210      	movs	r2, #16
 8001d54:	2100      	movs	r1, #0
 8001d56:	2078      	movs	r0, #120	; 0x78
 8001d58:	f000 f9fa 	bl	8002150 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	01db      	lsls	r3, r3, #7
 8001d60:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <SSD1306_UpdateScreen+0x5c>)
 8001d62:	447a      	add	r2, pc
 8001d64:	441a      	add	r2, r3
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	2078      	movs	r0, #120	; 0x78
 8001d6c:	f000 f984 	bl	8002078 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3301      	adds	r3, #1
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b07      	cmp	r3, #7
 8001d7a:	d9dd      	bls.n	8001d38 <SSD1306_UpdateScreen+0xc>
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	17ffe742 	.word	0x17ffe742

08001d8c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <SSD1306_Fill+0x14>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <SSD1306_Fill+0x16>
 8001da0:	23ff      	movs	r3, #255	; 0xff
 8001da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da6:	4619      	mov	r1, r3
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SSD1306_Fill+0x30>)
 8001daa:	447b      	add	r3, pc
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 f969 	bl	8007084 <memset>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	17ffe6fa 	.word	0x17ffe6fa

08001dc0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	80bb      	strh	r3, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	70fb      	strb	r3, [r7, #3]
	if (
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd6:	d84d      	bhi.n	8001e74 <SSD1306_DrawPixel+0xb4>
		x >= SSD1306_WIDTH ||
 8001dd8:	88bb      	ldrh	r3, [r7, #4]
 8001dda:	2b3f      	cmp	r3, #63	; 0x3f
 8001ddc:	d84a      	bhi.n	8001e74 <SSD1306_DrawPixel+0xb4>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <SSD1306_DrawPixel+0xc0>)
 8001de0:	447b      	add	r3, pc
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <SSD1306_DrawPixel+0x36>
		color = (SSD1306_COLOR_t)!color;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d11c      	bne.n	8001e36 <SSD1306_DrawPixel+0x76>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dfc:	88fa      	ldrh	r2, [r7, #6]
 8001dfe:	88bb      	ldrh	r3, [r7, #4]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	b298      	uxth	r0, r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	01db      	lsls	r3, r3, #7
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <SSD1306_DrawPixel+0xc4>)
 8001e0c:	447a      	add	r2, pc
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b259      	sxtb	r1, r3
 8001e24:	88fa      	ldrh	r2, [r7, #6]
 8001e26:	4603      	mov	r3, r0
 8001e28:	01db      	lsls	r3, r3, #7
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b2c9      	uxtb	r1, r1
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <SSD1306_DrawPixel+0xc8>)
 8001e30:	447a      	add	r2, pc
 8001e32:	54d1      	strb	r1, [r2, r3]
 8001e34:	e01f      	b.n	8001e76 <SSD1306_DrawPixel+0xb6>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	b298      	uxth	r0, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	4413      	add	r3, r2
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <SSD1306_DrawPixel+0xcc>)
 8001e46:	447a      	add	r2, pc
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	b25a      	sxtb	r2, r3
 8001e4c:	88bb      	ldrh	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b259      	sxtb	r1, r3
 8001e62:	88fa      	ldrh	r2, [r7, #6]
 8001e64:	4603      	mov	r3, r0
 8001e66:	01db      	lsls	r3, r3, #7
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2c9      	uxtb	r1, r1
 8001e6c:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <SSD1306_DrawPixel+0xd0>)
 8001e6e:	447a      	add	r2, pc
 8001e70:	54d1      	strb	r1, [r2, r3]
 8001e72:	e000      	b.n	8001e76 <SSD1306_DrawPixel+0xb6>
		return;
 8001e74:	bf00      	nop
	}
}
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	17ffeac4 	.word	0x17ffeac4
 8001e84:	17ffe698 	.word	0x17ffe698
 8001e88:	17ffe674 	.word	0x17ffe674
 8001e8c:	17ffe65e 	.word	0x17ffe65e
 8001e90:	17ffe636 	.word	0x17ffe636

08001e94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	80fb      	strh	r3, [r7, #6]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <SSD1306_GotoXY+0x2c>)
 8001ea6:	447b      	add	r3, pc
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SSD1306_GotoXY+0x30>)
 8001eae:	447b      	add	r3, pc
 8001eb0:	88ba      	ldrh	r2, [r7, #4]
 8001eb2:	805a      	strh	r2, [r3, #2]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	17ffe9fe 	.word	0x17ffe9fe
 8001ec4:	17ffe9f6 	.word	0x17ffe9f6

08001ec8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <SSD1306_Putc+0x10c>)
 8001eda:	447b      	add	r3, pc
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4413      	add	r3, r2
	if (
 8001ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ee8:	dc08      	bgt.n	8001efc <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <SSD1306_Putc+0x110>)
 8001eec:	447b      	add	r3, pc
 8001eee:	885b      	ldrh	r3, [r3, #2]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8001efa:	dd01      	ble.n	8001f00 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e064      	b.n	8001fca <SSD1306_Putc+0x102>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e04f      	b.n	8001fa6 <SSD1306_Putc+0xde>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	3b20      	subs	r3, #32
 8001f0e:	6839      	ldr	r1, [r7, #0]
 8001f10:	7849      	ldrb	r1, [r1, #1]
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4619      	mov	r1, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e034      	b.n	8001f94 <SSD1306_Putc+0xcc>
			if ((b << j) & 0x8000) {
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <SSD1306_Putc+0x98>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <SSD1306_Putc+0x114>)
 8001f3c:	447b      	add	r3, pc
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	b298      	uxth	r0, r3
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <SSD1306_Putc+0x118>)
 8001f4a:	447b      	add	r3, pc
 8001f4c:	885a      	ldrh	r2, [r3, #2]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	79ba      	ldrb	r2, [r7, #6]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7ff ff31 	bl	8001dc0 <SSD1306_DrawPixel>
 8001f5e:	e016      	b.n	8001f8e <SSD1306_Putc+0xc6>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <SSD1306_Putc+0x11c>)
 8001f62:	447b      	add	r3, pc
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <SSD1306_Putc+0x120>)
 8001f70:	447b      	add	r3, pc
 8001f72:	885a      	ldrh	r2, [r3, #2]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f7ff ff19 	bl	8001dc0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	3301      	adds	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d3c4      	bcc.n	8001f2a <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	461a      	mov	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d3a9      	bcc.n	8001f06 <SSD1306_Putc+0x3e>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <SSD1306_Putc+0x124>)
 8001fb4:	447b      	add	r3, pc
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <SSD1306_Putc+0x128>)
 8001fc4:	447b      	add	r3, pc
 8001fc6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	17ffe9ca 	.word	0x17ffe9ca
 8001fd8:	17ffe9b8 	.word	0x17ffe9b8
 8001fdc:	17ffe968 	.word	0x17ffe968
 8001fe0:	17ffe95a 	.word	0x17ffe95a
 8001fe4:	17ffe942 	.word	0x17ffe942
 8001fe8:	17ffe934 	.word	0x17ffe934
 8001fec:	17ffe8f0 	.word	0x17ffe8f0
 8001ff0:	17ffe8e0 	.word	0x17ffe8e0

08001ff4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002002:	e012      	b.n	800202a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	79fa      	ldrb	r2, [r7, #7]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5b 	bl	8001ec8 <SSD1306_Putc>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d002      	beq.n	8002024 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	e008      	b.n	8002036 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e8      	bne.n	8002004 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff fea2 	bl	8001d8c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002048:	f7ff fe70 	bl	8001d2c <SSD1306_UpdateScreen>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <ssd1306_I2C_Init+0x24>)
 8002058:	607b      	str	r3, [r7, #4]
	while(p>0)
 800205a:	e002      	b.n	8002062 <ssd1306_I2C_Init+0x12>
		p--;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	0003d090 	.word	0x0003d090

08002078 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b0c7      	sub	sp, #284	; 0x11c
 800207c:	af02      	add	r7, sp, #8
 800207e:	4604      	mov	r4, r0
 8002080:	4608      	mov	r0, r1
 8002082:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002086:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800208a:	600a      	str	r2, [r1, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002092:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002096:	4622      	mov	r2, r4
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800209e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80020a2:	4602      	mov	r2, r0
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020ae:	460a      	mov	r2, r1
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	4c25      	ldr	r4, [pc, #148]	; (8002148 <ssd1306_I2C_WriteMulti+0xd0>)
 80020b4:	447c      	add	r4, pc
uint8_t dt[256];
dt[0] = reg;
 80020b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020c2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80020d0:	e015      	b.n	80020fe <ssd1306_I2C_WriteMulti+0x86>
dt[i+1] = data[i];
 80020d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	441a      	add	r2, r3
 80020e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020e6:	3301      	adds	r3, #1
 80020e8:	7811      	ldrb	r1, [r2, #0]
 80020ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020ee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80020f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80020f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020f8:	3301      	adds	r3, #1
 80020fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80020fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002102:	b29b      	uxth	r3, r3
 8002104:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002108:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800210c:	8812      	ldrh	r2, [r2, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d8df      	bhi.n	80020d2 <ssd1306_I2C_WriteMulti+0x5a>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002116:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b299      	uxth	r1, r3
 800211e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002122:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	f107 020c 	add.w	r2, r7, #12
 8002130:	200a      	movs	r0, #10
 8002132:	9000      	str	r0, [sp, #0]
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <ssd1306_I2C_WriteMulti+0xd4>)
 8002136:	5820      	ldr	r0, [r4, r0]
 8002138:	f002 f966 	bl	8004408 <HAL_I2C_Master_Transmit>
}
 800213c:	bf00      	nop
 800213e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	17ffe2d4 	.word	0x17ffe2d4
 800214c:	00000014 	.word	0x00000014

08002150 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b087      	sub	sp, #28
 8002154:	af02      	add	r7, sp, #8
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	460b      	mov	r3, r1
 800215c:	71bb      	strb	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	717b      	strb	r3, [r7, #5]
 8002162:	4c0a      	ldr	r4, [pc, #40]	; (800218c <ssd1306_I2C_Write+0x3c>)
 8002164:	447c      	add	r4, pc
	uint8_t dt[2];
	dt[0] = reg;
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800216a:	797b      	ldrb	r3, [r7, #5]
 800216c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	b299      	uxth	r1, r3
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	230a      	movs	r3, #10
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2302      	movs	r3, #2
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <ssd1306_I2C_Write+0x40>)
 800217e:	5820      	ldr	r0, [r4, r0]
 8002180:	f002 f942 	bl	8004408 <HAL_I2C_Master_Transmit>
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	17ffe224 	.word	0x17ffe224
 8002190:	00000014 	.word	0x00000014

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_MspInit+0x5c>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_MspInit+0x5c>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_MspInit+0x5c>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_MspInit+0x5c>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_MspInit+0x5c>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_MspInit+0x5c>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_MspInit+0x60>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_MspInit+0x60>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000

080021f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	4c37      	ldr	r4, [pc, #220]	; (80022e0 <HAL_ADC_MspInit+0xe8>)
 8002202:	447c      	add	r4, pc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2e      	ldr	r2, [pc, #184]	; (80022d0 <HAL_ADC_MspInit+0xd8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d155      	bne.n	80022c8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_ADC_MspInit+0xdc>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <HAL_ADC_MspInit+0xdc>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_ADC_MspInit+0xdc>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_ADC_MspInit+0xdc>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_ADC_MspInit+0xdc>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_ADC_MspInit+0xdc>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800224c:	2304      	movs	r3, #4
 800224e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002250:	2303      	movs	r3, #3
 8002252:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	4619      	mov	r1, r3
 800225a:	481f      	ldr	r0, [pc, #124]	; (80022d8 <HAL_ADC_MspInit+0xe0>)
 800225c:	f001 fdaa 	bl	8003db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 8002262:	58e3      	ldr	r3, [r4, r3]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_ADC_MspInit+0xe4>)
 8002266:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 800226a:	58e3      	ldr	r3, [r4, r3]
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 8002272:	58e3      	ldr	r3, [r4, r3]
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 800227a:	58e3      	ldr	r3, [r4, r3]
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 8002282:	58e3      	ldr	r3, [r4, r3]
 8002284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002288:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 800228c:	58e3      	ldr	r3, [r4, r3]
 800228e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002292:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 8002296:	58e3      	ldr	r3, [r4, r3]
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 800229e:	58e3      	ldr	r3, [r4, r3]
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 80022a6:	58e3      	ldr	r3, [r4, r3]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 f8ab 	bl	8003404 <HAL_DMA_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80022b4:	f7ff fc64 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 80022bc:	58a2      	ldr	r2, [r4, r2]
 80022be:	621a      	str	r2, [r3, #32]
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 80022c2:	58e3      	ldr	r3, [r4, r3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022c8:	bf00      	nop
 80022ca:	3724      	adds	r7, #36	; 0x24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	40012400 	.word	0x40012400
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010800 	.word	0x40010800
 80022dc:	40020008 	.word	0x40020008
 80022e0:	17ffe186 	.word	0x17ffe186
 80022e4:	00000080 	.word	0x00000080

080022e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_I2C_MspInit+0x70>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d123      	bne.n	8002350 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_I2C_MspInit+0x74>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_I2C_MspInit+0x74>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_I2C_MspInit+0x74>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002324:	2312      	movs	r3, #18
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	480b      	ldr	r0, [pc, #44]	; (8002360 <HAL_I2C_MspInit+0x78>)
 8002334:	f001 fd3e 	bl	8003db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_I2C_MspInit+0x74>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_I2C_MspInit+0x74>)
 800233e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002342:	61d3      	str	r3, [r2, #28]
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_I2C_MspInit+0x74>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40005400 	.word	0x40005400
 800235c:	40021000 	.word	0x40021000
 8002360:	40010c00 	.word	0x40010c00

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_TIM_Base_MspInit+0x78>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d114      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_TIM_Base_MspInit+0x7c>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_TIM_Base_MspInit+0x7c>)
 800237c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002380:	6193      	str	r3, [r2, #24]
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_TIM_Base_MspInit+0x7c>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	2019      	movs	r0, #25
 8002394:	f000 fff1 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002398:	2019      	movs	r0, #25
 800239a:	f001 f80a 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800239e:	e018      	b.n	80023d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d113      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_TIM_Base_MspInit+0x7c>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_TIM_Base_MspInit+0x7c>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_TIM_Base_MspInit+0x7c>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	201c      	movs	r0, #28
 80023c8:	f000 ffd7 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023cc:	201c      	movs	r0, #28
 80023ce:	f000 fff0 	bl	80033b2 <HAL_NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	4c5d      	ldr	r4, [pc, #372]	; (8002564 <HAL_UART_MspInit+0x180>)
 80023ee:	447c      	add	r4, pc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_UART_MspInit+0x16c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	f040 809e 	bne.w	8002546 <HAL_UART_MspInit+0x162>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800240a:	4b52      	ldr	r3, [pc, #328]	; (8002554 <HAL_UART_MspInit+0x170>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_UART_MspInit+0x170>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6193      	str	r3, [r2, #24]
 8002416:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <HAL_UART_MspInit+0x170>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_UART_MspInit+0x170>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_UART_MspInit+0x170>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6193      	str	r3, [r2, #24]
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_UART_MspInit+0x170>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PIN_TX_Pin;
 800243a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_TX_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	4842      	ldr	r0, [pc, #264]	; (8002558 <HAL_UART_MspInit+0x174>)
 8002450:	f001 fcb0 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_RX_Pin;
 8002454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(PIN_RX_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4619      	mov	r1, r3
 8002468:	483b      	ldr	r0, [pc, #236]	; (8002558 <HAL_UART_MspInit+0x174>)
 800246a:	f001 fca3 	bl	8003db4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <HAL_UART_MspInit+0x184>)
 8002470:	58e3      	ldr	r3, [r4, r3]
 8002472:	4a3a      	ldr	r2, [pc, #232]	; (800255c <HAL_UART_MspInit+0x178>)
 8002474:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <HAL_UART_MspInit+0x184>)
 8002478:	58e3      	ldr	r3, [r4, r3]
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_UART_MspInit+0x184>)
 8002480:	58e3      	ldr	r3, [r4, r3]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_UART_MspInit+0x184>)
 8002488:	58e3      	ldr	r3, [r4, r3]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_UART_MspInit+0x184>)
 8002490:	58e3      	ldr	r3, [r4, r3]
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002496:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_UART_MspInit+0x184>)
 8002498:	58e3      	ldr	r3, [r4, r3]
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_UART_MspInit+0x184>)
 80024a0:	58e3      	ldr	r3, [r4, r3]
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_UART_MspInit+0x184>)
 80024a8:	58e3      	ldr	r3, [r4, r3]
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_UART_MspInit+0x184>)
 80024b0:	58e3      	ldr	r3, [r4, r3]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 ffa6 	bl	8003404 <HAL_DMA_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80024be:	f7ff fb5f 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a28      	ldr	r2, [pc, #160]	; (8002568 <HAL_UART_MspInit+0x184>)
 80024c6:	58a2      	ldr	r2, [r4, r2]
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_UART_MspInit+0x184>)
 80024cc:	58e3      	ldr	r3, [r4, r3]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_UART_MspInit+0x188>)
 80024d4:	58e3      	ldr	r3, [r4, r3]
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_UART_MspInit+0x17c>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_UART_MspInit+0x188>)
 80024dc:	58e3      	ldr	r3, [r4, r3]
 80024de:	2210      	movs	r2, #16
 80024e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_UART_MspInit+0x188>)
 80024e4:	58e3      	ldr	r3, [r4, r3]
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_UART_MspInit+0x188>)
 80024ec:	58e3      	ldr	r3, [r4, r3]
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_UART_MspInit+0x188>)
 80024f4:	58e3      	ldr	r3, [r4, r3]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_UART_MspInit+0x188>)
 80024fc:	58e3      	ldr	r3, [r4, r3]
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_UART_MspInit+0x188>)
 8002504:	58e3      	ldr	r3, [r4, r3]
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_UART_MspInit+0x188>)
 800250c:	58e3      	ldr	r3, [r4, r3]
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_UART_MspInit+0x188>)
 8002514:	58e3      	ldr	r3, [r4, r3]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 ff74 	bl	8003404 <HAL_DMA_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002522:	f7ff fb2d 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a10      	ldr	r2, [pc, #64]	; (800256c <HAL_UART_MspInit+0x188>)
 800252a:	58a2      	ldr	r2, [r4, r2]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_UART_MspInit+0x188>)
 8002530:	58e3      	ldr	r3, [r4, r3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2025      	movs	r0, #37	; 0x25
 800253c:	f000 ff1d 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002540:	2025      	movs	r0, #37	; 0x25
 8002542:	f000 ff36 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	40013800 	.word	0x40013800
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800
 800255c:	40020058 	.word	0x40020058
 8002560:	40020044 	.word	0x40020044
 8002564:	17ffdf9a 	.word	0x17ffdf9a
 8002568:	00000060 	.word	0x00000060
 800256c:	00000054 	.word	0x00000054

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <NMI_Handler+0x4>

08002576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <HardFault_Handler+0x4>

0800257c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <MemManage_Handler+0x4>

08002582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <BusFault_Handler+0x4>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <UsageFault_Handler+0x4>

0800258e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b6:	f000 f9a5 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <DMA1_Channel1_IRQHandler+0x18>)
 80025c6:	447a      	add	r2, pc
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <DMA1_Channel1_IRQHandler+0x1c>)
 80025ca:	58d3      	ldr	r3, [r2, r3]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 f887 	bl	80036e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	17ffddc2 	.word	0x17ffddc2
 80025dc:	00000080 	.word	0x00000080

080025e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <DMA1_Channel4_IRQHandler+0x18>)
 80025e6:	447a      	add	r2, pc
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <DMA1_Channel4_IRQHandler+0x1c>)
 80025ea:	58d3      	ldr	r3, [r2, r3]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 f877 	bl	80036e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	17ffdda2 	.word	0x17ffdda2
 80025fc:	00000054 	.word	0x00000054

08002600 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <DMA1_Channel5_IRQHandler+0x18>)
 8002606:	447a      	add	r2, pc
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <DMA1_Channel5_IRQHandler+0x1c>)
 800260a:	58d3      	ldr	r3, [r2, r3]
 800260c:	4618      	mov	r0, r3
 800260e:	f001 f867 	bl	80036e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	17ffdd82 	.word	0x17ffdd82
 800261c:	00000060 	.word	0x00000060

08002620 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_AUX_Pin);
 8002624:	2080      	movs	r0, #128	; 0x80
 8002626:	f001 fd93 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_ARM_Pin);
 800262a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800262e:	f001 fd8f 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_TEST_Pin);
 8002632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002636:	f001 fd8b 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <TIM1_UP_IRQHandler+0x18>)
 8002646:	447a      	add	r2, pc
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <TIM1_UP_IRQHandler+0x1c>)
 800264a:	58d3      	ldr	r3, [r2, r3]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 f96d 	bl	800592c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	17ffdd42 	.word	0x17ffdd42
 800265c:	00000090 	.word	0x00000090

08002660 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <TIM2_IRQHandler+0x18>)
 8002666:	447a      	add	r2, pc
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <TIM2_IRQHandler+0x1c>)
 800266a:	58d3      	ldr	r3, [r2, r3]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 f95d 	bl	800592c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	17ffdd22 	.word	0x17ffdd22
 800267c:	000000a0 	.word	0x000000a0

08002680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <USART1_IRQHandler+0x18>)
 8002686:	447a      	add	r2, pc
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <USART1_IRQHandler+0x1c>)
 800268a:	58d3      	ldr	r3, [r2, r3]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fdc9 	bl	8006224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	17ffdd02 	.word	0x17ffdd02
 800269c:	00000064 	.word	0x00000064

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_10_Pin);
 80026a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026a8:	f001 fd52 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_11_Pin);
 80026ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026b0:	f001 fd4e 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_12_Pin);
 80026b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026b8:	f001 fd4a 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_13_Pin);
 80026bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026c0:	f001 fd46 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_14_Pin);
 80026c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026c8:	f001 fd42 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_DEMOLITION_Pin);
 80026cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026d0:	f001 fd3e 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e00a      	b.n	8002700 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ea:	f3af 8000 	nop.w
 80026ee:	4601      	mov	r1, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	60ba      	str	r2, [r7, #8]
 80026f6:	b2ca      	uxtb	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3301      	adds	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbf0      	blt.n	80026ea <_read+0x12>
  }

  return len;
 8002708:	687b      	ldr	r3, [r7, #4]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002738:	605a      	str	r2, [r3, #4]
  return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <_isatty>:

int _isatty(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <_sbrk+0x74>)
 800277e:	447b      	add	r3, pc
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <_sbrk+0x78>)
 8002782:	589a      	ldr	r2, [r3, r2]
 8002784:	4611      	mov	r1, r2
 8002786:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <_sbrk+0x7c>)
 8002788:	589a      	ldr	r2, [r3, r2]
 800278a:	1a8a      	subs	r2, r1, r2
 800278c:	617a      	str	r2, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	613a      	str	r2, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <_sbrk+0x80>)
 8002794:	447a      	add	r2, pc
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	2a00      	cmp	r2, #0
 800279a:	d104      	bne.n	80027a6 <_sbrk+0x32>
  {
    __sbrk_heap_end = &_end;
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <_sbrk+0x84>)
 800279e:	447a      	add	r2, pc
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <_sbrk+0x88>)
 80027a2:	585b      	ldr	r3, [r3, r1]
 80027a4:	6013      	str	r3, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <_sbrk+0x8c>)
 80027a8:	447b      	add	r3, pc
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d207      	bcs.n	80027c6 <_sbrk+0x52>
  {
    errno = ENOMEM;
 80027b6:	f004 fc3b 	bl	8007030 <__errno>
 80027ba:	4603      	mov	r3, r0
 80027bc:	220c      	movs	r2, #12
 80027be:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	e00c      	b.n	80027e0 <_sbrk+0x6c>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <_sbrk+0x90>)
 80027c8:	447b      	add	r3, pc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <_sbrk+0x94>)
 80027d0:	447b      	add	r3, pc
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	441a      	add	r2, r3
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <_sbrk+0x98>)
 80027da:	447b      	add	r3, pc
 80027dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	17ffdc0a 	.word	0x17ffdc0a
 80027ec:	000000a4 	.word	0x000000a4
 80027f0:	00000010 	.word	0x00000010
 80027f4:	17ffe118 	.word	0x17ffe118
 80027f8:	17ffe10e 	.word	0x17ffe10e
 80027fc:	000000ac 	.word	0x000000ac
 8002800:	17ffe104 	.word	0x17ffe104
 8002804:	17ffe0e4 	.word	0x17ffe0e4
 8002808:	17ffe0dc 	.word	0x17ffe0dc
 800280c:	17ffe0d2 	.word	0x17ffe0d2

08002810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800281c:	f7ff fff8 	bl	8002810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002820:	480b      	ldr	r0, [pc, #44]	; (8002850 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002822:	490c      	ldr	r1, [pc, #48]	; (8002854 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002824:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002838:	4c09      	ldr	r4, [pc, #36]	; (8002860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002846:	f004 fbf9 	bl	800703c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800284a:	f7fe fa8f 	bl	8000d6c <main>
  bx lr
 800284e:	4770      	bx	lr
  ldr r0, =_sdata
 8002850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002854:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 8002858:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 800285c:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8002860:	20000b78 	.word	0x20000b78

08002864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC1_2_IRQHandler>
	...

08002868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_Init+0x28>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_Init+0x28>)
 8002872:	f043 0310 	orr.w	r3, r3, #16
 8002876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002878:	2003      	movs	r0, #3
 800287a:	f000 fd73 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287e:	200f      	movs	r0, #15
 8002880:	f000 f808 	bl	8002894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002884:	f7ff fc86 	bl	8002194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000

08002894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	4c15      	ldr	r4, [pc, #84]	; (80028f4 <HAL_InitTick+0x60>)
 800289e:	447c      	add	r4, pc
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_InitTick+0x64>)
 80028a2:	58e3      	ldr	r3, [r4, r3]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_InitTick+0x68>)
 80028a8:	58e3      	ldr	r3, [r4, r3]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fd95 	bl	80033ea <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <HAL_InitTick+0x56>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80b      	bhi.n	80028e8 <HAL_InitTick+0x54>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f000 fd4f 	bl	800337a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_InitTick+0x6c>)
 80028de:	58e3      	ldr	r3, [r4, r3]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_InitTick+0x56>
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	bf00      	nop
 80028f4:	17ffdaea 	.word	0x17ffdaea
 80028f8:	0000001c 	.word	0x0000001c
 80028fc:	00000024 	.word	0x00000024
 8002900:	00000050 	.word	0x00000050

08002904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_IncTick+0x28>)
 800290a:	447b      	add	r3, pc
  uwTick += uwTickFreq;
 800290c:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_IncTick+0x2c>)
 800290e:	589a      	ldr	r2, [r3, r2]
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	4611      	mov	r1, r2
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_IncTick+0x30>)
 8002916:	589a      	ldr	r2, [r3, r2]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	440a      	add	r2, r1
 800291c:	4905      	ldr	r1, [pc, #20]	; (8002934 <HAL_IncTick+0x30>)
 800291e:	585b      	ldr	r3, [r3, r1]
 8002920:	601a      	str	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	17ffda7e 	.word	0x17ffda7e
 8002930:	00000024 	.word	0x00000024
 8002934:	00000034 	.word	0x00000034

08002938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_GetTick+0x18>)
 800293e:	447a      	add	r2, pc
  return uwTick;
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_GetTick+0x1c>)
 8002942:	58d3      	ldr	r3, [r2, r3]
 8002944:	681b      	ldr	r3, [r3, #0]
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	17ffda4a 	.word	0x17ffda4a
 8002954:	00000034 	.word	0x00000034

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	4c0f      	ldr	r4, [pc, #60]	; (80029a0 <HAL_Delay+0x48>)
 8002962:	447c      	add	r4, pc
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffe8 	bl	8002938 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d006      	beq.n	8002984 <HAL_Delay+0x2c>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Delay+0x4c>)
 8002978:	58e3      	ldr	r3, [r4, r3]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002984:	bf00      	nop
 8002986:	f7ff ffd7 	bl	8002938 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	429a      	cmp	r2, r3
 8002994:	d8f7      	bhi.n	8002986 <HAL_Delay+0x2e>
  {
  }
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	17ffda26 	.word	0x17ffda26
 80029a4:	00000024 	.word	0x00000024

080029a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_SuspendTick+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <HAL_SuspendTick+0x18>)
 80029b2:	f023 0302 	bic.w	r3, r3, #2
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <HAL_ResumeTick+0x18>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a03      	ldr	r2, [pc, #12]	; (80029dc <HAL_ResumeTick+0x18>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0be      	b.n	8002b80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fbea 	bl	80021f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fb05 	bl	8003034 <ADC_ConversionStop_Disable>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8099 	bne.w	8002b6e <HAL_ADC_Init+0x18e>
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8095 	bne.w	8002b6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	f043 0202 	orr.w	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7b1b      	ldrb	r3, [r3, #12]
 8002a66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d003      	beq.n	8002a82 <HAL_ADC_Init+0xa2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_ADC_Init+0xa8>
 8002a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a86:	e000      	b.n	8002a8a <HAL_ADC_Init+0xaa>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7d1b      	ldrb	r3, [r3, #20]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d119      	bne.n	8002acc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7b1b      	ldrb	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	035a      	lsls	r2, r3, #13
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e00b      	b.n	8002acc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_ADC_Init+0x1a8>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d003      	beq.n	8002b06 <HAL_ADC_Init+0x126>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d104      	bne.n	8002b10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	051b      	lsls	r3, r3, #20
 8002b0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_ADC_Init+0x1ac>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d10b      	bne.n	8002b4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b4a:	e018      	b.n	8002b7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f023 0312 	bic.w	r3, r3, #18
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b6c:	e007      	b.n	8002b7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	f043 0210 	orr.w	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	ffe1f7fd 	.word	0xffe1f7fd
 8002b8c:	ff1f0efe 	.word	0xff1f0efe

08002b90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	4c6a      	ldr	r4, [pc, #424]	; (8002d48 <HAL_ADC_Start_DMA+0x1b8>)
 8002b9e:	447c      	add	r4, pc
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a65      	ldr	r2, [pc, #404]	; (8002d40 <HAL_ADC_Start_DMA+0x1b0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_ADC_Start_DMA+0x28>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a64      	ldr	r2, [pc, #400]	; (8002d44 <HAL_ADC_Start_DMA+0x1b4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d106      	bne.n	8002bc6 <HAL_ADC_Start_DMA+0x36>
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_ADC_Start_DMA+0x1b0>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 80b6 	bne.w	8002d32 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_Start_DMA+0x44>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0b1      	b.n	8002d38 <HAL_ADC_Start_DMA+0x1a8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f9cb 	bl	8002f78 <ADC_Enable>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 809d 	bne.w	8002d28 <HAL_ADC_Start_DMA+0x198>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_ADC_Start_DMA+0x1b4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_Start_DMA+0x88>
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_ADC_Start_DMA+0x1b0>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d115      	bne.n	8002c44 <HAL_ADC_Start_DMA+0xb4>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d026      	beq.n	8002c80 <HAL_ADC_Start_DMA+0xf0>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c42:	e01d      	b.n	8002c80 <HAL_ADC_Start_DMA+0xf0>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_ADC_Start_DMA+0x1b0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_Start_DMA+0xd4>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_ADC_Start_DMA+0x1b4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10d      	bne.n	8002c80 <HAL_ADC_Start_DMA+0xf0>
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_ADC_Start_DMA+0x1b0>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_ADC_Start_DMA+0xf0>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_ADC_Start_DMA+0x10a>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f023 0206 	bic.w	r2, r3, #6
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_Start_DMA+0x110>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <HAL_ADC_Start_DMA+0x1bc>)
 8002cae:	58a2      	ldr	r2, [r4, r2]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <HAL_ADC_Start_DMA+0x1c0>)
 8002cb8:	58a2      	ldr	r2, [r4, r2]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_ADC_Start_DMA+0x1c4>)
 8002cc2:	58a2      	ldr	r2, [r4, r2]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0202 	mvn.w	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a18      	ldr	r0, [r3, #32]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	334c      	adds	r3, #76	; 0x4c
 8002cea:	4619      	mov	r1, r3
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f000 fbe2 	bl	80034b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d02:	d108      	bne.n	8002d16 <HAL_ADC_Start_DMA+0x186>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d12:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d14:	e00f      	b.n	8002d36 <HAL_ADC_Start_DMA+0x1a6>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d24:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d26:	e006      	b.n	8002d36 <HAL_ADC_Start_DMA+0x1a6>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002d30:	e001      	b.n	8002d36 <HAL_ADC_Start_DMA+0x1a6>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	40012400 	.word	0x40012400
 8002d44:	40012800 	.word	0x40012800
 8002d48:	17ffd7ea 	.word	0x17ffd7ea
 8002d4c:	000000b0 	.word	0x000000b0
 8002d50:	00000004 	.word	0x00000004
 8002d54:	000000c8 	.word	0x000000c8

08002d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d7c:	b490      	push	{r4, r7}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	497a      	ldr	r1, [pc, #488]	; (8002f70 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d88:	4479      	add	r1, pc
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x24>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0dd      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1e0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d81c      	bhi.n	8002dea <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b05      	subs	r3, #5
 8002dc2:	221f      	movs	r2, #31
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4018      	ands	r0, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b05      	subs	r3, #5
 8002ddc:	fa04 f203 	lsl.w	r2, r4, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4302      	orrs	r2, r0
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
 8002de8:	e03c      	b.n	8002e64 <HAL_ADC_ConfigChannel+0xe8>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d81c      	bhi.n	8002e2c <HAL_ADC_ConfigChannel+0xb0>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	3b23      	subs	r3, #35	; 0x23
 8002e04:	221f      	movs	r2, #31
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	4018      	ands	r0, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681c      	ldr	r4, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b23      	subs	r3, #35	; 0x23
 8002e1e:	fa04 f203 	lsl.w	r2, r4, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4302      	orrs	r2, r0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2a:	e01b      	b.n	8002e64 <HAL_ADC_ConfigChannel+0xe8>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3b41      	subs	r3, #65	; 0x41
 8002e3e:	221f      	movs	r2, #31
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4018      	ands	r0, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681c      	ldr	r4, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b41      	subs	r3, #65	; 0x41
 8002e58:	fa04 f203 	lsl.w	r2, r4, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4302      	orrs	r2, r0
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d91c      	bls.n	8002ea6 <HAL_ADC_ConfigChannel+0x12a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68d8      	ldr	r0, [r3, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	2207      	movs	r2, #7
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4018      	ands	r0, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689c      	ldr	r4, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	3b1e      	subs	r3, #30
 8002e98:	fa04 f203 	lsl.w	r2, r4, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4302      	orrs	r2, r0
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	e019      	b.n	8002eda <HAL_ADC_ConfigChannel+0x15e>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6918      	ldr	r0, [r3, #16]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4018      	ands	r0, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689c      	ldr	r4, [r3, #8]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	fa04 f203 	lsl.w	r2, r4, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4302      	orrs	r2, r0
 8002ed8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d003      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x16e>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ee6:	2b11      	cmp	r3, #17
 8002ee8:	d133      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d126      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x1c6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d127      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1d6>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d11b      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1d6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_ADC_ConfigChannel+0x1f8>)
 8002f1c:	58cb      	ldr	r3, [r1, r3]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_ADC_ConfigChannel+0x1f0>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9a      	lsrs	r2, r3, #18
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f32:	e002      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1be>
          {
            wait_loop_index--;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f9      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1b8>
 8002f40:	e007      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1d6>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc90      	pop	{r4, r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40012400 	.word	0x40012400
 8002f6c:	431bde83 	.word	0x431bde83
 8002f70:	17ffd600 	.word	0x17ffd600
 8002f74:	0000001c 	.word	0x0000001c

08002f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	; (800302c <ADC_Enable+0xb4>)
 8002f82:	447a      	add	r2, pc
  uint32_t tickstart = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d041      	beq.n	800301e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f041 0101 	orr.w	r1, r1, #1
 8002fa8:	6099      	str	r1, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <ADC_Enable+0xb8>)
 8002fac:	58d3      	ldr	r3, [r2, r3]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <ADC_Enable+0xb0>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fba:	e002      	b.n	8002fc2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f9      	bne.n	8002fbc <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fc8:	f7ff fcb6 	bl	8002938 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fce:	e01f      	b.n	8003010 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd0:	f7ff fcb2 	bl	8002938 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d918      	bls.n	8003010 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d011      	beq.n	8003010 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d1d8      	bne.n	8002fd0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	431bde83 	.word	0x431bde83
 800302c:	17ffd406 	.word	0x17ffd406
 8003030:	0000001c 	.word	0x0000001c

08003034 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d12e      	bne.n	80030ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800305e:	f7ff fc6b 	bl	8002938 <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003064:	e01b      	b.n	800309e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003066:	f7ff fc67 	bl	8002938 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d914      	bls.n	800309e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10d      	bne.n	800309e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f043 0210 	orr.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e007      	b.n	80030ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d0dc      	beq.n	8003066 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d127      	bne.n	8003120 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030ea:	d115      	bne.n	8003118 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7fe fcbb 	bl	8001a94 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800311e:	e004      	b.n	800312a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff fe09 	bl	8002d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff fdf8 	bl	8002d6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <__NVIC_SetPriorityGrouping>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <__NVIC_EnableIRQ+0x34>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_DisableIRQ>:
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	2b00      	cmp	r3, #0
 8003230:	db12      	blt.n	8003258 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	490a      	ldr	r1, [pc, #40]	; (8003264 <__NVIC_DisableIRQ+0x44>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2001      	movs	r0, #1
 8003242:	fa00 f202 	lsl.w	r2, r0, r2
 8003246:	3320      	adds	r3, #32
 8003248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800324c:	f3bf 8f4f 	dsb	sy
}
 8003250:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003252:	f3bf 8f6f 	isb	sy
}
 8003256:	bf00      	nop
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	; (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <SysTick_Config>:
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f7ff ff90 	bl	8003268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff09 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff1e 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff90 	bl	80032bc <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5f 	bl	8003268 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff11 	bl	80031e8 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff1f 	bl	8003220 <__NVIC_DisableIRQ>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff94 	bl	8003320 <SysTick_Config>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e043      	b.n	80034a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_DMA_Init+0xa8>)
 8003422:	4413      	add	r3, r2
 8003424:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <HAL_DMA_Init+0xac>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	009a      	lsls	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_DMA_Init+0xb0>)
 8003436:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800344e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003452:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	bffdfff8 	.word	0xbffdfff8
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	40020000 	.word	0x40020000

080034b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_DMA_Start_IT+0x20>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e04b      	b.n	8003570 <HAL_DMA_Start_IT+0xb8>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d13a      	bne.n	8003562 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f9eb 	bl	80038ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 020e 	orr.w	r2, r2, #14
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e00f      	b.n	8003550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 020a 	orr.w	r2, r2, #10
 800354e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e005      	b.n	800356e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d008      	beq.n	80035a2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2204      	movs	r2, #4
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e020      	b.n	80035e4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 020e 	bic.w	r2, r2, #14
 80035b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d005      	beq.n	8003614 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2204      	movs	r2, #4
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	e051      	b.n	80036b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 020e 	bic.w	r2, r2, #14
 8003622:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_DMA_Abort_IT+0xd4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d029      	beq.n	8003692 <HAL_DMA_Abort_IT+0xa2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <HAL_DMA_Abort_IT+0xd8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d022      	beq.n	800368e <HAL_DMA_Abort_IT+0x9e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_DMA_Abort_IT+0xdc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01a      	beq.n	8003688 <HAL_DMA_Abort_IT+0x98>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <HAL_DMA_Abort_IT+0xe0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d012      	beq.n	8003682 <HAL_DMA_Abort_IT+0x92>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_DMA_Abort_IT+0xe4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00a      	beq.n	800367c <HAL_DMA_Abort_IT+0x8c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <HAL_DMA_Abort_IT+0xe8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <HAL_DMA_Abort_IT+0x86>
 8003670:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003674:	e00e      	b.n	8003694 <HAL_DMA_Abort_IT+0xa4>
 8003676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800367a:	e00b      	b.n	8003694 <HAL_DMA_Abort_IT+0xa4>
 800367c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003680:	e008      	b.n	8003694 <HAL_DMA_Abort_IT+0xa4>
 8003682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003686:	e005      	b.n	8003694 <HAL_DMA_Abort_IT+0xa4>
 8003688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800368c:	e002      	b.n	8003694 <HAL_DMA_Abort_IT+0xa4>
 800368e:	2310      	movs	r3, #16
 8003690:	e000      	b.n	8003694 <HAL_DMA_Abort_IT+0xa4>
 8003692:	2301      	movs	r3, #1
 8003694:	4a11      	ldr	r2, [pc, #68]	; (80036dc <HAL_DMA_Abort_IT+0xec>)
 8003696:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
    } 
  }
  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40020008 	.word	0x40020008
 80036c8:	4002001c 	.word	0x4002001c
 80036cc:	40020030 	.word	0x40020030
 80036d0:	40020044 	.word	0x40020044
 80036d4:	40020058 	.word	0x40020058
 80036d8:	4002006c 	.word	0x4002006c
 80036dc:	40020000 	.word	0x40020000

080036e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2204      	movs	r2, #4
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d04f      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d029      	beq.n	800378e <HAL_DMA_IRQHandler+0xae>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a65      	ldr	r2, [pc, #404]	; (80038d4 <HAL_DMA_IRQHandler+0x1f4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_IRQHandler+0xaa>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <HAL_DMA_IRQHandler+0x1f8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01a      	beq.n	8003784 <HAL_DMA_IRQHandler+0xa4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a62      	ldr	r2, [pc, #392]	; (80038dc <HAL_DMA_IRQHandler+0x1fc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d012      	beq.n	800377e <HAL_DMA_IRQHandler+0x9e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a60      	ldr	r2, [pc, #384]	; (80038e0 <HAL_DMA_IRQHandler+0x200>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00a      	beq.n	8003778 <HAL_DMA_IRQHandler+0x98>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a5f      	ldr	r2, [pc, #380]	; (80038e4 <HAL_DMA_IRQHandler+0x204>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d102      	bne.n	8003772 <HAL_DMA_IRQHandler+0x92>
 800376c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003770:	e00e      	b.n	8003790 <HAL_DMA_IRQHandler+0xb0>
 8003772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003776:	e00b      	b.n	8003790 <HAL_DMA_IRQHandler+0xb0>
 8003778:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800377c:	e008      	b.n	8003790 <HAL_DMA_IRQHandler+0xb0>
 800377e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003782:	e005      	b.n	8003790 <HAL_DMA_IRQHandler+0xb0>
 8003784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003788:	e002      	b.n	8003790 <HAL_DMA_IRQHandler+0xb0>
 800378a:	2340      	movs	r3, #64	; 0x40
 800378c:	e000      	b.n	8003790 <HAL_DMA_IRQHandler+0xb0>
 800378e:	2304      	movs	r3, #4
 8003790:	4a55      	ldr	r2, [pc, #340]	; (80038e8 <HAL_DMA_IRQHandler+0x208>)
 8003792:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8094 	beq.w	80038c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	e08e      	b.n	80038c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	2202      	movs	r2, #2
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d056      	beq.n	8003866 <HAL_DMA_IRQHandler+0x186>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d051      	beq.n	8003866 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020a 	bic.w	r2, r2, #10
 80037de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <HAL_DMA_IRQHandler+0x1f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d029      	beq.n	8003846 <HAL_DMA_IRQHandler+0x166>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a37      	ldr	r2, [pc, #220]	; (80038d4 <HAL_DMA_IRQHandler+0x1f4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <HAL_DMA_IRQHandler+0x162>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a35      	ldr	r2, [pc, #212]	; (80038d8 <HAL_DMA_IRQHandler+0x1f8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01a      	beq.n	800383c <HAL_DMA_IRQHandler+0x15c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a34      	ldr	r2, [pc, #208]	; (80038dc <HAL_DMA_IRQHandler+0x1fc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d012      	beq.n	8003836 <HAL_DMA_IRQHandler+0x156>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <HAL_DMA_IRQHandler+0x200>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00a      	beq.n	8003830 <HAL_DMA_IRQHandler+0x150>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a31      	ldr	r2, [pc, #196]	; (80038e4 <HAL_DMA_IRQHandler+0x204>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d102      	bne.n	800382a <HAL_DMA_IRQHandler+0x14a>
 8003824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003828:	e00e      	b.n	8003848 <HAL_DMA_IRQHandler+0x168>
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	e00b      	b.n	8003848 <HAL_DMA_IRQHandler+0x168>
 8003830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003834:	e008      	b.n	8003848 <HAL_DMA_IRQHandler+0x168>
 8003836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800383a:	e005      	b.n	8003848 <HAL_DMA_IRQHandler+0x168>
 800383c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003840:	e002      	b.n	8003848 <HAL_DMA_IRQHandler+0x168>
 8003842:	2320      	movs	r3, #32
 8003844:	e000      	b.n	8003848 <HAL_DMA_IRQHandler+0x168>
 8003846:	2302      	movs	r3, #2
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_DMA_IRQHandler+0x208>)
 800384a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d034      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003864:	e02f      	b.n	80038c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2208      	movs	r2, #8
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d028      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x1e8>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 020e 	bic.w	r2, r2, #14
 800388e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
    }
  }
  return;
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
}
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40020008 	.word	0x40020008
 80038d4:	4002001c 	.word	0x4002001c
 80038d8:	40020030 	.word	0x40020030
 80038dc:	40020044 	.word	0x40020044
 80038e0:	40020058 	.word	0x40020058
 80038e4:	4002006c 	.word	0x4002006c
 80038e8:	40020000 	.word	0x40020000

080038ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b10      	cmp	r3, #16
 8003918:	d108      	bne.n	800392c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800392a:	e007      	b.n	800393c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
	...

08003948 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	e9c7 2300 	strd	r2, r3, [r7]
 8003956:	4e36      	ldr	r6, [pc, #216]	; (8003a30 <HAL_FLASH_Program+0xe8>)
 8003958:	447e      	add	r6, pc
  HAL_StatusTypeDef status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003966:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <HAL_FLASH_Program+0xec>)
 8003968:	58f3      	ldr	r3, [r6, r3]
 800396a:	7e1b      	ldrb	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_FLASH_Program+0x2c>
 8003970:	2302      	movs	r3, #2
 8003972:	e057      	b.n	8003a24 <HAL_FLASH_Program+0xdc>
 8003974:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_FLASH_Program+0xec>)
 8003976:	58f3      	ldr	r3, [r6, r3]
 8003978:	2201      	movs	r2, #1
 800397a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800397c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003980:	f000 f8c0 	bl	8003b04 <FLASH_WaitForLastOperation>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d145      	bne.n	8003a1a <HAL_FLASH_Program+0xd2>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <HAL_FLASH_Program+0x52>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	757b      	strb	r3, [r7, #21]
 8003998:	e007      	b.n	80039aa <HAL_FLASH_Program+0x62>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d102      	bne.n	80039a6 <HAL_FLASH_Program+0x5e>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80039a0:	2302      	movs	r3, #2
 80039a2:	757b      	strb	r3, [r7, #21]
 80039a4:	e001      	b.n	80039aa <HAL_FLASH_Program+0x62>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80039a6:	2304      	movs	r3, #4
 80039a8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	75bb      	strb	r3, [r7, #22]
 80039ae:	e02e      	b.n	8003a0e <HAL_FLASH_Program+0xc6>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80039b0:	7dbb      	ldrb	r3, [r7, #22]
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	eb02 0e03 	add.w	lr, r2, r3
 80039ba:	7dbb      	ldrb	r3, [r7, #22]
 80039bc:	0119      	lsls	r1, r3, #4
 80039be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c2:	f1c1 0c20 	rsb	ip, r1, #32
 80039c6:	f1a1 0020 	sub.w	r0, r1, #32
 80039ca:	fa22 f401 	lsr.w	r4, r2, r1
 80039ce:	fa03 fc0c 	lsl.w	ip, r3, ip
 80039d2:	ea44 040c 	orr.w	r4, r4, ip
 80039d6:	fa23 f000 	lsr.w	r0, r3, r0
 80039da:	4304      	orrs	r4, r0
 80039dc:	fa23 f501 	lsr.w	r5, r3, r1
 80039e0:	b2a3      	uxth	r3, r4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4670      	mov	r0, lr
 80039e6:	f000 f86d 	bl	8003ac4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039ee:	f000 f889 	bl	8003b04 <FLASH_WaitForLastOperation>
 80039f2:	4603      	mov	r3, r0
 80039f4:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <HAL_FLASH_Program+0xe4>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <HAL_FLASH_Program+0xe4>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_FLASH_Program+0xd0>
    for (index = 0U; index < nbiterations; index++)
 8003a08:	7dbb      	ldrb	r3, [r7, #22]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	75bb      	strb	r3, [r7, #22]
 8003a0e:	7dba      	ldrb	r2, [r7, #22]
 8003a10:	7d7b      	ldrb	r3, [r7, #21]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d3cc      	bcc.n	80039b0 <HAL_FLASH_Program+0x68>
 8003a16:	e000      	b.n	8003a1a <HAL_FLASH_Program+0xd2>
      {
        break;
 8003a18:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_FLASH_Program+0xec>)
 8003a1c:	58f3      	ldr	r3, [r6, r3]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	761a      	strb	r2, [r3, #24]

  return status;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	17ffca30 	.word	0x17ffca30
 8003a34:	00000038 	.word	0x00000038

08003a38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_FLASH_Unlock+0x40>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_FLASH_Unlock+0x40>)
 8003a50:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_FLASH_Unlock+0x44>)
 8003a52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_FLASH_Unlock+0x40>)
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_FLASH_Unlock+0x48>)
 8003a58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_FLASH_Unlock+0x40>)
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	45670123 	.word	0x45670123
 8003a80:	cdef89ab 	.word	0xcdef89ab

08003a84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_FLASH_Lock+0x1c>)
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_FLASH_Lock+0x1c>)
 8003a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000

08003aa4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_FLASH_GetError+0x18>)
 8003aaa:	447a      	add	r2, pc
   return pFlash.ErrorCode;
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_FLASH_GetError+0x1c>)
 8003aae:	58d3      	ldr	r3, [r2, r3]
 8003ab0:	69db      	ldr	r3, [r3, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	17ffc8de 	.word	0x17ffc8de
 8003ac0:	00000038 	.word	0x00000038

08003ac4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <FLASH_Program_HalfWord+0x38>)
 8003ad2:	447a      	add	r2, pc
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <FLASH_Program_HalfWord+0x3c>)
 8003ad6:	58d3      	ldr	r3, [r2, r3]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <FLASH_Program_HalfWord+0x34>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <FLASH_Program_HalfWord+0x34>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	801a      	strh	r2, [r3, #0]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40022000 	.word	0x40022000
 8003afc:	17ffc8b6 	.word	0x17ffc8b6
 8003b00:	00000038 	.word	0x00000038

08003b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7fe ff14 	bl	8002938 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003b12:	e010      	b.n	8003b36 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d00c      	beq.n	8003b36 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <FLASH_WaitForLastOperation+0x2e>
 8003b22:	f7fe ff09 	bl	8002938 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d201      	bcs.n	8003b36 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e025      	b.n	8003b82 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <FLASH_WaitForLastOperation+0x88>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e8      	bne.n	8003b14 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <FLASH_WaitForLastOperation+0x88>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <FLASH_WaitForLastOperation+0x88>)
 8003b50:	2220      	movs	r2, #32
 8003b52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <FLASH_WaitForLastOperation+0x88>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <FLASH_WaitForLastOperation+0x88>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <FLASH_WaitForLastOperation+0x88>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b78:	f000 f80a 	bl	8003b90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000

08003b90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <FLASH_SetErrorCode+0xac>)
 8003b98:	447b      	add	r3, pc
  uint32_t flags = 0U;
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	607a      	str	r2, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b9e:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	f002 0210 	and.w	r2, r2, #16
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d00b      	beq.n	8003bc2 <FLASH_SetErrorCode+0x32>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <FLASH_SetErrorCode+0xb0>)
 8003bac:	589a      	ldr	r2, [r3, r2]
 8003bae:	69d2      	ldr	r2, [r2, #28]
 8003bb0:	f042 0102 	orr.w	r1, r2, #2
 8003bb4:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <FLASH_SetErrorCode+0xb0>)
 8003bb6:	589a      	ldr	r2, [r3, r2]
 8003bb8:	61d1      	str	r1, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	f042 0210 	orr.w	r2, r2, #16
 8003bc0:	607a      	str	r2, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003bc2:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	f002 0204 	and.w	r2, r2, #4
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d00b      	beq.n	8003be6 <FLASH_SetErrorCode+0x56>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <FLASH_SetErrorCode+0xb0>)
 8003bd0:	589a      	ldr	r2, [r3, r2]
 8003bd2:	69d2      	ldr	r2, [r2, #28]
 8003bd4:	f042 0101 	orr.w	r1, r2, #1
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <FLASH_SetErrorCode+0xb0>)
 8003bda:	589a      	ldr	r2, [r3, r2]
 8003bdc:	61d1      	str	r1, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	f042 0204 	orr.w	r2, r2, #4
 8003be4:	607a      	str	r2, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003be6:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003be8:	69d2      	ldr	r2, [r2, #28]
 8003bea:	f002 0201 	and.w	r2, r2, #1
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d00d      	beq.n	8003c0e <FLASH_SetErrorCode+0x7e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <FLASH_SetErrorCode+0xb0>)
 8003bf4:	589a      	ldr	r2, [r3, r2]
 8003bf6:	69d2      	ldr	r2, [r2, #28]
 8003bf8:	f042 0204 	orr.w	r2, r2, #4
 8003bfc:	4910      	ldr	r1, [pc, #64]	; (8003c40 <FLASH_SetErrorCode+0xb0>)
 8003bfe:	585b      	ldr	r3, [r3, r1]
 8003c00:	61da      	str	r2, [r3, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f240 1201 	movw	r2, #257	; 0x101
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d106      	bne.n	8003c26 <FLASH_SetErrorCode+0x96>
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	61d3      	str	r3, [r2, #28]
}  
 8003c24:	e002      	b.n	8003c2c <FLASH_SetErrorCode+0x9c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c26:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <FLASH_SetErrorCode+0xa8>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60d3      	str	r3, [r2, #12]
}  
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	17ffc7f0 	.word	0x17ffc7f0
 8003c40:	00000038 	.word	0x00000038

08003c44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	4c34      	ldr	r4, [pc, #208]	; (8003d20 <HAL_FLASHEx_Erase+0xdc>)
 8003c50:	447c      	add	r4, pc
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <HAL_FLASHEx_Erase+0xe0>)
 8003c5c:	58e3      	ldr	r3, [r4, r3]
 8003c5e:	7e1b      	ldrb	r3, [r3, #24]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_FLASHEx_Erase+0x24>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e055      	b.n	8003d14 <HAL_FLASHEx_Erase+0xd0>
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_FLASHEx_Erase+0xe0>)
 8003c6a:	58e3      	ldr	r3, [r4, r3]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d116      	bne.n	8003ca6 <HAL_FLASHEx_Erase+0x62>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c7c:	f7ff ff42 	bl	8003b04 <FLASH_WaitForLastOperation>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d141      	bne.n	8003d0a <HAL_FLASHEx_Erase+0xc6>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f000 f84e 	bl	8003d28 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c90:	f7ff ff38 	bl	8003b04 <FLASH_WaitForLastOperation>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_FLASHEx_Erase+0xd8>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_FLASHEx_Erase+0xd8>)
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	6113      	str	r3, [r2, #16]
 8003ca4:	e031      	b.n	8003d0a <HAL_FLASHEx_Erase+0xc6>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003ca6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003caa:	f7ff ff2b 	bl	8003b04 <FLASH_WaitForLastOperation>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d12a      	bne.n	8003d0a <HAL_FLASHEx_Erase+0xc6>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cba:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	e019      	b.n	8003cf8 <HAL_FLASHEx_Erase+0xb4>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003cc4:	68b8      	ldr	r0, [r7, #8]
 8003cc6:	f000 f851 	bl	8003d6c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cce:	f7ff ff19 	bl	8003b04 <FLASH_WaitForLastOperation>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_FLASHEx_Erase+0xd8>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <HAL_FLASHEx_Erase+0xd8>)
 8003cdc:	f023 0302 	bic.w	r3, r3, #2
 8003ce0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_FLASHEx_Erase+0xac>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	601a      	str	r2, [r3, #0]
            break;
 8003cee:	e00c      	b.n	8003d0a <HAL_FLASHEx_Erase+0xc6>
            address += FLASH_PAGE_SIZE)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	029a      	lsls	r2, r3, #10
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3dc      	bcc.n	8003cc4 <HAL_FLASHEx_Erase+0x80>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_FLASHEx_Erase+0xe0>)
 8003d0c:	58e3      	ldr	r3, [r4, r3]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	761a      	strb	r2, [r3, #24]

  return status;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd90      	pop	{r4, r7, pc}
 8003d1c:	40022000 	.word	0x40022000
 8003d20:	17ffc738 	.word	0x17ffc738
 8003d24:	00000038 	.word	0x00000038

08003d28 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <FLASH_MassErase+0x3c>)
 8003d32:	447a      	add	r2, pc
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <FLASH_MassErase+0x40>)
 8003d36:	58d3      	ldr	r3, [r2, r3]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <FLASH_MassErase+0x38>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <FLASH_MassErase+0x38>)
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <FLASH_MassErase+0x38>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <FLASH_MassErase+0x38>)
 8003d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40022000 	.word	0x40022000
 8003d64:	17ffc656 	.word	0x17ffc656
 8003d68:	00000038 	.word	0x00000038

08003d6c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	4a0d      	ldr	r2, [pc, #52]	; (8003dac <FLASH_PageErase+0x40>)
 8003d76:	447a      	add	r2, pc
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <FLASH_PageErase+0x44>)
 8003d7a:	58d3      	ldr	r3, [r2, r3]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <FLASH_PageErase+0x3c>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <FLASH_PageErase+0x3c>)
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <FLASH_PageErase+0x3c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <FLASH_PageErase+0x3c>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <FLASH_PageErase+0x3c>)
 8003d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d9c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40022000 	.word	0x40022000
 8003dac:	17ffc612 	.word	0x17ffc612
 8003db0:	00000038 	.word	0x00000038

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b08b      	sub	sp, #44	; 0x2c
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	e16b      	b.n	80040a0 <HAL_GPIO_Init+0x2ec>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dc8:	2201      	movs	r2, #1
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 815a 	bne.w	800409a <HAL_GPIO_Init+0x2e6>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a9b      	ldr	r2, [pc, #620]	; (8004058 <HAL_GPIO_Init+0x2a4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d060      	beq.n	8003eb2 <HAL_GPIO_Init+0xfe>
 8003df0:	4a99      	ldr	r2, [pc, #612]	; (8004058 <HAL_GPIO_Init+0x2a4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d877      	bhi.n	8003ee6 <HAL_GPIO_Init+0x132>
 8003df6:	4a99      	ldr	r2, [pc, #612]	; (800405c <HAL_GPIO_Init+0x2a8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d05a      	beq.n	8003eb2 <HAL_GPIO_Init+0xfe>
 8003dfc:	4a97      	ldr	r2, [pc, #604]	; (800405c <HAL_GPIO_Init+0x2a8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d871      	bhi.n	8003ee6 <HAL_GPIO_Init+0x132>
 8003e02:	4a97      	ldr	r2, [pc, #604]	; (8004060 <HAL_GPIO_Init+0x2ac>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d054      	beq.n	8003eb2 <HAL_GPIO_Init+0xfe>
 8003e08:	4a95      	ldr	r2, [pc, #596]	; (8004060 <HAL_GPIO_Init+0x2ac>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d86b      	bhi.n	8003ee6 <HAL_GPIO_Init+0x132>
 8003e0e:	4a95      	ldr	r2, [pc, #596]	; (8004064 <HAL_GPIO_Init+0x2b0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04e      	beq.n	8003eb2 <HAL_GPIO_Init+0xfe>
 8003e14:	4a93      	ldr	r2, [pc, #588]	; (8004064 <HAL_GPIO_Init+0x2b0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d865      	bhi.n	8003ee6 <HAL_GPIO_Init+0x132>
 8003e1a:	4a93      	ldr	r2, [pc, #588]	; (8004068 <HAL_GPIO_Init+0x2b4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d048      	beq.n	8003eb2 <HAL_GPIO_Init+0xfe>
 8003e20:	4a91      	ldr	r2, [pc, #580]	; (8004068 <HAL_GPIO_Init+0x2b4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d85f      	bhi.n	8003ee6 <HAL_GPIO_Init+0x132>
 8003e26:	2b12      	cmp	r3, #18
 8003e28:	d82c      	bhi.n	8003e84 <HAL_GPIO_Init+0xd0>
 8003e2a:	2b12      	cmp	r3, #18
 8003e2c:	d85b      	bhi.n	8003ee6 <HAL_GPIO_Init+0x132>
 8003e2e:	a202      	add	r2, pc, #8	; (adr r2, 8003e38 <HAL_GPIO_Init+0x84>)
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	441a      	add	r2, r3
 8003e36:	4710      	bx	r2
 8003e38:	0000007b 	.word	0x0000007b
 8003e3c:	00000055 	.word	0x00000055
 8003e40:	00000067 	.word	0x00000067
 8003e44:	000000a9 	.word	0x000000a9
 8003e48:	000000af 	.word	0x000000af
 8003e4c:	000000af 	.word	0x000000af
 8003e50:	000000af 	.word	0x000000af
 8003e54:	000000af 	.word	0x000000af
 8003e58:	000000af 	.word	0x000000af
 8003e5c:	000000af 	.word	0x000000af
 8003e60:	000000af 	.word	0x000000af
 8003e64:	000000af 	.word	0x000000af
 8003e68:	000000af 	.word	0x000000af
 8003e6c:	000000af 	.word	0x000000af
 8003e70:	000000af 	.word	0x000000af
 8003e74:	000000af 	.word	0x000000af
 8003e78:	000000af 	.word	0x000000af
 8003e7c:	0000005d 	.word	0x0000005d
 8003e80:	00000071 	.word	0x00000071
 8003e84:	4a79      	ldr	r2, [pc, #484]	; (800406c <HAL_GPIO_Init+0x2b8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_GPIO_Init+0xfe>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e8a:	e02c      	b.n	8003ee6 <HAL_GPIO_Init+0x132>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	623b      	str	r3, [r7, #32]
          break;
 8003e92:	e029      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	623b      	str	r3, [r7, #32]
          break;
 8003e9c:	e024      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	623b      	str	r3, [r7, #32]
          break;
 8003ea6:	e01f      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	330c      	adds	r3, #12
 8003eae:	623b      	str	r3, [r7, #32]
          break;
 8003eb0:	e01a      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <HAL_GPIO_Init+0x10c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eba:	2304      	movs	r3, #4
 8003ebc:	623b      	str	r3, [r7, #32]
          break;
 8003ebe:	e013      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_GPIO_Init+0x120>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ec8:	2308      	movs	r3, #8
 8003eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	611a      	str	r2, [r3, #16]
          break;
 8003ed2:	e009      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	615a      	str	r2, [r3, #20]
          break;
 8003ede:	e003      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	623b      	str	r3, [r7, #32]
          break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_GPIO_Init+0x134>
          break;
 8003ee6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2bff      	cmp	r3, #255	; 0xff
 8003eec:	d801      	bhi.n	8003ef2 <HAL_GPIO_Init+0x13e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	e001      	b.n	8003ef6 <HAL_GPIO_Init+0x142>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2bff      	cmp	r3, #255	; 0xff
 8003efc:	d802      	bhi.n	8003f04 <HAL_GPIO_Init+0x150>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	e002      	b.n	8003f0a <HAL_GPIO_Init+0x156>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	3b08      	subs	r3, #8
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	210f      	movs	r1, #15
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	6a39      	ldr	r1, [r7, #32]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80b1 	beq.w	800409a <HAL_GPIO_Init+0x2e6>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f38:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <HAL_GPIO_Init+0x2bc>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a4c      	ldr	r2, [pc, #304]	; (8004070 <HAL_GPIO_Init+0x2bc>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6193      	str	r3, [r2, #24]
 8003f44:	4b4a      	ldr	r3, [pc, #296]	; (8004070 <HAL_GPIO_Init+0x2bc>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f50:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a40      	ldr	r2, [pc, #256]	; (8004078 <HAL_GPIO_Init+0x2c4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <HAL_GPIO_Init+0x1f0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_GPIO_Init+0x2c8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00d      	beq.n	8003fa0 <HAL_GPIO_Init+0x1ec>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3e      	ldr	r2, [pc, #248]	; (8004080 <HAL_GPIO_Init+0x2cc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <HAL_GPIO_Init+0x1e8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3d      	ldr	r2, [pc, #244]	; (8004084 <HAL_GPIO_Init+0x2d0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_GPIO_Init+0x1e4>
 8003f94:	2303      	movs	r3, #3
 8003f96:	e006      	b.n	8003fa6 <HAL_GPIO_Init+0x1f2>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	e004      	b.n	8003fa6 <HAL_GPIO_Init+0x1f2>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e002      	b.n	8003fa6 <HAL_GPIO_Init+0x1f2>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_GPIO_Init+0x1f2>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	f002 0203 	and.w	r2, r2, #3
 8003fac:	0092      	lsls	r2, r2, #2
 8003fae:	4093      	lsls	r3, r2
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fb6:	492f      	ldr	r1, [pc, #188]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d006      	beq.n	8003fde <HAL_GPIO_Init+0x22a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	492c      	ldr	r1, [pc, #176]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]
 8003fdc:	e006      	b.n	8003fec <HAL_GPIO_Init+0x238>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	4928      	ldr	r1, [pc, #160]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d006      	beq.n	8004006 <HAL_GPIO_Init+0x252>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ff8:	4b23      	ldr	r3, [pc, #140]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4922      	ldr	r1, [pc, #136]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e006      	b.n	8004014 <HAL_GPIO_Init+0x260>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	43db      	mvns	r3, r3
 800400e:	491e      	ldr	r1, [pc, #120]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8004010:	4013      	ands	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	4918      	ldr	r1, [pc, #96]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
 800402c:	e006      	b.n	800403c <HAL_GPIO_Init+0x288>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	43db      	mvns	r3, r3
 8004036:	4914      	ldr	r1, [pc, #80]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8004038:	4013      	ands	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d021      	beq.n	800408c <HAL_GPIO_Init+0x2d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	490e      	ldr	r1, [pc, #56]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e021      	b.n	800409a <HAL_GPIO_Init+0x2e6>
 8004056:	bf00      	nop
 8004058:	10320000 	.word	0x10320000
 800405c:	10310000 	.word	0x10310000
 8004060:	10220000 	.word	0x10220000
 8004064:	10210000 	.word	0x10210000
 8004068:	10120000 	.word	0x10120000
 800406c:	10110000 	.word	0x10110000
 8004070:	40021000 	.word	0x40021000
 8004074:	40010000 	.word	0x40010000
 8004078:	40010800 	.word	0x40010800
 800407c:	40010c00 	.word	0x40010c00
 8004080:	40011000 	.word	0x40011000
 8004084:	40011400 	.word	0x40011400
 8004088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_GPIO_Init+0x308>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	43db      	mvns	r3, r3
 8004094:	4909      	ldr	r1, [pc, #36]	; (80040bc <HAL_GPIO_Init+0x308>)
 8004096:	4013      	ands	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	3301      	adds	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f ae8c 	bne.w	8003dc8 <HAL_GPIO_Init+0x14>
  }
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	372c      	adds	r7, #44	; 0x2c
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40010400 	.word	0x40010400

080040c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	e001      	b.n	80040e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	807b      	strh	r3, [r7, #2]
 80040fa:	4613      	mov	r3, r2
 80040fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040fe:	787b      	ldrb	r3, [r7, #1]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800410a:	e003      	b.n	8004114 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	041a      	lsls	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	611a      	str	r2, [r3, #16]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	460b      	mov	r3, r1
 8004128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004130:	887a      	ldrh	r2, [r7, #2]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	041a      	lsls	r2, r3, #16
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43d9      	mvns	r1, r3
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	400b      	ands	r3, r1
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	611a      	str	r2, [r3, #16]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d006      	beq.n	8004174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fc10 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e12b      	b.n	80043ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe f89e 	bl	80022e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041e4:	f001 f9c4 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4a81      	ldr	r2, [pc, #516]	; (80043f4 <HAL_I2C_Init+0x274>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d807      	bhi.n	8004204 <HAL_I2C_Init+0x84>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a80      	ldr	r2, [pc, #512]	; (80043f8 <HAL_I2C_Init+0x278>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bf94      	ite	ls
 80041fc:	2301      	movls	r3, #1
 80041fe:	2300      	movhi	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e006      	b.n	8004212 <HAL_I2C_Init+0x92>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a7d      	ldr	r2, [pc, #500]	; (80043fc <HAL_I2C_Init+0x27c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	bf94      	ite	ls
 800420c:	2301      	movls	r3, #1
 800420e:	2300      	movhi	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0e7      	b.n	80043ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a78      	ldr	r2, [pc, #480]	; (8004400 <HAL_I2C_Init+0x280>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	0c9b      	lsrs	r3, r3, #18
 8004224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a6a      	ldr	r2, [pc, #424]	; (80043f4 <HAL_I2C_Init+0x274>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d802      	bhi.n	8004254 <HAL_I2C_Init+0xd4>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3301      	adds	r3, #1
 8004252:	e009      	b.n	8004268 <HAL_I2C_Init+0xe8>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	4a69      	ldr	r2, [pc, #420]	; (8004404 <HAL_I2C_Init+0x284>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	099b      	lsrs	r3, r3, #6
 8004266:	3301      	adds	r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	430b      	orrs	r3, r1
 800426e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800427a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	495c      	ldr	r1, [pc, #368]	; (80043f4 <HAL_I2C_Init+0x274>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d819      	bhi.n	80042bc <HAL_I2C_Init+0x13c>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1e59      	subs	r1, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fbb1 f3f3 	udiv	r3, r1, r3
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800429c:	400b      	ands	r3, r1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_I2C_Init+0x138>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1e59      	subs	r1, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b6:	e051      	b.n	800435c <HAL_I2C_Init+0x1dc>
 80042b8:	2304      	movs	r3, #4
 80042ba:	e04f      	b.n	800435c <HAL_I2C_Init+0x1dc>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d111      	bne.n	80042e8 <HAL_I2C_Init+0x168>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1e58      	subs	r0, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	440b      	add	r3, r1
 80042d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e012      	b.n	800430e <HAL_I2C_Init+0x18e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1e58      	subs	r0, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	0099      	lsls	r1, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Init+0x196>
 8004312:	2301      	movs	r3, #1
 8004314:	e022      	b.n	800435c <HAL_I2C_Init+0x1dc>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10e      	bne.n	800433c <HAL_I2C_Init+0x1bc>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e58      	subs	r0, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	440b      	add	r3, r1
 800432c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004330:	3301      	adds	r3, #1
 8004332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433a:	e00f      	b.n	800435c <HAL_I2C_Init+0x1dc>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e58      	subs	r0, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	0099      	lsls	r1, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004352:	3301      	adds	r3, #1
 8004354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	6809      	ldr	r1, [r1, #0]
 8004360:	4313      	orrs	r3, r2
 8004362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800438a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6911      	ldr	r1, [r2, #16]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68d2      	ldr	r2, [r2, #12]
 8004396:	4311      	orrs	r1, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	430b      	orrs	r3, r1
 800439e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	000186a0 	.word	0x000186a0
 80043f8:	001e847f 	.word	0x001e847f
 80043fc:	003d08ff 	.word	0x003d08ff
 8004400:	431bde83 	.word	0x431bde83
 8004404:	10624dd3 	.word	0x10624dd3

08004408 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	461a      	mov	r2, r3
 8004414:	460b      	mov	r3, r1
 8004416:	817b      	strh	r3, [r7, #10]
 8004418:	4613      	mov	r3, r2
 800441a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7fe fa8c 	bl	8002938 <HAL_GetTick>
 8004420:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b20      	cmp	r3, #32
 800442c:	f040 80e0 	bne.w	80045f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2319      	movs	r3, #25
 8004436:	2201      	movs	r2, #1
 8004438:	4970      	ldr	r1, [pc, #448]	; (80045fc <HAL_I2C_Master_Transmit+0x1f4>)
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa92 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004446:	2302      	movs	r3, #2
 8004448:	e0d3      	b.n	80045f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_I2C_Master_Transmit+0x50>
 8004454:	2302      	movs	r3, #2
 8004456:	e0cc      	b.n	80045f2 <HAL_I2C_Master_Transmit+0x1ea>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b01      	cmp	r3, #1
 800446c:	d007      	beq.n	800447e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2221      	movs	r2, #33	; 0x21
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2210      	movs	r2, #16
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	893a      	ldrh	r2, [r7, #8]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a50      	ldr	r2, [pc, #320]	; (8004600 <HAL_I2C_Master_Transmit+0x1f8>)
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044c0:	8979      	ldrh	r1, [r7, #10]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f9ca 	bl	8004860 <I2C_MasterRequestWrite>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e08d      	b.n	80045f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044ec:	e066      	b.n	80045bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	6a39      	ldr	r1, [r7, #32]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fb50 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b04      	cmp	r3, #4
 8004504:	d107      	bne.n	8004516 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e06b      	b.n	80045f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_I2C_Master_Transmit+0x188>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d017      	beq.n	8004590 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	6a39      	ldr	r1, [r7, #32]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fb47 	bl	8004c28 <I2C_WaitOnBTFFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00d      	beq.n	80045bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d107      	bne.n	80045b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e01a      	b.n	80045f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d194      	bne.n	80044ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	00100002 	.word	0x00100002
 8004600:	ffff0000 	.word	0xffff0000

08004604 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	460b      	mov	r3, r1
 8004612:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004614:	f7fe f990 	bl	8002938 <HAL_GetTick>
 8004618:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b20      	cmp	r3, #32
 8004628:	f040 8111 	bne.w	800484e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2319      	movs	r3, #25
 8004632:	2201      	movs	r2, #1
 8004634:	4988      	ldr	r1, [pc, #544]	; (8004858 <HAL_I2C_IsDeviceReady+0x254>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f994 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
 8004644:	e104      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_I2C_IsDeviceReady+0x50>
 8004650:	2302      	movs	r3, #2
 8004652:	e0fd      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d007      	beq.n	800467a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2224      	movs	r2, #36	; 0x24
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a70      	ldr	r2, [pc, #448]	; (800485c <HAL_I2C_IsDeviceReady+0x258>)
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f952 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d103      	bne.n	80046de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0b6      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fe f921 	bl	8002938 <HAL_GetTick>
 80046f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004726:	e025      	b.n	8004774 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004728:	f7fe f906 	bl	8002938 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d302      	bcc.n	800473e <HAL_I2C_IsDeviceReady+0x13a>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	22a0      	movs	r2, #160	; 0xa0
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2ba0      	cmp	r3, #160	; 0xa0
 800477e:	d005      	beq.n	800478c <HAL_I2C_IsDeviceReady+0x188>
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_I2C_IsDeviceReady+0x188>
 8004786:	7dbb      	ldrb	r3, [r7, #22]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0cd      	beq.n	8004728 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d129      	bne.n	80047f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2319      	movs	r3, #25
 80047ce:	2201      	movs	r2, #1
 80047d0:	4921      	ldr	r1, [pc, #132]	; (8004858 <HAL_I2C_IsDeviceReady+0x254>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f8c6 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e036      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e02c      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004804:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2319      	movs	r3, #25
 8004816:	2201      	movs	r2, #1
 8004818:	490f      	ldr	r1, [pc, #60]	; (8004858 <HAL_I2C_IsDeviceReady+0x254>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f8a2 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e012      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3301      	adds	r3, #1
 800482e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	f4ff af32 	bcc.w	800469e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00100002 	.word	0x00100002
 800485c:	ffff0000 	.word	0xffff0000

08004860 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	460b      	mov	r3, r1
 800486e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d006      	beq.n	800488a <I2C_MasterRequestWrite+0x2a>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <I2C_MasterRequestWrite+0x2a>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e00b      	b.n	80048b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	2b12      	cmp	r3, #18
 80048a2:	d107      	bne.n	80048b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f84f 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048da:	d103      	bne.n	80048e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e035      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f0:	d108      	bne.n	8004904 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004900:	611a      	str	r2, [r3, #16]
 8004902:	e01b      	b.n	800493c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	11db      	asrs	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f063 030f 	orn	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <I2C_MasterRequestWrite+0xfc>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f898 	bl	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e010      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <I2C_MasterRequestWrite+0x100>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f888 	bl	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00010008 	.word	0x00010008
 8004960:	00010002 	.word	0x00010002

08004964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004974:	e048      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d044      	beq.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fd ffdb 	bl	8002938 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d139      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10d      	bne.n	80049ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	43da      	mvns	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	e00c      	b.n	80049d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	43da      	mvns	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4013      	ands	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d116      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e023      	b.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10d      	bne.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	e00c      	b.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	43da      	mvns	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d093      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a66:	e071      	b.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d123      	bne.n	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e067      	b.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d041      	beq.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac8:	f7fd ff36 	bl	8002938 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d136      	bne.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10c      	bne.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	43da      	mvns	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e00b      	b.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e021      	b.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10c      	bne.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e00b      	b.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f af6d 	bne.w	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba4:	e034      	b.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f886 	bl	8004cb8 <I2C_IsAcknowledgeFailed>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e034      	b.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d028      	beq.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fd febb 	bl	8002938 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11d      	bne.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b80      	cmp	r3, #128	; 0x80
 8004be0:	d016      	beq.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0220 	orr.w	r2, r3, #32
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e007      	b.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d1c3      	bne.n	8004ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c34:	e034      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f83e 	bl	8004cb8 <I2C_IsAcknowledgeFailed>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d028      	beq.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fd fe73 	bl	8002938 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11d      	bne.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d016      	beq.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e007      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d1c3      	bne.n	8004c36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cce:	d11b      	bne.n	8004d08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f043 0204 	orr.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8004d18:	bf20      	wfe
  __asm volatile( "nop" );
 8004d1a:	bf00      	nop
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr

08004d24 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004d36:	f023 0304 	bic.w	r3, r3, #4
 8004d3a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d42:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004d44:	e002      	b.n	8004d4c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004d46:	bf40      	sev
    __WFE();
 8004d48:	bf20      	wfe
    __WFE();
 8004d4a:	bf20      	wfe
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004d6e:	f023 0302 	bic.w	r3, r3, #2
 8004d72:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f023 0201 	bic.w	r2, r3, #1
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d84:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_PWR_EnterSTOPMode+0x60>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <HAL_PWR_EnterSTOPMode+0x60>)
 8004d8a:	f043 0304 	orr.w	r3, r3, #4
 8004d8e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d96:	bf30      	wfi
 8004d98:	e004      	b.n	8004da4 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d9a:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004d9c:	f7ff ffba 	bl	8004d14 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004da0:	f7ff ffb8 	bl	8004d14 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_PWR_EnterSTOPMode+0x60>)
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_PWR_EnterSTOPMode+0x60>)
 8004daa:	f023 0304 	bic.w	r3, r3, #4
 8004dae:	6113      	str	r3, [r2, #16]
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e272      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8087 	beq.w	8004eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004de0:	4b92      	ldr	r3, [pc, #584]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 030c 	and.w	r3, r3, #12
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d00c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dec:	4b8f      	ldr	r3, [pc, #572]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d112      	bne.n	8004e1e <HAL_RCC_OscConfig+0x5e>
 8004df8:	4b8c      	ldr	r3, [pc, #560]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e04:	d10b      	bne.n	8004e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e06:	4b89      	ldr	r3, [pc, #548]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d06c      	beq.n	8004eec <HAL_RCC_OscConfig+0x12c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d168      	bne.n	8004eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e24c      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e26:	d106      	bne.n	8004e36 <HAL_RCC_OscConfig+0x76>
 8004e28:	4b80      	ldr	r3, [pc, #512]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a7f      	ldr	r2, [pc, #508]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e02e      	b.n	8004e94 <HAL_RCC_OscConfig+0xd4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCC_OscConfig+0x98>
 8004e3e:	4b7b      	ldr	r3, [pc, #492]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7a      	ldr	r2, [pc, #488]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a77      	ldr	r2, [pc, #476]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e01d      	b.n	8004e94 <HAL_RCC_OscConfig+0xd4>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0xbc>
 8004e62:	4b72      	ldr	r3, [pc, #456]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a71      	ldr	r2, [pc, #452]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b6f      	ldr	r3, [pc, #444]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6e      	ldr	r2, [pc, #440]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xd4>
 8004e7c:	4b6b      	ldr	r3, [pc, #428]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6a      	ldr	r2, [pc, #424]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b68      	ldr	r3, [pc, #416]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a67      	ldr	r2, [pc, #412]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fd4c 	bl	8002938 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fd48 	bl	8002938 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e200      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b5d      	ldr	r3, [pc, #372]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xe4>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fd38 	bl	8002938 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fd34 	bl	8002938 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1ec      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	4b53      	ldr	r3, [pc, #332]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x10c>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d063      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004efa:	4b4c      	ldr	r3, [pc, #304]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f06:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d11c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x18c>
 8004f12:	4b46      	ldr	r3, [pc, #280]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	4b43      	ldr	r3, [pc, #268]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x176>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e1c0      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	4b3d      	ldr	r3, [pc, #244]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4939      	ldr	r1, [pc, #228]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	e03a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f54:	4b36      	ldr	r3, [pc, #216]	; (8005030 <HAL_RCC_OscConfig+0x270>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5a:	f7fd fced 	bl	8002938 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd fce9 	bl	8002938 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1a1      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f80:	4b2a      	ldr	r3, [pc, #168]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4927      	ldr	r1, [pc, #156]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	e015      	b.n	8004fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4b26      	ldr	r3, [pc, #152]	; (8005030 <HAL_RCC_OscConfig+0x270>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fd fccc 	bl	8002938 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa4:	f7fd fcc8 	bl	8002938 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e180      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03a      	beq.n	8005044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d019      	beq.n	800500a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd6:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_RCC_OscConfig+0x274>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fdc:	f7fd fcac 	bl	8002938 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fca8 	bl	8002938 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e160      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005002:	2001      	movs	r0, #1
 8005004:	f000 fae8 	bl	80055d8 <RCC_Delay>
 8005008:	e01c      	b.n	8005044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCC_OscConfig+0x274>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005010:	f7fd fc92 	bl	8002938 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005016:	e00f      	b.n	8005038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005018:	f7fd fc8e 	bl	8002938 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d908      	bls.n	8005038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e146      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	42420000 	.word	0x42420000
 8005034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	4b92      	ldr	r3, [pc, #584]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e9      	bne.n	8005018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80a6 	beq.w	800519e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b8b      	ldr	r3, [pc, #556]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4a87      	ldr	r2, [pc, #540]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	61d3      	str	r3, [r2, #28]
 800506e:	4b85      	ldr	r3, [pc, #532]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507e:	4b82      	ldr	r3, [pc, #520]	; (8005288 <HAL_RCC_OscConfig+0x4c8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d118      	bne.n	80050bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508a:	4b7f      	ldr	r3, [pc, #508]	; (8005288 <HAL_RCC_OscConfig+0x4c8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a7e      	ldr	r2, [pc, #504]	; (8005288 <HAL_RCC_OscConfig+0x4c8>)
 8005090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005096:	f7fd fc4f 	bl	8002938 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509e:	f7fd fc4b 	bl	8002938 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	; 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e103      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	4b75      	ldr	r3, [pc, #468]	; (8005288 <HAL_RCC_OscConfig+0x4c8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_OscConfig+0x312>
 80050c4:	4b6f      	ldr	r3, [pc, #444]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4a6e      	ldr	r2, [pc, #440]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6213      	str	r3, [r2, #32]
 80050d0:	e02d      	b.n	800512e <HAL_RCC_OscConfig+0x36e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x334>
 80050da:	4b6a      	ldr	r3, [pc, #424]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4a69      	ldr	r2, [pc, #420]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6213      	str	r3, [r2, #32]
 80050e6:	4b67      	ldr	r3, [pc, #412]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4a66      	ldr	r2, [pc, #408]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	6213      	str	r3, [r2, #32]
 80050f2:	e01c      	b.n	800512e <HAL_RCC_OscConfig+0x36e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d10c      	bne.n	8005116 <HAL_RCC_OscConfig+0x356>
 80050fc:	4b61      	ldr	r3, [pc, #388]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	4a60      	ldr	r2, [pc, #384]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6213      	str	r3, [r2, #32]
 8005108:	4b5e      	ldr	r3, [pc, #376]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	4a5d      	ldr	r2, [pc, #372]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6213      	str	r3, [r2, #32]
 8005114:	e00b      	b.n	800512e <HAL_RCC_OscConfig+0x36e>
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	4a5a      	ldr	r2, [pc, #360]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	6213      	str	r3, [r2, #32]
 8005122:	4b58      	ldr	r3, [pc, #352]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	4a57      	ldr	r2, [pc, #348]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d015      	beq.n	8005162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005136:	f7fd fbff 	bl	8002938 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fd fbfb 	bl	8002938 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	; 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0b1      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005154:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ee      	beq.n	800513e <HAL_RCC_OscConfig+0x37e>
 8005160:	e014      	b.n	800518c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005162:	f7fd fbe9 	bl	8002938 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fd fbe5 	bl	8002938 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e09b      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005180:	4b40      	ldr	r3, [pc, #256]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ee      	bne.n	800516a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d105      	bne.n	800519e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005192:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	4a3b      	ldr	r2, [pc, #236]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8087 	beq.w	80052b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a8:	4b36      	ldr	r3, [pc, #216]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d061      	beq.n	8005278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d146      	bne.n	800524a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051bc:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_RCC_OscConfig+0x4cc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c2:	f7fd fbb9 	bl	8002938 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fd fbb5 	bl	8002938 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e06d      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051dc:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f0      	bne.n	80051ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f0:	d108      	bne.n	8005204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	4921      	ldr	r1, [pc, #132]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005204:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a19      	ldr	r1, [r3, #32]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	430b      	orrs	r3, r1
 8005216:	491b      	ldr	r1, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_RCC_OscConfig+0x4cc>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fd fb89 	bl	8002938 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522a:	f7fd fb85 	bl	8002938 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e03d      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x46a>
 8005248:	e035      	b.n	80052b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_RCC_OscConfig+0x4cc>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd fb72 	bl	8002938 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005258:	f7fd fb6e 	bl	8002938 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e026      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCC_OscConfig+0x4c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x498>
 8005276:	e01e      	b.n	80052b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e019      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
 8005284:	40021000 	.word	0x40021000
 8005288:	40007000 	.word	0x40007000
 800528c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_OscConfig+0x500>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000

080052c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	4c71      	ldr	r4, [pc, #452]	; (8005494 <HAL_RCC_ClockConfig+0x1d0>)
 80052d0:	447c      	add	r4, pc
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0d3      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052dc:	4b6b      	ldr	r3, [pc, #428]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d910      	bls.n	800530c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b68      	ldr	r3, [pc, #416]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	4966      	ldr	r1, [pc, #408]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b64      	ldr	r3, [pc, #400]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x48>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0bb      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005324:	4b5a      	ldr	r3, [pc, #360]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a59      	ldr	r2, [pc, #356]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 800532a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800532e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800533c:	4b54      	ldr	r3, [pc, #336]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4a53      	ldr	r2, [pc, #332]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005342:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005346:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005348:	4b51      	ldr	r3, [pc, #324]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	494e      	ldr	r1, [pc, #312]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d040      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536e:	4b48      	ldr	r3, [pc, #288]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d115      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e082      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005386:	4b42      	ldr	r3, [pc, #264]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e076      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005396:	4b3e      	ldr	r3, [pc, #248]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e06e      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a6:	4b3a      	ldr	r3, [pc, #232]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4937      	ldr	r1, [pc, #220]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b8:	f7fd fabe 	bl	8002938 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fd faba 	bl	8002938 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e056      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 020c 	and.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d1eb      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xfc>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d210      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 0207 	bic.w	r2, r3, #7
 80053fe:	4923      	ldr	r1, [pc, #140]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x154>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e035      	b.n	8005484 <HAL_RCC_ClockConfig+0x1c0>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005424:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4917      	ldr	r1, [pc, #92]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005432:	4313      	orrs	r3, r2
 8005434:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005442:	4b13      	ldr	r3, [pc, #76]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	490f      	ldr	r1, [pc, #60]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005456:	f000 f825 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800545a:	4601      	mov	r1, r0
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_RCC_ClockConfig+0x1d4>)
 8005468:	58a2      	ldr	r2, [r4, r2]
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	fa21 f203 	lsr.w	r2, r1, r3
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x1d8>)
 8005472:	58e3      	ldr	r3, [r4, r3]
 8005474:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x1dc>)
 8005478:	58e3      	ldr	r3, [r4, r3]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd fa09 	bl	8002894 <HAL_InitTick>

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	40022000 	.word	0x40022000
 8005490:	40021000 	.word	0x40021000
 8005494:	17ffb0b8 	.word	0x17ffb0b8
 8005498:	00000068 	.word	0x00000068
 800549c:	0000001c 	.word	0x0000001c
 80054a0:	00000050 	.word	0x00000050

080054a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <HAL_RCC_GetSysClockFreq+0x98>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d002      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x30>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d003      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x36>
 80054d2:	e029      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054d6:	613b      	str	r3, [r7, #16]
      break;
 80054d8:	e029      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	0c9b      	lsrs	r3, r3, #18
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4a19      	ldr	r2, [pc, #100]	; (8005548 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054e4:	447a      	add	r2, pc
 80054e6:	5cd3      	ldrb	r3, [r2, r3]
 80054e8:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d011      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_RCC_GetSysClockFreq+0x98>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0c5b      	lsrs	r3, r3, #17
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005500:	447a      	add	r2, pc
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <HAL_RCC_GetSysClockFreq+0x9c>)
 800550a:	fb03 f202 	mul.w	r2, r3, r2
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e004      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x7e>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <HAL_RCC_GetSysClockFreq+0xa0>)
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	613b      	str	r3, [r7, #16]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetSysClockFreq+0x9c>)
 800552a:	613b      	str	r3, [r7, #16]
      break;
 800552c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552e:	693b      	ldr	r3, [r7, #16]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	007a1200 	.word	0x007a1200
 8005544:	003d0900 	.word	0x003d0900
 8005548:	000047f8 	.word	0x000047f8
 800554c:	000047ec 	.word	0x000047ec

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <HAL_RCC_GetHCLKFreq+0x18>)
 8005556:	447a      	add	r2, pc
  return SystemCoreClock;
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <HAL_RCC_GetHCLKFreq+0x1c>)
 800555a:	58d3      	ldr	r3, [r2, r3]
 800555c:	681b      	ldr	r3, [r3, #0]
}
 800555e:	4618      	mov	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	17ffae32 	.word	0x17ffae32
 800556c:	0000001c 	.word	0x0000001c

08005570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005570:	b598      	push	{r3, r4, r7, lr}
 8005572:	af00      	add	r7, sp, #0
 8005574:	4c09      	ldr	r4, [pc, #36]	; (800559c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005576:	447c      	add	r4, pc
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005578:	f7ff ffea 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800557c:	4601      	mov	r1, r0
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x30>)
 800558a:	58a2      	ldr	r2, [r4, r2]
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005592:	4618      	mov	r0, r3
 8005594:	bd98      	pop	{r3, r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000
 800559c:	17ffae12 	.word	0x17ffae12
 80055a0:	00000000 	.word	0x00000000

080055a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a4:	b598      	push	{r3, r4, r7, lr}
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	4c09      	ldr	r4, [pc, #36]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80055aa:	447c      	add	r4, pc
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ac:	f7ff ffd0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 80055b0:	4601      	mov	r1, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	0adb      	lsrs	r3, r3, #11
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <HAL_RCC_GetPCLK2Freq+0x30>)
 80055be:	58a2      	ldr	r2, [r4, r2]
 80055c0:	5cd3      	ldrb	r3, [r2, r3]
 80055c2:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	bd98      	pop	{r3, r4, r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	17ffadde 	.word	0x17ffadde
 80055d4:	00000000 	.word	0x00000000

080055d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	4a0d      	ldr	r2, [pc, #52]	; (8005618 <RCC_Delay+0x40>)
 80055e2:	447a      	add	r2, pc
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <RCC_Delay+0x44>)
 80055e6:	58d3      	ldr	r3, [r2, r3]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <RCC_Delay+0x3c>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	0a5b      	lsrs	r3, r3, #9
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	fb02 f303 	mul.w	r3, r2, r3
 80055f8:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055fa:	bf00      	nop
  }
  while (Delay --);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1e5a      	subs	r2, r3, #1
 8005600:	60fa      	str	r2, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f9      	bne.n	80055fa <RCC_Delay+0x22>
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	10624dd3 	.word	0x10624dd3
 8005618:	17ffada6 	.word	0x17ffada6
 800561c:	0000001c 	.word	0x0000001c

08005620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d07d      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005640:	4b4f      	ldr	r3, [pc, #316]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	4a4b      	ldr	r2, [pc, #300]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005656:	61d3      	str	r3, [r2, #28]
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005664:	2301      	movs	r3, #1
 8005666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d118      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a42      	ldr	r2, [pc, #264]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005680:	f7fd f95a 	bl	8002938 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	e008      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005688:	f7fd f956 	bl	8002938 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e06d      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569a:	4b3a      	ldr	r3, [pc, #232]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d027      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c4:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d4:	4b2c      	ldr	r3, [pc, #176]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d014      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ea:	f7fd f925 	bl	8002938 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fd f921 	bl	8002938 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e036      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ee      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4917      	ldr	r1, [pc, #92]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005722:	4313      	orrs	r3, r2
 8005724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	490b      	ldr	r1, [pc, #44]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	40007000 	.word	0x40007000
 8005788:	42420440 	.word	0x42420440

0800578c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e041      	b.n	8005822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fc fdd6 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f000 faa2 	bl	8005d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e03a      	b.n	80058ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <HAL_TIM_Base_Start_IT+0x98>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x58>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x58>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x58>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <HAL_TIM_Base_Start_IT+0xa0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d111      	bne.n	80058a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d010      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	e007      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800

080058d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0201 	bic.w	r2, r2, #1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10f      	bne.n	8005918 <HAL_TIM_Base_Stop_IT+0x48>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a1a      	ldr	r2, [r3, #32]
 80058fe:	f240 4344 	movw	r3, #1092	; 0x444
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <HAL_TIM_Base_Stop_IT+0x48>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b02      	cmp	r3, #2
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0202 	mvn.w	r2, #2
 8005958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f9b4 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9a7 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f9b6 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d122      	bne.n	80059dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d11b      	bne.n	80059dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0204 	mvn.w	r2, #4
 80059ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f98a 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f97d 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f98c 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d122      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d11b      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0208 	mvn.w	r2, #8
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2204      	movs	r2, #4
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f960 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f953 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f962 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d122      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d11b      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0210 	mvn.w	r2, #16
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f936 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f929 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f938 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d10e      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d107      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0201 	mvn.w	r2, #1
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fc f818 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d10e      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac8:	2b80      	cmp	r3, #128	; 0x80
 8005aca:	d107      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa7b 	bl	8005fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d10e      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8fc 	bl	8005d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d10e      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d107      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0220 	mvn.w	r2, #32
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa46 	bl	8005fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_ConfigClockSource+0x1c>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0b4      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x186>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d03e      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0xd4>
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	f200 8087 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	f000 8086 	beq.w	8005cae <HAL_TIM_ConfigClockSource+0x172>
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d87f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d01a      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xa6>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d87b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d050      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x11a>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d877      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d03c      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xfa>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d873      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d058      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x13a>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d86f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b30      	cmp	r3, #48	; 0x30
 8005bca:	d064      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d86b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d060      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d867      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05c      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d05a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005be0:	e062      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f000 f968 	bl	8005ec6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
      break;
 8005c0e:	e04f      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6899      	ldr	r1, [r3, #8]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f000 f951 	bl	8005ec6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c32:	609a      	str	r2, [r3, #8]
      break;
 8005c34:	e03c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 f8c8 	bl	8005dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2150      	movs	r1, #80	; 0x50
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f91f 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 8005c54:	e02c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 f8e6 	bl	8005e34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2160      	movs	r1, #96	; 0x60
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f90f 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 8005c74:	e01c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 f8a8 	bl	8005dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2140      	movs	r1, #64	; 0x40
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f8ff 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 8005c94:	e00c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f000 f8f6 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 8005ca6:	e003      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e000      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
	...

08005d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <TIM_Base_SetConfig+0xb8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <TIM_Base_SetConfig+0x30>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d007      	beq.n	8005d44 <TIM_Base_SetConfig+0x30>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <TIM_Base_SetConfig+0xbc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_Base_SetConfig+0x30>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <TIM_Base_SetConfig+0xc0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d108      	bne.n	8005d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <TIM_Base_SetConfig+0xb8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_Base_SetConfig+0x62>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d64:	d007      	beq.n	8005d76 <TIM_Base_SetConfig+0x62>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <TIM_Base_SetConfig+0xbc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_Base_SetConfig+0x62>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <TIM_Base_SetConfig+0xc0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a07      	ldr	r2, [pc, #28]	; (8005dcc <TIM_Base_SetConfig+0xb8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800

08005dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f023 030a 	bic.w	r3, r3, #10
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0210 	bic.w	r2, r3, #16
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	031b      	lsls	r3, r3, #12
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	621a      	str	r2, [r3, #32]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f043 0307 	orr.w	r3, r3, #7
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b087      	sub	sp, #28
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	021a      	lsls	r2, r3, #8
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	609a      	str	r2, [r3, #8]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e046      	b.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f68:	d009      	beq.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a10      	ldr	r2, [pc, #64]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10c      	bne.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800

08005fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e042      	b.n	800607c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc f9ea 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 ff73 	bl	8006f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800605c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b20      	cmp	r3, #32
 800609c:	d159      	bne.n	8006152 <HAL_UART_Transmit_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_UART_Transmit_DMA+0x26>
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e052      	b.n	8006154 <HAL_UART_Transmit_DMA+0xd0>
    }

    huart->pTxBuffPtr = pData;
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2221      	movs	r2, #33	; 0x21
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	4a22      	ldr	r2, [pc, #136]	; (800615c <HAL_UART_Transmit_DMA+0xd8>)
 80060d4:	447a      	add	r2, pc
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	4a20      	ldr	r2, [pc, #128]	; (8006160 <HAL_UART_Transmit_DMA+0xdc>)
 80060de:	447a      	add	r2, pc
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_UART_Transmit_DMA+0xe0>)
 80060e8:	447a      	add	r2, pc
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	2200      	movs	r2, #0
 80060f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3304      	adds	r3, #4
 8006108:	461a      	mov	r2, r3
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	f7fd f9d4 	bl	80034b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006118:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	617b      	str	r3, [r7, #20]
   return(result);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613a:	627a      	str	r2, [r7, #36]	; 0x24
 800613c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6a39      	ldr	r1, [r7, #32]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	61fb      	str	r3, [r7, #28]
   return(result);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <HAL_UART_Transmit_DMA+0x96>

    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <HAL_UART_Transmit_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
  }
}
 8006154:	4618      	mov	r0, r3
 8006156:	3730      	adds	r7, #48	; 0x30
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	000006cb 	.word	0x000006cb
 8006160:	0000075b 	.word	0x0000075b
 8006164:	000008d5 	.word	0x000008d5

08006168 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08c      	sub	sp, #48	; 0x30
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b20      	cmp	r3, #32
 8006180:	d14a      	bne.n	8006218 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e043      	b.n	800621a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fc55 	bl	8006a54 <UART_Start_Receive_DMA>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80061b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d12c      	bne.n	8006212 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d125      	bne.n	800620c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	617b      	str	r3, [r7, #20]
   return(result);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f043 0310 	orr.w	r3, r3, #16
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f6:	627a      	str	r2, [r7, #36]	; 0x24
 80061f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6a39      	ldr	r1, [r7, #32]
 80061fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	61fb      	str	r3, [r7, #28]
   return(result);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e5      	bne.n	80061d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800620a:	e002      	b.n	8006212 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006216:	e000      	b.n	800621a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3730      	adds	r7, #48	; 0x30
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b0ba      	sub	sp, #232	; 0xe8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006250:	2300      	movs	r3, #0
 8006252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10f      	bne.n	800628a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800626a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <HAL_UART_IRQHandler+0x66>
 8006276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fd88 	bl	8006d98 <UART_Receive_IT>
      return;
 8006288:	e259      	b.n	800673e <HAL_UART_IRQHandler+0x51a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800628a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80df 	beq.w	8006452 <HAL_UART_IRQHandler+0x22e>
 8006294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80d2 	beq.w	8006452 <HAL_UART_IRQHandler+0x22e>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <HAL_UART_IRQHandler+0xae>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f043 0201 	orr.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <HAL_UART_IRQHandler+0xd2>
 80062de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	f043 0202 	orr.w	r2, r3, #2
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <HAL_UART_IRQHandler+0xf6>
 8006302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	f043 0204 	orr.w	r2, r3, #4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d011      	beq.n	800634a <HAL_UART_IRQHandler+0x126>
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 81f0 	beq.w	8006734 <HAL_UART_IRQHandler+0x510>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_UART_IRQHandler+0x14e>
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fd13 	bl	8006d98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <HAL_UART_IRQHandler+0x17a>
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d050      	beq.n	8006440 <HAL_UART_IRQHandler+0x21c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fc1d 	bl	8006bde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d042      	beq.n	8006438 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1d9      	bne.n	80063b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d014      	beq.n	8006430 <HAL_UART_IRQHandler+0x20c>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	4ace      	ldr	r2, [pc, #824]	; (8006744 <HAL_UART_IRQHandler+0x520>)
 800640c:	447a      	add	r2, pc
 800640e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	4618      	mov	r0, r3
 8006416:	f7fd f8eb 	bl	80035f0 <HAL_DMA_Abort_IT>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d016      	beq.n	800644e <HAL_UART_IRQHandler+0x22a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800642a:	4610      	mov	r0, r2
 800642c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642e:	e00e      	b.n	800644e <HAL_UART_IRQHandler+0x22a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9ad 	bl	8006790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006436:	e00a      	b.n	800644e <HAL_UART_IRQHandler+0x22a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9a9 	bl	8006790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643e:	e006      	b.n	800644e <HAL_UART_IRQHandler+0x22a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f9a5 	bl	8006790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800644c:	e172      	b.n	8006734 <HAL_UART_IRQHandler+0x510>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644e:	bf00      	nop
    return;
 8006450:	e170      	b.n	8006734 <HAL_UART_IRQHandler+0x510>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	2b01      	cmp	r3, #1
 8006458:	f040 814c 	bne.w	80066f4 <HAL_UART_IRQHandler+0x4d0>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8145 	beq.w	80066f4 <HAL_UART_IRQHandler+0x4d0>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800646a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 813e 	beq.w	80066f4 <HAL_UART_IRQHandler+0x4d0>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006478:	2300      	movs	r3, #0
 800647a:	60bb      	str	r3, [r7, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80b3 	beq.w	8006604 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8142 	beq.w	8006738 <HAL_UART_IRQHandler+0x514>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064bc:	429a      	cmp	r2, r3
 80064be:	f080 813b 	bcs.w	8006738 <HAL_UART_IRQHandler+0x514>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	f000 8088 	beq.w	80065e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800650e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800651a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1d9      	bne.n	80064d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3314      	adds	r3, #20
 8006528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3314      	adds	r3, #20
 8006542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006546:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800654a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800654e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e1      	bne.n	8006522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3314      	adds	r3, #20
 8006564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800656e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006582:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e3      	bne.n	800655e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b6:	f023 0310 	bic.w	r3, r3, #16
 80065ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80065ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e3      	bne.n	80065a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fc ffc9 	bl	8003578 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fb f981 	bl	8001904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006602:	e099      	b.n	8006738 <HAL_UART_IRQHandler+0x514>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800660c:	b29b      	uxth	r3, r3
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 808e 	beq.w	800673c <HAL_UART_IRQHandler+0x518>
          && (nb_rx_data > 0U))
 8006620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8089 	beq.w	800673c <HAL_UART_IRQHandler+0x518>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800664e:	647a      	str	r2, [r7, #68]	; 0x44
 8006650:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e3      	bne.n	800662a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	623b      	str	r3, [r7, #32]
   return(result);
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3314      	adds	r3, #20
 8006682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006686:	633a      	str	r2, [r7, #48]	; 0x30
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e3      	bne.n	8006662 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0310 	bic.w	r3, r3, #16
 80066be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	330c      	adds	r3, #12
 80066c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066cc:	61fa      	str	r2, [r7, #28]
 80066ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	69b9      	ldr	r1, [r7, #24]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	617b      	str	r3, [r7, #20]
   return(result);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e3      	bne.n	80066a8 <HAL_UART_IRQHandler+0x484>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fb f909 	bl	8001904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066f2:	e023      	b.n	800673c <HAL_UART_IRQHandler+0x518>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_UART_IRQHandler+0x4f0>
 8006700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_UART_IRQHandler+0x4f0>
  {
    UART_Transmit_IT(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fadc 	bl	8006cca <UART_Transmit_IT>
    return;
 8006712:	e014      	b.n	800673e <HAL_UART_IRQHandler+0x51a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <HAL_UART_IRQHandler+0x51a>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_UART_IRQHandler+0x51a>
  {
    UART_EndTransmit_IT(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb1b 	bl	8006d68 <UART_EndTransmit_IT>
    return;
 8006732:	e004      	b.n	800673e <HAL_UART_IRQHandler+0x51a>
    return;
 8006734:	bf00      	nop
 8006736:	e002      	b.n	800673e <HAL_UART_IRQHandler+0x51a>
      return;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <HAL_UART_IRQHandler+0x51a>
      return;
 800673c:	bf00      	nop
  }
}
 800673e:	37e8      	adds	r7, #232	; 0xe8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	00000893 	.word	0x00000893

08006748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b090      	sub	sp, #64	; 0x40
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d137      	bne.n	800682e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	2200      	movs	r2, #0
 80067c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	623b      	str	r3, [r7, #32]
   return(result);
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e4:	633a      	str	r2, [r7, #48]	; 0x30
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	60fb      	str	r3, [r7, #12]
   return(result);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
 8006810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006818:	61fa      	str	r2, [r7, #28]
 800681a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	69b9      	ldr	r1, [r7, #24]
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	617b      	str	r3, [r7, #20]
   return(result);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e5      	bne.n	80067f8 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800682c:	e002      	b.n	8006834 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800682e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006830:	f7ff ff8a 	bl	8006748 <HAL_UART_TxCpltCallback>
}
 8006834:	bf00      	nop
 8006836:	3740      	adds	r7, #64	; 0x40
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ff85 	bl	800675a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b09c      	sub	sp, #112	; 0x70
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b00      	cmp	r3, #0
 8006872:	d172      	bne.n	800695a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	2200      	movs	r2, #0
 8006878:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800688a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	66bb      	str	r3, [r7, #104]	; 0x68
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	330c      	adds	r3, #12
 8006898:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800689a:	65ba      	str	r2, [r7, #88]	; 0x58
 800689c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e5      	bne.n	800687a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	667b      	str	r3, [r7, #100]	; 0x64
 80068c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3314      	adds	r3, #20
 80068cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068ce:	647a      	str	r2, [r7, #68]	; 0x44
 80068d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e5      	bne.n	80068ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	623b      	str	r3, [r7, #32]
   return(result);
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f8:	663b      	str	r3, [r7, #96]	; 0x60
 80068fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006902:	633a      	str	r2, [r7, #48]	; 0x30
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e5      	bne.n	80068e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006918:	2220      	movs	r2, #32
 800691a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	2b01      	cmp	r3, #1
 8006924:	d119      	bne.n	800695a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	330c      	adds	r3, #12
 800692c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	60fb      	str	r3, [r7, #12]
   return(result);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f023 0310 	bic.w	r3, r3, #16
 800693c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006946:	61fa      	str	r2, [r7, #28]
 8006948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	617b      	str	r3, [r7, #20]
   return(result);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800695a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695c:	2200      	movs	r2, #0
 800695e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	2b01      	cmp	r3, #1
 8006966:	d106      	bne.n	8006976 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800696c:	4619      	mov	r1, r3
 800696e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006970:	f7fa ffc8 	bl	8001904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006974:	e002      	b.n	800697c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006976:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006978:	f7ff fef8 	bl	800676c <HAL_UART_RxCpltCallback>
}
 800697c:	bf00      	nop
 800697e:	3770      	adds	r7, #112	; 0x70
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	2b01      	cmp	r3, #1
 800699e:	d108      	bne.n	80069b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7fa ffaa 	bl	8001904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069b0:	e002      	b.n	80069b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff fee3 	bl	800677e <HAL_UART_RxHalfCpltCallback>
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf14      	ite	ne
 80069e0:	2301      	movne	r3, #1
 80069e2:	2300      	moveq	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b21      	cmp	r3, #33	; 0x21
 80069f2:	d108      	bne.n	8006a06 <UART_DMAError+0x46>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2200      	movs	r2, #0
 80069fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a00:	68b8      	ldr	r0, [r7, #8]
 8006a02:	f000 f8c5 	bl	8006b90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b22      	cmp	r3, #34	; 0x22
 8006a26:	d108      	bne.n	8006a3a <UART_DMAError+0x7a>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a34:	68b8      	ldr	r0, [r7, #8]
 8006a36:	f000 f8d2 	bl	8006bde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	f043 0210 	orr.w	r2, r3, #16
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f7ff fea2 	bl	8006790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b098      	sub	sp, #96	; 0x60
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2222      	movs	r2, #34	; 0x22
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	4a40      	ldr	r2, [pc, #256]	; (8006b84 <UART_Start_Receive_DMA+0x130>)
 8006a82:	447a      	add	r2, pc
 8006a84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <UART_Start_Receive_DMA+0x134>)
 8006a8c:	447a      	add	r2, pc
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	4a3d      	ldr	r2, [pc, #244]	; (8006b8c <UART_Start_Receive_DMA+0x138>)
 8006a96:	447a      	add	r2, pc
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	f7fc fcfd 	bl	80034b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d019      	beq.n	8006b10 <UART_Start_Receive_DMA+0xbc>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006afc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006afe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <UART_Start_Receive_DMA+0x88>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	657b      	str	r3, [r7, #84]	; 0x54
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b30:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_Start_Receive_DMA+0xbc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	617b      	str	r3, [r7, #20]
   return(result);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b64:	627a      	str	r2, [r7, #36]	; 0x24
 8006b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6a39      	ldr	r1, [r7, #32]
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_Start_Receive_DMA+0xf0>

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3760      	adds	r7, #96	; 0x60
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	fffffdd3 	.word	0xfffffdd3
 8006b88:	fffffef5 	.word	0xfffffef5
 8006b8c:	ffffff27 	.word	0xffffff27

08006b90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b089      	sub	sp, #36	; 0x24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	61ba      	str	r2, [r7, #24]
 8006bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6979      	ldr	r1, [r7, #20]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e5      	bne.n	8006b98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006bd4:	bf00      	nop
 8006bd6:	3724      	adds	r7, #36	; 0x24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b095      	sub	sp, #84	; 0x54
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c06:	643a      	str	r2, [r7, #64]	; 0x40
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e5      	bne.n	8006be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d119      	bne.n	8006c8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f023 0310 	bic.w	r3, r3, #16
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c76:	61ba      	str	r2, [r7, #24]
 8006c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6979      	ldr	r1, [r7, #20]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	613b      	str	r3, [r7, #16]
   return(result);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e5      	bne.n	8006c56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c98:	bf00      	nop
 8006c9a:	3754      	adds	r7, #84	; 0x54
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fd67 	bl	8006790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b21      	cmp	r3, #33	; 0x21
 8006cdc:	d13e      	bne.n	8006d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce6:	d114      	bne.n	8006d12 <UART_Transmit_IT+0x48>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d110      	bne.n	8006d12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	1c9a      	adds	r2, r3, #2
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	621a      	str	r2, [r3, #32]
 8006d10:	e008      	b.n	8006d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	1c59      	adds	r1, r3, #1
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6211      	str	r1, [r2, #32]
 8006d1c:	781a      	ldrb	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4619      	mov	r1, r3
 8006d32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10f      	bne.n	8006d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fcdd 	bl	8006748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08c      	sub	sp, #48	; 0x30
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b22      	cmp	r3, #34	; 0x22
 8006daa:	f040 80ae 	bne.w	8006f0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	d117      	bne.n	8006de8 <UART_Receive_IT+0x50>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d113      	bne.n	8006de8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	629a      	str	r2, [r3, #40]	; 0x28
 8006de6:	e026      	b.n	8006e36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	d007      	beq.n	8006e0c <UART_Receive_IT+0x74>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <UART_Receive_IT+0x82>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e008      	b.n	8006e2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4619      	mov	r1, r3
 8006e44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d15d      	bne.n	8006f06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0220 	bic.w	r2, r2, #32
 8006e58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d135      	bne.n	8006efc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb6:	623a      	str	r2, [r7, #32]
 8006eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	69f9      	ldr	r1, [r7, #28]
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d10a      	bne.n	8006eee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fa fd05 	bl	8001904 <HAL_UARTEx_RxEventCallback>
 8006efa:	e002      	b.n	8006f02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fc35 	bl	800676c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e002      	b.n	8006f0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3730      	adds	r7, #48	; 0x30
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f4e:	f023 030c 	bic.w	r3, r3, #12
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2c      	ldr	r2, [pc, #176]	; (8007028 <UART_SetConfig+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d103      	bne.n	8006f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe fb12 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	e002      	b.n	8006f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7fe faf4 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8006f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	009a      	lsls	r2, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa0:	4a22      	ldr	r2, [pc, #136]	; (800702c <UART_SetConfig+0x118>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	0119      	lsls	r1, r3, #4
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009a      	lsls	r2, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <UART_SetConfig+0x118>)
 8006fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	2064      	movs	r0, #100	; 0x64
 8006fca:	fb00 f303 	mul.w	r3, r0, r3
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	3332      	adds	r3, #50	; 0x32
 8006fd4:	4a15      	ldr	r2, [pc, #84]	; (800702c <UART_SetConfig+0x118>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe0:	4419      	add	r1, r3
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009a      	lsls	r2, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <UART_SetConfig+0x118>)
 8006ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	2064      	movs	r0, #100	; 0x64
 8007002:	fb00 f303 	mul.w	r3, r0, r3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	3332      	adds	r3, #50	; 0x32
 800700c:	4a07      	ldr	r2, [pc, #28]	; (800702c <UART_SetConfig+0x118>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	f003 020f 	and.w	r2, r3, #15
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	440a      	add	r2, r1
 800701e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40013800 	.word	0x40013800
 800702c:	51eb851f 	.word	0x51eb851f

08007030 <__errno>:
 8007030:	4b01      	ldr	r3, [pc, #4]	; (8007038 <__errno+0x8>)
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000328 	.word	0x20000328

0800703c <__libc_init_array>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	2600      	movs	r6, #0
 8007040:	4d0c      	ldr	r5, [pc, #48]	; (8007074 <__libc_init_array+0x38>)
 8007042:	4c0d      	ldr	r4, [pc, #52]	; (8007078 <__libc_init_array+0x3c>)
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	42a6      	cmp	r6, r4
 800704a:	d109      	bne.n	8007060 <__libc_init_array+0x24>
 800704c:	f001 fa08 	bl	8008460 <_init>
 8007050:	2600      	movs	r6, #0
 8007052:	4d0a      	ldr	r5, [pc, #40]	; (800707c <__libc_init_array+0x40>)
 8007054:	4c0a      	ldr	r4, [pc, #40]	; (8007080 <__libc_init_array+0x44>)
 8007056:	1b64      	subs	r4, r4, r5
 8007058:	10a4      	asrs	r4, r4, #2
 800705a:	42a6      	cmp	r6, r4
 800705c:	d105      	bne.n	800706a <__libc_init_array+0x2e>
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	f855 3b04 	ldr.w	r3, [r5], #4
 8007064:	4798      	blx	r3
 8007066:	3601      	adds	r6, #1
 8007068:	e7ee      	b.n	8007048 <__libc_init_array+0xc>
 800706a:	f855 3b04 	ldr.w	r3, [r5], #4
 800706e:	4798      	blx	r3
 8007070:	3601      	adds	r6, #1
 8007072:	e7f2      	b.n	800705a <__libc_init_array+0x1e>
 8007074:	08009d8c 	.word	0x08009d8c
 8007078:	08009d8c 	.word	0x08009d8c
 800707c:	08009d8c 	.word	0x08009d8c
 8007080:	08009d90 	.word	0x08009d90

08007084 <memset>:
 8007084:	4603      	mov	r3, r0
 8007086:	4402      	add	r2, r0
 8007088:	4293      	cmp	r3, r2
 800708a:	d100      	bne.n	800708e <memset+0xa>
 800708c:	4770      	bx	lr
 800708e:	f803 1b01 	strb.w	r1, [r3], #1
 8007092:	e7f9      	b.n	8007088 <memset+0x4>

08007094 <iprintf>:
 8007094:	b40f      	push	{r0, r1, r2, r3}
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <iprintf+0x2c>)
 8007098:	b513      	push	{r0, r1, r4, lr}
 800709a:	681c      	ldr	r4, [r3, #0]
 800709c:	b124      	cbz	r4, 80070a8 <iprintf+0x14>
 800709e:	69a3      	ldr	r3, [r4, #24]
 80070a0:	b913      	cbnz	r3, 80070a8 <iprintf+0x14>
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fa7a 	bl	800759c <__sinit>
 80070a8:	ab05      	add	r3, sp, #20
 80070aa:	4620      	mov	r0, r4
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	68a1      	ldr	r1, [r4, #8]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	f000 fdd9 	bl	8007c68 <_vfiprintf_r>
 80070b6:	b002      	add	sp, #8
 80070b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070bc:	b004      	add	sp, #16
 80070be:	4770      	bx	lr
 80070c0:	20000328 	.word	0x20000328

080070c4 <_puts_r>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	460e      	mov	r6, r1
 80070c8:	4605      	mov	r5, r0
 80070ca:	b118      	cbz	r0, 80070d4 <_puts_r+0x10>
 80070cc:	6983      	ldr	r3, [r0, #24]
 80070ce:	b90b      	cbnz	r3, 80070d4 <_puts_r+0x10>
 80070d0:	f000 fa64 	bl	800759c <__sinit>
 80070d4:	69ab      	ldr	r3, [r5, #24]
 80070d6:	68ac      	ldr	r4, [r5, #8]
 80070d8:	b913      	cbnz	r3, 80070e0 <_puts_r+0x1c>
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 fa5e 	bl	800759c <__sinit>
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <_puts_r+0xd0>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d120      	bne.n	8007128 <_puts_r+0x64>
 80070e6:	686c      	ldr	r4, [r5, #4]
 80070e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ea:	07db      	lsls	r3, r3, #31
 80070ec:	d405      	bmi.n	80070fa <_puts_r+0x36>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	0598      	lsls	r0, r3, #22
 80070f2:	d402      	bmi.n	80070fa <_puts_r+0x36>
 80070f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f6:	f000 faef 	bl	80076d8 <__retarget_lock_acquire_recursive>
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	0719      	lsls	r1, r3, #28
 80070fe:	d51d      	bpl.n	800713c <_puts_r+0x78>
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	b1db      	cbz	r3, 800713c <_puts_r+0x78>
 8007104:	3e01      	subs	r6, #1
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800710c:	3b01      	subs	r3, #1
 800710e:	60a3      	str	r3, [r4, #8]
 8007110:	bb39      	cbnz	r1, 8007162 <_puts_r+0x9e>
 8007112:	2b00      	cmp	r3, #0
 8007114:	da38      	bge.n	8007188 <_puts_r+0xc4>
 8007116:	4622      	mov	r2, r4
 8007118:	210a      	movs	r1, #10
 800711a:	4628      	mov	r0, r5
 800711c:	f000 f868 	bl	80071f0 <__swbuf_r>
 8007120:	3001      	adds	r0, #1
 8007122:	d011      	beq.n	8007148 <_puts_r+0x84>
 8007124:	250a      	movs	r5, #10
 8007126:	e011      	b.n	800714c <_puts_r+0x88>
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <_puts_r+0xd4>)
 800712a:	429c      	cmp	r4, r3
 800712c:	d101      	bne.n	8007132 <_puts_r+0x6e>
 800712e:	68ac      	ldr	r4, [r5, #8]
 8007130:	e7da      	b.n	80070e8 <_puts_r+0x24>
 8007132:	4b1a      	ldr	r3, [pc, #104]	; (800719c <_puts_r+0xd8>)
 8007134:	429c      	cmp	r4, r3
 8007136:	bf08      	it	eq
 8007138:	68ec      	ldreq	r4, [r5, #12]
 800713a:	e7d5      	b.n	80070e8 <_puts_r+0x24>
 800713c:	4621      	mov	r1, r4
 800713e:	4628      	mov	r0, r5
 8007140:	f000 f8a8 	bl	8007294 <__swsetup_r>
 8007144:	2800      	cmp	r0, #0
 8007146:	d0dd      	beq.n	8007104 <_puts_r+0x40>
 8007148:	f04f 35ff 	mov.w	r5, #4294967295
 800714c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800714e:	07da      	lsls	r2, r3, #31
 8007150:	d405      	bmi.n	800715e <_puts_r+0x9a>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	059b      	lsls	r3, r3, #22
 8007156:	d402      	bmi.n	800715e <_puts_r+0x9a>
 8007158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800715a:	f000 fabe 	bl	80076da <__retarget_lock_release_recursive>
 800715e:	4628      	mov	r0, r5
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	2b00      	cmp	r3, #0
 8007164:	da04      	bge.n	8007170 <_puts_r+0xac>
 8007166:	69a2      	ldr	r2, [r4, #24]
 8007168:	429a      	cmp	r2, r3
 800716a:	dc06      	bgt.n	800717a <_puts_r+0xb6>
 800716c:	290a      	cmp	r1, #10
 800716e:	d004      	beq.n	800717a <_puts_r+0xb6>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	6022      	str	r2, [r4, #0]
 8007176:	7019      	strb	r1, [r3, #0]
 8007178:	e7c5      	b.n	8007106 <_puts_r+0x42>
 800717a:	4622      	mov	r2, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f837 	bl	80071f0 <__swbuf_r>
 8007182:	3001      	adds	r0, #1
 8007184:	d1bf      	bne.n	8007106 <_puts_r+0x42>
 8007186:	e7df      	b.n	8007148 <_puts_r+0x84>
 8007188:	250a      	movs	r5, #10
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	701d      	strb	r5, [r3, #0]
 8007192:	e7db      	b.n	800714c <_puts_r+0x88>
 8007194:	08009d18 	.word	0x08009d18
 8007198:	08009d38 	.word	0x08009d38
 800719c:	08009cf8 	.word	0x08009cf8

080071a0 <puts>:
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <puts+0xc>)
 80071a2:	4601      	mov	r1, r0
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	f7ff bf8d 	b.w	80070c4 <_puts_r>
 80071aa:	bf00      	nop
 80071ac:	20000328 	.word	0x20000328

080071b0 <siprintf>:
 80071b0:	b40e      	push	{r1, r2, r3}
 80071b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071b6:	b500      	push	{lr}
 80071b8:	b09c      	sub	sp, #112	; 0x70
 80071ba:	ab1d      	add	r3, sp, #116	; 0x74
 80071bc:	9002      	str	r0, [sp, #8]
 80071be:	9006      	str	r0, [sp, #24]
 80071c0:	9107      	str	r1, [sp, #28]
 80071c2:	9104      	str	r1, [sp, #16]
 80071c4:	4808      	ldr	r0, [pc, #32]	; (80071e8 <siprintf+0x38>)
 80071c6:	4909      	ldr	r1, [pc, #36]	; (80071ec <siprintf+0x3c>)
 80071c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071cc:	9105      	str	r1, [sp, #20]
 80071ce:	6800      	ldr	r0, [r0, #0]
 80071d0:	a902      	add	r1, sp, #8
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	f000 fc20 	bl	8007a18 <_svfiprintf_r>
 80071d8:	2200      	movs	r2, #0
 80071da:	9b02      	ldr	r3, [sp, #8]
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	b01c      	add	sp, #112	; 0x70
 80071e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071e4:	b003      	add	sp, #12
 80071e6:	4770      	bx	lr
 80071e8:	20000328 	.word	0x20000328
 80071ec:	ffff0208 	.word	0xffff0208

080071f0 <__swbuf_r>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	460e      	mov	r6, r1
 80071f4:	4614      	mov	r4, r2
 80071f6:	4605      	mov	r5, r0
 80071f8:	b118      	cbz	r0, 8007202 <__swbuf_r+0x12>
 80071fa:	6983      	ldr	r3, [r0, #24]
 80071fc:	b90b      	cbnz	r3, 8007202 <__swbuf_r+0x12>
 80071fe:	f000 f9cd 	bl	800759c <__sinit>
 8007202:	4b21      	ldr	r3, [pc, #132]	; (8007288 <__swbuf_r+0x98>)
 8007204:	429c      	cmp	r4, r3
 8007206:	d12b      	bne.n	8007260 <__swbuf_r+0x70>
 8007208:	686c      	ldr	r4, [r5, #4]
 800720a:	69a3      	ldr	r3, [r4, #24]
 800720c:	60a3      	str	r3, [r4, #8]
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	071a      	lsls	r2, r3, #28
 8007212:	d52f      	bpl.n	8007274 <__swbuf_r+0x84>
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	b36b      	cbz	r3, 8007274 <__swbuf_r+0x84>
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	b2f6      	uxtb	r6, r6
 800721e:	1ac0      	subs	r0, r0, r3
 8007220:	6963      	ldr	r3, [r4, #20]
 8007222:	4637      	mov	r7, r6
 8007224:	4283      	cmp	r3, r0
 8007226:	dc04      	bgt.n	8007232 <__swbuf_r+0x42>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f922 	bl	8007474 <_fflush_r>
 8007230:	bb30      	cbnz	r0, 8007280 <__swbuf_r+0x90>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	3001      	adds	r0, #1
 8007236:	3b01      	subs	r3, #1
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	6022      	str	r2, [r4, #0]
 8007240:	701e      	strb	r6, [r3, #0]
 8007242:	6963      	ldr	r3, [r4, #20]
 8007244:	4283      	cmp	r3, r0
 8007246:	d004      	beq.n	8007252 <__swbuf_r+0x62>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	07db      	lsls	r3, r3, #31
 800724c:	d506      	bpl.n	800725c <__swbuf_r+0x6c>
 800724e:	2e0a      	cmp	r6, #10
 8007250:	d104      	bne.n	800725c <__swbuf_r+0x6c>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f000 f90d 	bl	8007474 <_fflush_r>
 800725a:	b988      	cbnz	r0, 8007280 <__swbuf_r+0x90>
 800725c:	4638      	mov	r0, r7
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <__swbuf_r+0x9c>)
 8007262:	429c      	cmp	r4, r3
 8007264:	d101      	bne.n	800726a <__swbuf_r+0x7a>
 8007266:	68ac      	ldr	r4, [r5, #8]
 8007268:	e7cf      	b.n	800720a <__swbuf_r+0x1a>
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <__swbuf_r+0xa0>)
 800726c:	429c      	cmp	r4, r3
 800726e:	bf08      	it	eq
 8007270:	68ec      	ldreq	r4, [r5, #12]
 8007272:	e7ca      	b.n	800720a <__swbuf_r+0x1a>
 8007274:	4621      	mov	r1, r4
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f80c 	bl	8007294 <__swsetup_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	d0cb      	beq.n	8007218 <__swbuf_r+0x28>
 8007280:	f04f 37ff 	mov.w	r7, #4294967295
 8007284:	e7ea      	b.n	800725c <__swbuf_r+0x6c>
 8007286:	bf00      	nop
 8007288:	08009d18 	.word	0x08009d18
 800728c:	08009d38 	.word	0x08009d38
 8007290:	08009cf8 	.word	0x08009cf8

08007294 <__swsetup_r>:
 8007294:	4b32      	ldr	r3, [pc, #200]	; (8007360 <__swsetup_r+0xcc>)
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	4606      	mov	r6, r0
 800729c:	460c      	mov	r4, r1
 800729e:	b125      	cbz	r5, 80072aa <__swsetup_r+0x16>
 80072a0:	69ab      	ldr	r3, [r5, #24]
 80072a2:	b913      	cbnz	r3, 80072aa <__swsetup_r+0x16>
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 f979 	bl	800759c <__sinit>
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <__swsetup_r+0xd0>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	d10f      	bne.n	80072d0 <__swsetup_r+0x3c>
 80072b0:	686c      	ldr	r4, [r5, #4]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b8:	0719      	lsls	r1, r3, #28
 80072ba:	d42c      	bmi.n	8007316 <__swsetup_r+0x82>
 80072bc:	06dd      	lsls	r5, r3, #27
 80072be:	d411      	bmi.n	80072e4 <__swsetup_r+0x50>
 80072c0:	2309      	movs	r3, #9
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	81a3      	strh	r3, [r4, #12]
 80072ce:	e03e      	b.n	800734e <__swsetup_r+0xba>
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <__swsetup_r+0xd4>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swsetup_r+0x46>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7eb      	b.n	80072b2 <__swsetup_r+0x1e>
 80072da:	4b24      	ldr	r3, [pc, #144]	; (800736c <__swsetup_r+0xd8>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7e6      	b.n	80072b2 <__swsetup_r+0x1e>
 80072e4:	0758      	lsls	r0, r3, #29
 80072e6:	d512      	bpl.n	800730e <__swsetup_r+0x7a>
 80072e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ea:	b141      	cbz	r1, 80072fe <__swsetup_r+0x6a>
 80072ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f0:	4299      	cmp	r1, r3
 80072f2:	d002      	beq.n	80072fa <__swsetup_r+0x66>
 80072f4:	4630      	mov	r0, r6
 80072f6:	f000 fa57 	bl	80077a8 <_free_r>
 80072fa:	2300      	movs	r3, #0
 80072fc:	6363      	str	r3, [r4, #52]	; 0x34
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	2300      	movs	r3, #0
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f043 0308 	orr.w	r3, r3, #8
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	b94b      	cbnz	r3, 800732e <__swsetup_r+0x9a>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007324:	d003      	beq.n	800732e <__swsetup_r+0x9a>
 8007326:	4621      	mov	r1, r4
 8007328:	4630      	mov	r0, r6
 800732a:	f000 f9fd 	bl	8007728 <__smakebuf_r>
 800732e:	89a0      	ldrh	r0, [r4, #12]
 8007330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007334:	f010 0301 	ands.w	r3, r0, #1
 8007338:	d00a      	beq.n	8007350 <__swsetup_r+0xbc>
 800733a:	2300      	movs	r3, #0
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	6963      	ldr	r3, [r4, #20]
 8007340:	425b      	negs	r3, r3
 8007342:	61a3      	str	r3, [r4, #24]
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	b943      	cbnz	r3, 800735a <__swsetup_r+0xc6>
 8007348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800734c:	d1ba      	bne.n	80072c4 <__swsetup_r+0x30>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	0781      	lsls	r1, r0, #30
 8007352:	bf58      	it	pl
 8007354:	6963      	ldrpl	r3, [r4, #20]
 8007356:	60a3      	str	r3, [r4, #8]
 8007358:	e7f4      	b.n	8007344 <__swsetup_r+0xb0>
 800735a:	2000      	movs	r0, #0
 800735c:	e7f7      	b.n	800734e <__swsetup_r+0xba>
 800735e:	bf00      	nop
 8007360:	20000328 	.word	0x20000328
 8007364:	08009d18 	.word	0x08009d18
 8007368:	08009d38 	.word	0x08009d38
 800736c:	08009cf8 	.word	0x08009cf8

08007370 <__sflush_r>:
 8007370:	898a      	ldrh	r2, [r1, #12]
 8007372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007374:	4605      	mov	r5, r0
 8007376:	0710      	lsls	r0, r2, #28
 8007378:	460c      	mov	r4, r1
 800737a:	d457      	bmi.n	800742c <__sflush_r+0xbc>
 800737c:	684b      	ldr	r3, [r1, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dc04      	bgt.n	800738c <__sflush_r+0x1c>
 8007382:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	dc01      	bgt.n	800738c <__sflush_r+0x1c>
 8007388:	2000      	movs	r0, #0
 800738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800738e:	2e00      	cmp	r6, #0
 8007390:	d0fa      	beq.n	8007388 <__sflush_r+0x18>
 8007392:	2300      	movs	r3, #0
 8007394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007398:	682f      	ldr	r7, [r5, #0]
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	d032      	beq.n	8007404 <__sflush_r+0x94>
 800739e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	075a      	lsls	r2, r3, #29
 80073a4:	d505      	bpl.n	80073b2 <__sflush_r+0x42>
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	1ac0      	subs	r0, r0, r3
 80073aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073ac:	b10b      	cbz	r3, 80073b2 <__sflush_r+0x42>
 80073ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073b0:	1ac0      	subs	r0, r0, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	4602      	mov	r2, r0
 80073b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073b8:	4628      	mov	r0, r5
 80073ba:	6a21      	ldr	r1, [r4, #32]
 80073bc:	47b0      	blx	r6
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	d106      	bne.n	80073d2 <__sflush_r+0x62>
 80073c4:	6829      	ldr	r1, [r5, #0]
 80073c6:	291d      	cmp	r1, #29
 80073c8:	d82c      	bhi.n	8007424 <__sflush_r+0xb4>
 80073ca:	4a29      	ldr	r2, [pc, #164]	; (8007470 <__sflush_r+0x100>)
 80073cc:	40ca      	lsrs	r2, r1
 80073ce:	07d6      	lsls	r6, r2, #31
 80073d0:	d528      	bpl.n	8007424 <__sflush_r+0xb4>
 80073d2:	2200      	movs	r2, #0
 80073d4:	6062      	str	r2, [r4, #4]
 80073d6:	6922      	ldr	r2, [r4, #16]
 80073d8:	04d9      	lsls	r1, r3, #19
 80073da:	6022      	str	r2, [r4, #0]
 80073dc:	d504      	bpl.n	80073e8 <__sflush_r+0x78>
 80073de:	1c42      	adds	r2, r0, #1
 80073e0:	d101      	bne.n	80073e6 <__sflush_r+0x76>
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	b903      	cbnz	r3, 80073e8 <__sflush_r+0x78>
 80073e6:	6560      	str	r0, [r4, #84]	; 0x54
 80073e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ea:	602f      	str	r7, [r5, #0]
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d0cb      	beq.n	8007388 <__sflush_r+0x18>
 80073f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073f4:	4299      	cmp	r1, r3
 80073f6:	d002      	beq.n	80073fe <__sflush_r+0x8e>
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 f9d5 	bl	80077a8 <_free_r>
 80073fe:	2000      	movs	r0, #0
 8007400:	6360      	str	r0, [r4, #52]	; 0x34
 8007402:	e7c2      	b.n	800738a <__sflush_r+0x1a>
 8007404:	6a21      	ldr	r1, [r4, #32]
 8007406:	2301      	movs	r3, #1
 8007408:	4628      	mov	r0, r5
 800740a:	47b0      	blx	r6
 800740c:	1c41      	adds	r1, r0, #1
 800740e:	d1c7      	bne.n	80073a0 <__sflush_r+0x30>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0c4      	beq.n	80073a0 <__sflush_r+0x30>
 8007416:	2b1d      	cmp	r3, #29
 8007418:	d001      	beq.n	800741e <__sflush_r+0xae>
 800741a:	2b16      	cmp	r3, #22
 800741c:	d101      	bne.n	8007422 <__sflush_r+0xb2>
 800741e:	602f      	str	r7, [r5, #0]
 8007420:	e7b2      	b.n	8007388 <__sflush_r+0x18>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007428:	81a3      	strh	r3, [r4, #12]
 800742a:	e7ae      	b.n	800738a <__sflush_r+0x1a>
 800742c:	690f      	ldr	r7, [r1, #16]
 800742e:	2f00      	cmp	r7, #0
 8007430:	d0aa      	beq.n	8007388 <__sflush_r+0x18>
 8007432:	0793      	lsls	r3, r2, #30
 8007434:	bf18      	it	ne
 8007436:	2300      	movne	r3, #0
 8007438:	680e      	ldr	r6, [r1, #0]
 800743a:	bf08      	it	eq
 800743c:	694b      	ldreq	r3, [r1, #20]
 800743e:	1bf6      	subs	r6, r6, r7
 8007440:	600f      	str	r7, [r1, #0]
 8007442:	608b      	str	r3, [r1, #8]
 8007444:	2e00      	cmp	r6, #0
 8007446:	dd9f      	ble.n	8007388 <__sflush_r+0x18>
 8007448:	4633      	mov	r3, r6
 800744a:	463a      	mov	r2, r7
 800744c:	4628      	mov	r0, r5
 800744e:	6a21      	ldr	r1, [r4, #32]
 8007450:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007454:	47e0      	blx	ip
 8007456:	2800      	cmp	r0, #0
 8007458:	dc06      	bgt.n	8007468 <__sflush_r+0xf8>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	e790      	b.n	800738a <__sflush_r+0x1a>
 8007468:	4407      	add	r7, r0
 800746a:	1a36      	subs	r6, r6, r0
 800746c:	e7ea      	b.n	8007444 <__sflush_r+0xd4>
 800746e:	bf00      	nop
 8007470:	20400001 	.word	0x20400001

08007474 <_fflush_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	690b      	ldr	r3, [r1, #16]
 8007478:	4605      	mov	r5, r0
 800747a:	460c      	mov	r4, r1
 800747c:	b913      	cbnz	r3, 8007484 <_fflush_r+0x10>
 800747e:	2500      	movs	r5, #0
 8007480:	4628      	mov	r0, r5
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	b118      	cbz	r0, 800748e <_fflush_r+0x1a>
 8007486:	6983      	ldr	r3, [r0, #24]
 8007488:	b90b      	cbnz	r3, 800748e <_fflush_r+0x1a>
 800748a:	f000 f887 	bl	800759c <__sinit>
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <_fflush_r+0x6c>)
 8007490:	429c      	cmp	r4, r3
 8007492:	d11b      	bne.n	80074cc <_fflush_r+0x58>
 8007494:	686c      	ldr	r4, [r5, #4]
 8007496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0ef      	beq.n	800747e <_fflush_r+0xa>
 800749e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074a0:	07d0      	lsls	r0, r2, #31
 80074a2:	d404      	bmi.n	80074ae <_fflush_r+0x3a>
 80074a4:	0599      	lsls	r1, r3, #22
 80074a6:	d402      	bmi.n	80074ae <_fflush_r+0x3a>
 80074a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074aa:	f000 f915 	bl	80076d8 <__retarget_lock_acquire_recursive>
 80074ae:	4628      	mov	r0, r5
 80074b0:	4621      	mov	r1, r4
 80074b2:	f7ff ff5d 	bl	8007370 <__sflush_r>
 80074b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074b8:	4605      	mov	r5, r0
 80074ba:	07da      	lsls	r2, r3, #31
 80074bc:	d4e0      	bmi.n	8007480 <_fflush_r+0xc>
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	059b      	lsls	r3, r3, #22
 80074c2:	d4dd      	bmi.n	8007480 <_fflush_r+0xc>
 80074c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c6:	f000 f908 	bl	80076da <__retarget_lock_release_recursive>
 80074ca:	e7d9      	b.n	8007480 <_fflush_r+0xc>
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <_fflush_r+0x70>)
 80074ce:	429c      	cmp	r4, r3
 80074d0:	d101      	bne.n	80074d6 <_fflush_r+0x62>
 80074d2:	68ac      	ldr	r4, [r5, #8]
 80074d4:	e7df      	b.n	8007496 <_fflush_r+0x22>
 80074d6:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <_fflush_r+0x74>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	bf08      	it	eq
 80074dc:	68ec      	ldreq	r4, [r5, #12]
 80074de:	e7da      	b.n	8007496 <_fflush_r+0x22>
 80074e0:	08009d18 	.word	0x08009d18
 80074e4:	08009d38 	.word	0x08009d38
 80074e8:	08009cf8 	.word	0x08009cf8

080074ec <std>:
 80074ec:	2300      	movs	r3, #0
 80074ee:	b510      	push	{r4, lr}
 80074f0:	4604      	mov	r4, r0
 80074f2:	e9c0 3300 	strd	r3, r3, [r0]
 80074f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074fa:	6083      	str	r3, [r0, #8]
 80074fc:	8181      	strh	r1, [r0, #12]
 80074fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007500:	81c2      	strh	r2, [r0, #14]
 8007502:	6183      	str	r3, [r0, #24]
 8007504:	4619      	mov	r1, r3
 8007506:	2208      	movs	r2, #8
 8007508:	305c      	adds	r0, #92	; 0x5c
 800750a:	f7ff fdbb 	bl	8007084 <memset>
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <std+0x38>)
 8007510:	6224      	str	r4, [r4, #32]
 8007512:	6263      	str	r3, [r4, #36]	; 0x24
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <std+0x3c>)
 8007516:	62a3      	str	r3, [r4, #40]	; 0x28
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <std+0x40>)
 800751a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800751c:	4b04      	ldr	r3, [pc, #16]	; (8007530 <std+0x44>)
 800751e:	6323      	str	r3, [r4, #48]	; 0x30
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	08008215 	.word	0x08008215
 8007528:	08008237 	.word	0x08008237
 800752c:	0800826f 	.word	0x0800826f
 8007530:	08008293 	.word	0x08008293

08007534 <_cleanup_r>:
 8007534:	4901      	ldr	r1, [pc, #4]	; (800753c <_cleanup_r+0x8>)
 8007536:	f000 b8af 	b.w	8007698 <_fwalk_reent>
 800753a:	bf00      	nop
 800753c:	08007475 	.word	0x08007475

08007540 <__sfmoreglue>:
 8007540:	2268      	movs	r2, #104	; 0x68
 8007542:	b570      	push	{r4, r5, r6, lr}
 8007544:	1e4d      	subs	r5, r1, #1
 8007546:	4355      	muls	r5, r2
 8007548:	460e      	mov	r6, r1
 800754a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800754e:	f000 f993 	bl	8007878 <_malloc_r>
 8007552:	4604      	mov	r4, r0
 8007554:	b140      	cbz	r0, 8007568 <__sfmoreglue+0x28>
 8007556:	2100      	movs	r1, #0
 8007558:	e9c0 1600 	strd	r1, r6, [r0]
 800755c:	300c      	adds	r0, #12
 800755e:	60a0      	str	r0, [r4, #8]
 8007560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007564:	f7ff fd8e 	bl	8007084 <memset>
 8007568:	4620      	mov	r0, r4
 800756a:	bd70      	pop	{r4, r5, r6, pc}

0800756c <__sfp_lock_acquire>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__sfp_lock_acquire+0x8>)
 800756e:	f000 b8b3 	b.w	80076d8 <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	200008b5 	.word	0x200008b5

08007578 <__sfp_lock_release>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__sfp_lock_release+0x8>)
 800757a:	f000 b8ae 	b.w	80076da <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	200008b5 	.word	0x200008b5

08007584 <__sinit_lock_acquire>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__sinit_lock_acquire+0x8>)
 8007586:	f000 b8a7 	b.w	80076d8 <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	200008b6 	.word	0x200008b6

08007590 <__sinit_lock_release>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__sinit_lock_release+0x8>)
 8007592:	f000 b8a2 	b.w	80076da <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	200008b6 	.word	0x200008b6

0800759c <__sinit>:
 800759c:	b510      	push	{r4, lr}
 800759e:	4604      	mov	r4, r0
 80075a0:	f7ff fff0 	bl	8007584 <__sinit_lock_acquire>
 80075a4:	69a3      	ldr	r3, [r4, #24]
 80075a6:	b11b      	cbz	r3, 80075b0 <__sinit+0x14>
 80075a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ac:	f7ff bff0 	b.w	8007590 <__sinit_lock_release>
 80075b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075b4:	6523      	str	r3, [r4, #80]	; 0x50
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <__sinit+0x68>)
 80075b8:	4a13      	ldr	r2, [pc, #76]	; (8007608 <__sinit+0x6c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80075be:	42a3      	cmp	r3, r4
 80075c0:	bf08      	it	eq
 80075c2:	2301      	moveq	r3, #1
 80075c4:	4620      	mov	r0, r4
 80075c6:	bf08      	it	eq
 80075c8:	61a3      	streq	r3, [r4, #24]
 80075ca:	f000 f81f 	bl	800760c <__sfp>
 80075ce:	6060      	str	r0, [r4, #4]
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 f81b 	bl	800760c <__sfp>
 80075d6:	60a0      	str	r0, [r4, #8]
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 f817 	bl	800760c <__sfp>
 80075de:	2200      	movs	r2, #0
 80075e0:	2104      	movs	r1, #4
 80075e2:	60e0      	str	r0, [r4, #12]
 80075e4:	6860      	ldr	r0, [r4, #4]
 80075e6:	f7ff ff81 	bl	80074ec <std>
 80075ea:	2201      	movs	r2, #1
 80075ec:	2109      	movs	r1, #9
 80075ee:	68a0      	ldr	r0, [r4, #8]
 80075f0:	f7ff ff7c 	bl	80074ec <std>
 80075f4:	2202      	movs	r2, #2
 80075f6:	2112      	movs	r1, #18
 80075f8:	68e0      	ldr	r0, [r4, #12]
 80075fa:	f7ff ff77 	bl	80074ec <std>
 80075fe:	2301      	movs	r3, #1
 8007600:	61a3      	str	r3, [r4, #24]
 8007602:	e7d1      	b.n	80075a8 <__sinit+0xc>
 8007604:	08009cf4 	.word	0x08009cf4
 8007608:	08007535 	.word	0x08007535

0800760c <__sfp>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	4607      	mov	r7, r0
 8007610:	f7ff ffac 	bl	800756c <__sfp_lock_acquire>
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <__sfp+0x84>)
 8007616:	681e      	ldr	r6, [r3, #0]
 8007618:	69b3      	ldr	r3, [r6, #24]
 800761a:	b913      	cbnz	r3, 8007622 <__sfp+0x16>
 800761c:	4630      	mov	r0, r6
 800761e:	f7ff ffbd 	bl	800759c <__sinit>
 8007622:	3648      	adds	r6, #72	; 0x48
 8007624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007628:	3b01      	subs	r3, #1
 800762a:	d503      	bpl.n	8007634 <__sfp+0x28>
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	b30b      	cbz	r3, 8007674 <__sfp+0x68>
 8007630:	6836      	ldr	r6, [r6, #0]
 8007632:	e7f7      	b.n	8007624 <__sfp+0x18>
 8007634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007638:	b9d5      	cbnz	r5, 8007670 <__sfp+0x64>
 800763a:	4b16      	ldr	r3, [pc, #88]	; (8007694 <__sfp+0x88>)
 800763c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007640:	60e3      	str	r3, [r4, #12]
 8007642:	6665      	str	r5, [r4, #100]	; 0x64
 8007644:	f000 f847 	bl	80076d6 <__retarget_lock_init_recursive>
 8007648:	f7ff ff96 	bl	8007578 <__sfp_lock_release>
 800764c:	2208      	movs	r2, #8
 800764e:	4629      	mov	r1, r5
 8007650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007658:	6025      	str	r5, [r4, #0]
 800765a:	61a5      	str	r5, [r4, #24]
 800765c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007660:	f7ff fd10 	bl	8007084 <memset>
 8007664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800766c:	4620      	mov	r0, r4
 800766e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007670:	3468      	adds	r4, #104	; 0x68
 8007672:	e7d9      	b.n	8007628 <__sfp+0x1c>
 8007674:	2104      	movs	r1, #4
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff ff62 	bl	8007540 <__sfmoreglue>
 800767c:	4604      	mov	r4, r0
 800767e:	6030      	str	r0, [r6, #0]
 8007680:	2800      	cmp	r0, #0
 8007682:	d1d5      	bne.n	8007630 <__sfp+0x24>
 8007684:	f7ff ff78 	bl	8007578 <__sfp_lock_release>
 8007688:	230c      	movs	r3, #12
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	e7ee      	b.n	800766c <__sfp+0x60>
 800768e:	bf00      	nop
 8007690:	08009cf4 	.word	0x08009cf4
 8007694:	ffff0001 	.word	0xffff0001

08007698 <_fwalk_reent>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	4606      	mov	r6, r0
 800769e:	4688      	mov	r8, r1
 80076a0:	2700      	movs	r7, #0
 80076a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076aa:	f1b9 0901 	subs.w	r9, r9, #1
 80076ae:	d505      	bpl.n	80076bc <_fwalk_reent+0x24>
 80076b0:	6824      	ldr	r4, [r4, #0]
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d1f7      	bne.n	80076a6 <_fwalk_reent+0xe>
 80076b6:	4638      	mov	r0, r7
 80076b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076bc:	89ab      	ldrh	r3, [r5, #12]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d907      	bls.n	80076d2 <_fwalk_reent+0x3a>
 80076c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c6:	3301      	adds	r3, #1
 80076c8:	d003      	beq.n	80076d2 <_fwalk_reent+0x3a>
 80076ca:	4629      	mov	r1, r5
 80076cc:	4630      	mov	r0, r6
 80076ce:	47c0      	blx	r8
 80076d0:	4307      	orrs	r7, r0
 80076d2:	3568      	adds	r5, #104	; 0x68
 80076d4:	e7e9      	b.n	80076aa <_fwalk_reent+0x12>

080076d6 <__retarget_lock_init_recursive>:
 80076d6:	4770      	bx	lr

080076d8 <__retarget_lock_acquire_recursive>:
 80076d8:	4770      	bx	lr

080076da <__retarget_lock_release_recursive>:
 80076da:	4770      	bx	lr

080076dc <__swhatbuf_r>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	460e      	mov	r6, r1
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	4614      	mov	r4, r2
 80076e6:	2900      	cmp	r1, #0
 80076e8:	461d      	mov	r5, r3
 80076ea:	b096      	sub	sp, #88	; 0x58
 80076ec:	da08      	bge.n	8007700 <__swhatbuf_r+0x24>
 80076ee:	2200      	movs	r2, #0
 80076f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	061a      	lsls	r2, r3, #24
 80076f8:	d410      	bmi.n	800771c <__swhatbuf_r+0x40>
 80076fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076fe:	e00e      	b.n	800771e <__swhatbuf_r+0x42>
 8007700:	466a      	mov	r2, sp
 8007702:	f000 fded 	bl	80082e0 <_fstat_r>
 8007706:	2800      	cmp	r0, #0
 8007708:	dbf1      	blt.n	80076ee <__swhatbuf_r+0x12>
 800770a:	9a01      	ldr	r2, [sp, #4]
 800770c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007714:	425a      	negs	r2, r3
 8007716:	415a      	adcs	r2, r3
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	e7ee      	b.n	80076fa <__swhatbuf_r+0x1e>
 800771c:	2340      	movs	r3, #64	; 0x40
 800771e:	2000      	movs	r0, #0
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	b016      	add	sp, #88	; 0x58
 8007724:	bd70      	pop	{r4, r5, r6, pc}
	...

08007728 <__smakebuf_r>:
 8007728:	898b      	ldrh	r3, [r1, #12]
 800772a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800772c:	079d      	lsls	r5, r3, #30
 800772e:	4606      	mov	r6, r0
 8007730:	460c      	mov	r4, r1
 8007732:	d507      	bpl.n	8007744 <__smakebuf_r+0x1c>
 8007734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	2301      	movs	r3, #1
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	b002      	add	sp, #8
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	466a      	mov	r2, sp
 8007746:	ab01      	add	r3, sp, #4
 8007748:	f7ff ffc8 	bl	80076dc <__swhatbuf_r>
 800774c:	9900      	ldr	r1, [sp, #0]
 800774e:	4605      	mov	r5, r0
 8007750:	4630      	mov	r0, r6
 8007752:	f000 f891 	bl	8007878 <_malloc_r>
 8007756:	b948      	cbnz	r0, 800776c <__smakebuf_r+0x44>
 8007758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775c:	059a      	lsls	r2, r3, #22
 800775e:	d4ef      	bmi.n	8007740 <__smakebuf_r+0x18>
 8007760:	f023 0303 	bic.w	r3, r3, #3
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	e7e3      	b.n	8007734 <__smakebuf_r+0xc>
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <__smakebuf_r+0x7c>)
 800776e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	6020      	str	r0, [r4, #0]
 8007774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	9b00      	ldr	r3, [sp, #0]
 800777c:	6120      	str	r0, [r4, #16]
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	9b01      	ldr	r3, [sp, #4]
 8007782:	b15b      	cbz	r3, 800779c <__smakebuf_r+0x74>
 8007784:	4630      	mov	r0, r6
 8007786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778a:	f000 fdbb 	bl	8008304 <_isatty_r>
 800778e:	b128      	cbz	r0, 800779c <__smakebuf_r+0x74>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	89a0      	ldrh	r0, [r4, #12]
 800779e:	4305      	orrs	r5, r0
 80077a0:	81a5      	strh	r5, [r4, #12]
 80077a2:	e7cd      	b.n	8007740 <__smakebuf_r+0x18>
 80077a4:	08007535 	.word	0x08007535

080077a8 <_free_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4605      	mov	r5, r0
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d040      	beq.n	8007832 <_free_r+0x8a>
 80077b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b4:	1f0c      	subs	r4, r1, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfb8      	it	lt
 80077ba:	18e4      	addlt	r4, r4, r3
 80077bc:	f000 fdfa 	bl	80083b4 <__malloc_lock>
 80077c0:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <_free_r+0x8c>)
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	b933      	cbnz	r3, 80077d4 <_free_r+0x2c>
 80077c6:	6063      	str	r3, [r4, #4]
 80077c8:	6014      	str	r4, [r2, #0]
 80077ca:	4628      	mov	r0, r5
 80077cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077d0:	f000 bdf6 	b.w	80083c0 <__malloc_unlock>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d908      	bls.n	80077ea <_free_r+0x42>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	1821      	adds	r1, r4, r0
 80077dc:	428b      	cmp	r3, r1
 80077de:	bf01      	itttt	eq
 80077e0:	6819      	ldreq	r1, [r3, #0]
 80077e2:	685b      	ldreq	r3, [r3, #4]
 80077e4:	1809      	addeq	r1, r1, r0
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	e7ed      	b.n	80077c6 <_free_r+0x1e>
 80077ea:	461a      	mov	r2, r3
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b10b      	cbz	r3, 80077f4 <_free_r+0x4c>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d9fa      	bls.n	80077ea <_free_r+0x42>
 80077f4:	6811      	ldr	r1, [r2, #0]
 80077f6:	1850      	adds	r0, r2, r1
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d10b      	bne.n	8007814 <_free_r+0x6c>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	4401      	add	r1, r0
 8007800:	1850      	adds	r0, r2, r1
 8007802:	4283      	cmp	r3, r0
 8007804:	6011      	str	r1, [r2, #0]
 8007806:	d1e0      	bne.n	80077ca <_free_r+0x22>
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4401      	add	r1, r0
 800780e:	6011      	str	r1, [r2, #0]
 8007810:	6053      	str	r3, [r2, #4]
 8007812:	e7da      	b.n	80077ca <_free_r+0x22>
 8007814:	d902      	bls.n	800781c <_free_r+0x74>
 8007816:	230c      	movs	r3, #12
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	e7d6      	b.n	80077ca <_free_r+0x22>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	1821      	adds	r1, r4, r0
 8007820:	428b      	cmp	r3, r1
 8007822:	bf01      	itttt	eq
 8007824:	6819      	ldreq	r1, [r3, #0]
 8007826:	685b      	ldreq	r3, [r3, #4]
 8007828:	1809      	addeq	r1, r1, r0
 800782a:	6021      	streq	r1, [r4, #0]
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	6054      	str	r4, [r2, #4]
 8007830:	e7cb      	b.n	80077ca <_free_r+0x22>
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	200008b8 	.word	0x200008b8

08007838 <sbrk_aligned>:
 8007838:	b570      	push	{r4, r5, r6, lr}
 800783a:	4e0e      	ldr	r6, [pc, #56]	; (8007874 <sbrk_aligned+0x3c>)
 800783c:	460c      	mov	r4, r1
 800783e:	6831      	ldr	r1, [r6, #0]
 8007840:	4605      	mov	r5, r0
 8007842:	b911      	cbnz	r1, 800784a <sbrk_aligned+0x12>
 8007844:	f000 fcd6 	bl	80081f4 <_sbrk_r>
 8007848:	6030      	str	r0, [r6, #0]
 800784a:	4621      	mov	r1, r4
 800784c:	4628      	mov	r0, r5
 800784e:	f000 fcd1 	bl	80081f4 <_sbrk_r>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d00a      	beq.n	800786c <sbrk_aligned+0x34>
 8007856:	1cc4      	adds	r4, r0, #3
 8007858:	f024 0403 	bic.w	r4, r4, #3
 800785c:	42a0      	cmp	r0, r4
 800785e:	d007      	beq.n	8007870 <sbrk_aligned+0x38>
 8007860:	1a21      	subs	r1, r4, r0
 8007862:	4628      	mov	r0, r5
 8007864:	f000 fcc6 	bl	80081f4 <_sbrk_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d101      	bne.n	8007870 <sbrk_aligned+0x38>
 800786c:	f04f 34ff 	mov.w	r4, #4294967295
 8007870:	4620      	mov	r0, r4
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	200008bc 	.word	0x200008bc

08007878 <_malloc_r>:
 8007878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787c:	1ccd      	adds	r5, r1, #3
 800787e:	f025 0503 	bic.w	r5, r5, #3
 8007882:	3508      	adds	r5, #8
 8007884:	2d0c      	cmp	r5, #12
 8007886:	bf38      	it	cc
 8007888:	250c      	movcc	r5, #12
 800788a:	2d00      	cmp	r5, #0
 800788c:	4607      	mov	r7, r0
 800788e:	db01      	blt.n	8007894 <_malloc_r+0x1c>
 8007890:	42a9      	cmp	r1, r5
 8007892:	d905      	bls.n	80078a0 <_malloc_r+0x28>
 8007894:	230c      	movs	r3, #12
 8007896:	2600      	movs	r6, #0
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4630      	mov	r0, r6
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	4e2e      	ldr	r6, [pc, #184]	; (800795c <_malloc_r+0xe4>)
 80078a2:	f000 fd87 	bl	80083b4 <__malloc_lock>
 80078a6:	6833      	ldr	r3, [r6, #0]
 80078a8:	461c      	mov	r4, r3
 80078aa:	bb34      	cbnz	r4, 80078fa <_malloc_r+0x82>
 80078ac:	4629      	mov	r1, r5
 80078ae:	4638      	mov	r0, r7
 80078b0:	f7ff ffc2 	bl	8007838 <sbrk_aligned>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	4604      	mov	r4, r0
 80078b8:	d14d      	bne.n	8007956 <_malloc_r+0xde>
 80078ba:	6834      	ldr	r4, [r6, #0]
 80078bc:	4626      	mov	r6, r4
 80078be:	2e00      	cmp	r6, #0
 80078c0:	d140      	bne.n	8007944 <_malloc_r+0xcc>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	4631      	mov	r1, r6
 80078c6:	4638      	mov	r0, r7
 80078c8:	eb04 0803 	add.w	r8, r4, r3
 80078cc:	f000 fc92 	bl	80081f4 <_sbrk_r>
 80078d0:	4580      	cmp	r8, r0
 80078d2:	d13a      	bne.n	800794a <_malloc_r+0xd2>
 80078d4:	6821      	ldr	r1, [r4, #0]
 80078d6:	3503      	adds	r5, #3
 80078d8:	1a6d      	subs	r5, r5, r1
 80078da:	f025 0503 	bic.w	r5, r5, #3
 80078de:	3508      	adds	r5, #8
 80078e0:	2d0c      	cmp	r5, #12
 80078e2:	bf38      	it	cc
 80078e4:	250c      	movcc	r5, #12
 80078e6:	4638      	mov	r0, r7
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7ff ffa5 	bl	8007838 <sbrk_aligned>
 80078ee:	3001      	adds	r0, #1
 80078f0:	d02b      	beq.n	800794a <_malloc_r+0xd2>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	442b      	add	r3, r5
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	e00e      	b.n	8007918 <_malloc_r+0xa0>
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	1b52      	subs	r2, r2, r5
 80078fe:	d41e      	bmi.n	800793e <_malloc_r+0xc6>
 8007900:	2a0b      	cmp	r2, #11
 8007902:	d916      	bls.n	8007932 <_malloc_r+0xba>
 8007904:	1961      	adds	r1, r4, r5
 8007906:	42a3      	cmp	r3, r4
 8007908:	6025      	str	r5, [r4, #0]
 800790a:	bf18      	it	ne
 800790c:	6059      	strne	r1, [r3, #4]
 800790e:	6863      	ldr	r3, [r4, #4]
 8007910:	bf08      	it	eq
 8007912:	6031      	streq	r1, [r6, #0]
 8007914:	5162      	str	r2, [r4, r5]
 8007916:	604b      	str	r3, [r1, #4]
 8007918:	4638      	mov	r0, r7
 800791a:	f104 060b 	add.w	r6, r4, #11
 800791e:	f000 fd4f 	bl	80083c0 <__malloc_unlock>
 8007922:	f026 0607 	bic.w	r6, r6, #7
 8007926:	1d23      	adds	r3, r4, #4
 8007928:	1af2      	subs	r2, r6, r3
 800792a:	d0b6      	beq.n	800789a <_malloc_r+0x22>
 800792c:	1b9b      	subs	r3, r3, r6
 800792e:	50a3      	str	r3, [r4, r2]
 8007930:	e7b3      	b.n	800789a <_malloc_r+0x22>
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	42a3      	cmp	r3, r4
 8007936:	bf0c      	ite	eq
 8007938:	6032      	streq	r2, [r6, #0]
 800793a:	605a      	strne	r2, [r3, #4]
 800793c:	e7ec      	b.n	8007918 <_malloc_r+0xa0>
 800793e:	4623      	mov	r3, r4
 8007940:	6864      	ldr	r4, [r4, #4]
 8007942:	e7b2      	b.n	80078aa <_malloc_r+0x32>
 8007944:	4634      	mov	r4, r6
 8007946:	6876      	ldr	r6, [r6, #4]
 8007948:	e7b9      	b.n	80078be <_malloc_r+0x46>
 800794a:	230c      	movs	r3, #12
 800794c:	4638      	mov	r0, r7
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	f000 fd36 	bl	80083c0 <__malloc_unlock>
 8007954:	e7a1      	b.n	800789a <_malloc_r+0x22>
 8007956:	6025      	str	r5, [r4, #0]
 8007958:	e7de      	b.n	8007918 <_malloc_r+0xa0>
 800795a:	bf00      	nop
 800795c:	200008b8 	.word	0x200008b8

08007960 <__ssputs_r>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	688e      	ldr	r6, [r1, #8]
 8007966:	4682      	mov	sl, r0
 8007968:	429e      	cmp	r6, r3
 800796a:	460c      	mov	r4, r1
 800796c:	4690      	mov	r8, r2
 800796e:	461f      	mov	r7, r3
 8007970:	d838      	bhi.n	80079e4 <__ssputs_r+0x84>
 8007972:	898a      	ldrh	r2, [r1, #12]
 8007974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007978:	d032      	beq.n	80079e0 <__ssputs_r+0x80>
 800797a:	6825      	ldr	r5, [r4, #0]
 800797c:	6909      	ldr	r1, [r1, #16]
 800797e:	3301      	adds	r3, #1
 8007980:	eba5 0901 	sub.w	r9, r5, r1
 8007984:	6965      	ldr	r5, [r4, #20]
 8007986:	444b      	add	r3, r9
 8007988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800798c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007990:	106d      	asrs	r5, r5, #1
 8007992:	429d      	cmp	r5, r3
 8007994:	bf38      	it	cc
 8007996:	461d      	movcc	r5, r3
 8007998:	0553      	lsls	r3, r2, #21
 800799a:	d531      	bpl.n	8007a00 <__ssputs_r+0xa0>
 800799c:	4629      	mov	r1, r5
 800799e:	f7ff ff6b 	bl	8007878 <_malloc_r>
 80079a2:	4606      	mov	r6, r0
 80079a4:	b950      	cbnz	r0, 80079bc <__ssputs_r+0x5c>
 80079a6:	230c      	movs	r3, #12
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	f8ca 3000 	str.w	r3, [sl]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	464a      	mov	r2, r9
 80079be:	6921      	ldr	r1, [r4, #16]
 80079c0:	f000 fcd0 	bl	8008364 <memcpy>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	6126      	str	r6, [r4, #16]
 80079d2:	444e      	add	r6, r9
 80079d4:	6026      	str	r6, [r4, #0]
 80079d6:	463e      	mov	r6, r7
 80079d8:	6165      	str	r5, [r4, #20]
 80079da:	eba5 0509 	sub.w	r5, r5, r9
 80079de:	60a5      	str	r5, [r4, #8]
 80079e0:	42be      	cmp	r6, r7
 80079e2:	d900      	bls.n	80079e6 <__ssputs_r+0x86>
 80079e4:	463e      	mov	r6, r7
 80079e6:	4632      	mov	r2, r6
 80079e8:	4641      	mov	r1, r8
 80079ea:	6820      	ldr	r0, [r4, #0]
 80079ec:	f000 fcc8 	bl	8008380 <memmove>
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	2000      	movs	r0, #0
 80079f4:	1b9b      	subs	r3, r3, r6
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	4433      	add	r3, r6
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	e7db      	b.n	80079b8 <__ssputs_r+0x58>
 8007a00:	462a      	mov	r2, r5
 8007a02:	f000 fce3 	bl	80083cc <_realloc_r>
 8007a06:	4606      	mov	r6, r0
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d1e1      	bne.n	80079d0 <__ssputs_r+0x70>
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	6921      	ldr	r1, [r4, #16]
 8007a10:	f7ff feca 	bl	80077a8 <_free_r>
 8007a14:	e7c7      	b.n	80079a6 <__ssputs_r+0x46>
	...

08007a18 <_svfiprintf_r>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	4698      	mov	r8, r3
 8007a1e:	898b      	ldrh	r3, [r1, #12]
 8007a20:	4607      	mov	r7, r0
 8007a22:	061b      	lsls	r3, r3, #24
 8007a24:	460d      	mov	r5, r1
 8007a26:	4614      	mov	r4, r2
 8007a28:	b09d      	sub	sp, #116	; 0x74
 8007a2a:	d50e      	bpl.n	8007a4a <_svfiprintf_r+0x32>
 8007a2c:	690b      	ldr	r3, [r1, #16]
 8007a2e:	b963      	cbnz	r3, 8007a4a <_svfiprintf_r+0x32>
 8007a30:	2140      	movs	r1, #64	; 0x40
 8007a32:	f7ff ff21 	bl	8007878 <_malloc_r>
 8007a36:	6028      	str	r0, [r5, #0]
 8007a38:	6128      	str	r0, [r5, #16]
 8007a3a:	b920      	cbnz	r0, 8007a46 <_svfiprintf_r+0x2e>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e0d1      	b.n	8007bea <_svfiprintf_r+0x1d2>
 8007a46:	2340      	movs	r3, #64	; 0x40
 8007a48:	616b      	str	r3, [r5, #20]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4e:	2320      	movs	r3, #32
 8007a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a54:	2330      	movs	r3, #48	; 0x30
 8007a56:	f04f 0901 	mov.w	r9, #1
 8007a5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c04 <_svfiprintf_r+0x1ec>
 8007a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a66:	4623      	mov	r3, r4
 8007a68:	469a      	mov	sl, r3
 8007a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6e:	b10a      	cbz	r2, 8007a74 <_svfiprintf_r+0x5c>
 8007a70:	2a25      	cmp	r2, #37	; 0x25
 8007a72:	d1f9      	bne.n	8007a68 <_svfiprintf_r+0x50>
 8007a74:	ebba 0b04 	subs.w	fp, sl, r4
 8007a78:	d00b      	beq.n	8007a92 <_svfiprintf_r+0x7a>
 8007a7a:	465b      	mov	r3, fp
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff ff6d 	bl	8007960 <__ssputs_r>
 8007a86:	3001      	adds	r0, #1
 8007a88:	f000 80aa 	beq.w	8007be0 <_svfiprintf_r+0x1c8>
 8007a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8e:	445a      	add	r2, fp
 8007a90:	9209      	str	r2, [sp, #36]	; 0x24
 8007a92:	f89a 3000 	ldrb.w	r3, [sl]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80a2 	beq.w	8007be0 <_svfiprintf_r+0x1c8>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa6:	f10a 0a01 	add.w	sl, sl, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	9307      	str	r3, [sp, #28]
 8007aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ab4:	4654      	mov	r4, sl
 8007ab6:	2205      	movs	r2, #5
 8007ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abc:	4851      	ldr	r0, [pc, #324]	; (8007c04 <_svfiprintf_r+0x1ec>)
 8007abe:	f000 fc43 	bl	8008348 <memchr>
 8007ac2:	9a04      	ldr	r2, [sp, #16]
 8007ac4:	b9d8      	cbnz	r0, 8007afe <_svfiprintf_r+0xe6>
 8007ac6:	06d0      	lsls	r0, r2, #27
 8007ac8:	bf44      	itt	mi
 8007aca:	2320      	movmi	r3, #32
 8007acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad0:	0711      	lsls	r1, r2, #28
 8007ad2:	bf44      	itt	mi
 8007ad4:	232b      	movmi	r3, #43	; 0x2b
 8007ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ada:	f89a 3000 	ldrb.w	r3, [sl]
 8007ade:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae0:	d015      	beq.n	8007b0e <_svfiprintf_r+0xf6>
 8007ae2:	4654      	mov	r4, sl
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	f04f 0c0a 	mov.w	ip, #10
 8007aea:	9a07      	ldr	r2, [sp, #28]
 8007aec:	4621      	mov	r1, r4
 8007aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af2:	3b30      	subs	r3, #48	; 0x30
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	d94e      	bls.n	8007b96 <_svfiprintf_r+0x17e>
 8007af8:	b1b0      	cbz	r0, 8007b28 <_svfiprintf_r+0x110>
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	e014      	b.n	8007b28 <_svfiprintf_r+0x110>
 8007afe:	eba0 0308 	sub.w	r3, r0, r8
 8007b02:	fa09 f303 	lsl.w	r3, r9, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	46a2      	mov	sl, r4
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	e7d2      	b.n	8007ab4 <_svfiprintf_r+0x9c>
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	1d19      	adds	r1, r3, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	9103      	str	r1, [sp, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfbb      	ittet	lt
 8007b1a:	425b      	neglt	r3, r3
 8007b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b20:	9307      	strge	r3, [sp, #28]
 8007b22:	9307      	strlt	r3, [sp, #28]
 8007b24:	bfb8      	it	lt
 8007b26:	9204      	strlt	r2, [sp, #16]
 8007b28:	7823      	ldrb	r3, [r4, #0]
 8007b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b2c:	d10c      	bne.n	8007b48 <_svfiprintf_r+0x130>
 8007b2e:	7863      	ldrb	r3, [r4, #1]
 8007b30:	2b2a      	cmp	r3, #42	; 0x2a
 8007b32:	d135      	bne.n	8007ba0 <_svfiprintf_r+0x188>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	3402      	adds	r4, #2
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9203      	str	r2, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfb8      	it	lt
 8007b42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b46:	9305      	str	r3, [sp, #20]
 8007b48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007c08 <_svfiprintf_r+0x1f0>
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	4650      	mov	r0, sl
 8007b50:	7821      	ldrb	r1, [r4, #0]
 8007b52:	f000 fbf9 	bl	8008348 <memchr>
 8007b56:	b140      	cbz	r0, 8007b6a <_svfiprintf_r+0x152>
 8007b58:	2340      	movs	r3, #64	; 0x40
 8007b5a:	eba0 000a 	sub.w	r0, r0, sl
 8007b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b62:	9b04      	ldr	r3, [sp, #16]
 8007b64:	3401      	adds	r4, #1
 8007b66:	4303      	orrs	r3, r0
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6e:	2206      	movs	r2, #6
 8007b70:	4826      	ldr	r0, [pc, #152]	; (8007c0c <_svfiprintf_r+0x1f4>)
 8007b72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b76:	f000 fbe7 	bl	8008348 <memchr>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d038      	beq.n	8007bf0 <_svfiprintf_r+0x1d8>
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <_svfiprintf_r+0x1f8>)
 8007b80:	bb1b      	cbnz	r3, 8007bca <_svfiprintf_r+0x1b2>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	3307      	adds	r3, #7
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b90:	4433      	add	r3, r6
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	e767      	b.n	8007a66 <_svfiprintf_r+0x4e>
 8007b96:	460c      	mov	r4, r1
 8007b98:	2001      	movs	r0, #1
 8007b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b9e:	e7a5      	b.n	8007aec <_svfiprintf_r+0xd4>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	3401      	adds	r4, #1
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	4620      	mov	r0, r4
 8007bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bb2:	3a30      	subs	r2, #48	; 0x30
 8007bb4:	2a09      	cmp	r2, #9
 8007bb6:	d903      	bls.n	8007bc0 <_svfiprintf_r+0x1a8>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0c5      	beq.n	8007b48 <_svfiprintf_r+0x130>
 8007bbc:	9105      	str	r1, [sp, #20]
 8007bbe:	e7c3      	b.n	8007b48 <_svfiprintf_r+0x130>
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc8:	e7f0      	b.n	8007bac <_svfiprintf_r+0x194>
 8007bca:	ab03      	add	r3, sp, #12
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	462a      	mov	r2, r5
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <_svfiprintf_r+0x1fc>)
 8007bd4:	a904      	add	r1, sp, #16
 8007bd6:	f3af 8000 	nop.w
 8007bda:	1c42      	adds	r2, r0, #1
 8007bdc:	4606      	mov	r6, r0
 8007bde:	d1d6      	bne.n	8007b8e <_svfiprintf_r+0x176>
 8007be0:	89ab      	ldrh	r3, [r5, #12]
 8007be2:	065b      	lsls	r3, r3, #25
 8007be4:	f53f af2c 	bmi.w	8007a40 <_svfiprintf_r+0x28>
 8007be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bea:	b01d      	add	sp, #116	; 0x74
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf0:	ab03      	add	r3, sp, #12
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <_svfiprintf_r+0x1fc>)
 8007bfa:	a904      	add	r1, sp, #16
 8007bfc:	f000 f9d4 	bl	8007fa8 <_printf_i>
 8007c00:	e7eb      	b.n	8007bda <_svfiprintf_r+0x1c2>
 8007c02:	bf00      	nop
 8007c04:	08009d58 	.word	0x08009d58
 8007c08:	08009d5e 	.word	0x08009d5e
 8007c0c:	08009d62 	.word	0x08009d62
 8007c10:	00000000 	.word	0x00000000
 8007c14:	08007961 	.word	0x08007961

08007c18 <__sfputc_r>:
 8007c18:	6893      	ldr	r3, [r2, #8]
 8007c1a:	b410      	push	{r4}
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	6093      	str	r3, [r2, #8]
 8007c22:	da07      	bge.n	8007c34 <__sfputc_r+0x1c>
 8007c24:	6994      	ldr	r4, [r2, #24]
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	db01      	blt.n	8007c2e <__sfputc_r+0x16>
 8007c2a:	290a      	cmp	r1, #10
 8007c2c:	d102      	bne.n	8007c34 <__sfputc_r+0x1c>
 8007c2e:	bc10      	pop	{r4}
 8007c30:	f7ff bade 	b.w	80071f0 <__swbuf_r>
 8007c34:	6813      	ldr	r3, [r2, #0]
 8007c36:	1c58      	adds	r0, r3, #1
 8007c38:	6010      	str	r0, [r2, #0]
 8007c3a:	7019      	strb	r1, [r3, #0]
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	bc10      	pop	{r4}
 8007c40:	4770      	bx	lr

08007c42 <__sfputs_r>:
 8007c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c44:	4606      	mov	r6, r0
 8007c46:	460f      	mov	r7, r1
 8007c48:	4614      	mov	r4, r2
 8007c4a:	18d5      	adds	r5, r2, r3
 8007c4c:	42ac      	cmp	r4, r5
 8007c4e:	d101      	bne.n	8007c54 <__sfputs_r+0x12>
 8007c50:	2000      	movs	r0, #0
 8007c52:	e007      	b.n	8007c64 <__sfputs_r+0x22>
 8007c54:	463a      	mov	r2, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5c:	f7ff ffdc 	bl	8007c18 <__sfputc_r>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d1f3      	bne.n	8007c4c <__sfputs_r+0xa>
 8007c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c68 <_vfiprintf_r>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	4614      	mov	r4, r2
 8007c70:	4698      	mov	r8, r3
 8007c72:	4606      	mov	r6, r0
 8007c74:	b09d      	sub	sp, #116	; 0x74
 8007c76:	b118      	cbz	r0, 8007c80 <_vfiprintf_r+0x18>
 8007c78:	6983      	ldr	r3, [r0, #24]
 8007c7a:	b90b      	cbnz	r3, 8007c80 <_vfiprintf_r+0x18>
 8007c7c:	f7ff fc8e 	bl	800759c <__sinit>
 8007c80:	4b89      	ldr	r3, [pc, #548]	; (8007ea8 <_vfiprintf_r+0x240>)
 8007c82:	429d      	cmp	r5, r3
 8007c84:	d11b      	bne.n	8007cbe <_vfiprintf_r+0x56>
 8007c86:	6875      	ldr	r5, [r6, #4]
 8007c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c8a:	07d9      	lsls	r1, r3, #31
 8007c8c:	d405      	bmi.n	8007c9a <_vfiprintf_r+0x32>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	059a      	lsls	r2, r3, #22
 8007c92:	d402      	bmi.n	8007c9a <_vfiprintf_r+0x32>
 8007c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c96:	f7ff fd1f 	bl	80076d8 <__retarget_lock_acquire_recursive>
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	071b      	lsls	r3, r3, #28
 8007c9e:	d501      	bpl.n	8007ca4 <_vfiprintf_r+0x3c>
 8007ca0:	692b      	ldr	r3, [r5, #16]
 8007ca2:	b9eb      	cbnz	r3, 8007ce0 <_vfiprintf_r+0x78>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff faf4 	bl	8007294 <__swsetup_r>
 8007cac:	b1c0      	cbz	r0, 8007ce0 <_vfiprintf_r+0x78>
 8007cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb0:	07dc      	lsls	r4, r3, #31
 8007cb2:	d50e      	bpl.n	8007cd2 <_vfiprintf_r+0x6a>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	b01d      	add	sp, #116	; 0x74
 8007cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbe:	4b7b      	ldr	r3, [pc, #492]	; (8007eac <_vfiprintf_r+0x244>)
 8007cc0:	429d      	cmp	r5, r3
 8007cc2:	d101      	bne.n	8007cc8 <_vfiprintf_r+0x60>
 8007cc4:	68b5      	ldr	r5, [r6, #8]
 8007cc6:	e7df      	b.n	8007c88 <_vfiprintf_r+0x20>
 8007cc8:	4b79      	ldr	r3, [pc, #484]	; (8007eb0 <_vfiprintf_r+0x248>)
 8007cca:	429d      	cmp	r5, r3
 8007ccc:	bf08      	it	eq
 8007cce:	68f5      	ldreq	r5, [r6, #12]
 8007cd0:	e7da      	b.n	8007c88 <_vfiprintf_r+0x20>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	0598      	lsls	r0, r3, #22
 8007cd6:	d4ed      	bmi.n	8007cb4 <_vfiprintf_r+0x4c>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cda:	f7ff fcfe 	bl	80076da <__retarget_lock_release_recursive>
 8007cde:	e7e9      	b.n	8007cb4 <_vfiprintf_r+0x4c>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cea:	2330      	movs	r3, #48	; 0x30
 8007cec:	f04f 0901 	mov.w	r9, #1
 8007cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cf4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007eb4 <_vfiprintf_r+0x24c>
 8007cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cfc:	4623      	mov	r3, r4
 8007cfe:	469a      	mov	sl, r3
 8007d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d04:	b10a      	cbz	r2, 8007d0a <_vfiprintf_r+0xa2>
 8007d06:	2a25      	cmp	r2, #37	; 0x25
 8007d08:	d1f9      	bne.n	8007cfe <_vfiprintf_r+0x96>
 8007d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d0e:	d00b      	beq.n	8007d28 <_vfiprintf_r+0xc0>
 8007d10:	465b      	mov	r3, fp
 8007d12:	4622      	mov	r2, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ff93 	bl	8007c42 <__sfputs_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f000 80aa 	beq.w	8007e76 <_vfiprintf_r+0x20e>
 8007d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d24:	445a      	add	r2, fp
 8007d26:	9209      	str	r2, [sp, #36]	; 0x24
 8007d28:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80a2 	beq.w	8007e76 <_vfiprintf_r+0x20e>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f04f 32ff 	mov.w	r2, #4294967295
 8007d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d3c:	f10a 0a01 	add.w	sl, sl, #1
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	9307      	str	r3, [sp, #28]
 8007d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d48:	931a      	str	r3, [sp, #104]	; 0x68
 8007d4a:	4654      	mov	r4, sl
 8007d4c:	2205      	movs	r2, #5
 8007d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d52:	4858      	ldr	r0, [pc, #352]	; (8007eb4 <_vfiprintf_r+0x24c>)
 8007d54:	f000 faf8 	bl	8008348 <memchr>
 8007d58:	9a04      	ldr	r2, [sp, #16]
 8007d5a:	b9d8      	cbnz	r0, 8007d94 <_vfiprintf_r+0x12c>
 8007d5c:	06d1      	lsls	r1, r2, #27
 8007d5e:	bf44      	itt	mi
 8007d60:	2320      	movmi	r3, #32
 8007d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d66:	0713      	lsls	r3, r2, #28
 8007d68:	bf44      	itt	mi
 8007d6a:	232b      	movmi	r3, #43	; 0x2b
 8007d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d70:	f89a 3000 	ldrb.w	r3, [sl]
 8007d74:	2b2a      	cmp	r3, #42	; 0x2a
 8007d76:	d015      	beq.n	8007da4 <_vfiprintf_r+0x13c>
 8007d78:	4654      	mov	r4, sl
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f04f 0c0a 	mov.w	ip, #10
 8007d80:	9a07      	ldr	r2, [sp, #28]
 8007d82:	4621      	mov	r1, r4
 8007d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d88:	3b30      	subs	r3, #48	; 0x30
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d94e      	bls.n	8007e2c <_vfiprintf_r+0x1c4>
 8007d8e:	b1b0      	cbz	r0, 8007dbe <_vfiprintf_r+0x156>
 8007d90:	9207      	str	r2, [sp, #28]
 8007d92:	e014      	b.n	8007dbe <_vfiprintf_r+0x156>
 8007d94:	eba0 0308 	sub.w	r3, r0, r8
 8007d98:	fa09 f303 	lsl.w	r3, r9, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	46a2      	mov	sl, r4
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	e7d2      	b.n	8007d4a <_vfiprintf_r+0xe2>
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	1d19      	adds	r1, r3, #4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	9103      	str	r1, [sp, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfbb      	ittet	lt
 8007db0:	425b      	neglt	r3, r3
 8007db2:	f042 0202 	orrlt.w	r2, r2, #2
 8007db6:	9307      	strge	r3, [sp, #28]
 8007db8:	9307      	strlt	r3, [sp, #28]
 8007dba:	bfb8      	it	lt
 8007dbc:	9204      	strlt	r2, [sp, #16]
 8007dbe:	7823      	ldrb	r3, [r4, #0]
 8007dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8007dc2:	d10c      	bne.n	8007dde <_vfiprintf_r+0x176>
 8007dc4:	7863      	ldrb	r3, [r4, #1]
 8007dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc8:	d135      	bne.n	8007e36 <_vfiprintf_r+0x1ce>
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	3402      	adds	r4, #2
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	9203      	str	r2, [sp, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfb8      	it	lt
 8007dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007eb8 <_vfiprintf_r+0x250>
 8007de2:	2203      	movs	r2, #3
 8007de4:	4650      	mov	r0, sl
 8007de6:	7821      	ldrb	r1, [r4, #0]
 8007de8:	f000 faae 	bl	8008348 <memchr>
 8007dec:	b140      	cbz	r0, 8007e00 <_vfiprintf_r+0x198>
 8007dee:	2340      	movs	r3, #64	; 0x40
 8007df0:	eba0 000a 	sub.w	r0, r0, sl
 8007df4:	fa03 f000 	lsl.w	r0, r3, r0
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	4303      	orrs	r3, r0
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e04:	2206      	movs	r2, #6
 8007e06:	482d      	ldr	r0, [pc, #180]	; (8007ebc <_vfiprintf_r+0x254>)
 8007e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e0c:	f000 fa9c 	bl	8008348 <memchr>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d03f      	beq.n	8007e94 <_vfiprintf_r+0x22c>
 8007e14:	4b2a      	ldr	r3, [pc, #168]	; (8007ec0 <_vfiprintf_r+0x258>)
 8007e16:	bb1b      	cbnz	r3, 8007e60 <_vfiprintf_r+0x1f8>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	3307      	adds	r3, #7
 8007e1c:	f023 0307 	bic.w	r3, r3, #7
 8007e20:	3308      	adds	r3, #8
 8007e22:	9303      	str	r3, [sp, #12]
 8007e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e26:	443b      	add	r3, r7
 8007e28:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2a:	e767      	b.n	8007cfc <_vfiprintf_r+0x94>
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	2001      	movs	r0, #1
 8007e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e34:	e7a5      	b.n	8007d82 <_vfiprintf_r+0x11a>
 8007e36:	2300      	movs	r3, #0
 8007e38:	f04f 0c0a 	mov.w	ip, #10
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	3401      	adds	r4, #1
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	4620      	mov	r0, r4
 8007e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e48:	3a30      	subs	r2, #48	; 0x30
 8007e4a:	2a09      	cmp	r2, #9
 8007e4c:	d903      	bls.n	8007e56 <_vfiprintf_r+0x1ee>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0c5      	beq.n	8007dde <_vfiprintf_r+0x176>
 8007e52:	9105      	str	r1, [sp, #20]
 8007e54:	e7c3      	b.n	8007dde <_vfiprintf_r+0x176>
 8007e56:	4604      	mov	r4, r0
 8007e58:	2301      	movs	r3, #1
 8007e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e5e:	e7f0      	b.n	8007e42 <_vfiprintf_r+0x1da>
 8007e60:	ab03      	add	r3, sp, #12
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	462a      	mov	r2, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	4b16      	ldr	r3, [pc, #88]	; (8007ec4 <_vfiprintf_r+0x25c>)
 8007e6a:	a904      	add	r1, sp, #16
 8007e6c:	f3af 8000 	nop.w
 8007e70:	4607      	mov	r7, r0
 8007e72:	1c78      	adds	r0, r7, #1
 8007e74:	d1d6      	bne.n	8007e24 <_vfiprintf_r+0x1bc>
 8007e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e78:	07d9      	lsls	r1, r3, #31
 8007e7a:	d405      	bmi.n	8007e88 <_vfiprintf_r+0x220>
 8007e7c:	89ab      	ldrh	r3, [r5, #12]
 8007e7e:	059a      	lsls	r2, r3, #22
 8007e80:	d402      	bmi.n	8007e88 <_vfiprintf_r+0x220>
 8007e82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e84:	f7ff fc29 	bl	80076da <__retarget_lock_release_recursive>
 8007e88:	89ab      	ldrh	r3, [r5, #12]
 8007e8a:	065b      	lsls	r3, r3, #25
 8007e8c:	f53f af12 	bmi.w	8007cb4 <_vfiprintf_r+0x4c>
 8007e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e92:	e711      	b.n	8007cb8 <_vfiprintf_r+0x50>
 8007e94:	ab03      	add	r3, sp, #12
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <_vfiprintf_r+0x25c>)
 8007e9e:	a904      	add	r1, sp, #16
 8007ea0:	f000 f882 	bl	8007fa8 <_printf_i>
 8007ea4:	e7e4      	b.n	8007e70 <_vfiprintf_r+0x208>
 8007ea6:	bf00      	nop
 8007ea8:	08009d18 	.word	0x08009d18
 8007eac:	08009d38 	.word	0x08009d38
 8007eb0:	08009cf8 	.word	0x08009cf8
 8007eb4:	08009d58 	.word	0x08009d58
 8007eb8:	08009d5e 	.word	0x08009d5e
 8007ebc:	08009d62 	.word	0x08009d62
 8007ec0:	00000000 	.word	0x00000000
 8007ec4:	08007c43 	.word	0x08007c43

08007ec8 <_printf_common>:
 8007ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	4616      	mov	r6, r2
 8007ece:	4699      	mov	r9, r3
 8007ed0:	688a      	ldr	r2, [r1, #8]
 8007ed2:	690b      	ldr	r3, [r1, #16]
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	bfb8      	it	lt
 8007eda:	4613      	movlt	r3, r2
 8007edc:	6033      	str	r3, [r6, #0]
 8007ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ee8:	b10a      	cbz	r2, 8007eee <_printf_common+0x26>
 8007eea:	3301      	adds	r3, #1
 8007eec:	6033      	str	r3, [r6, #0]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	0699      	lsls	r1, r3, #26
 8007ef2:	bf42      	ittt	mi
 8007ef4:	6833      	ldrmi	r3, [r6, #0]
 8007ef6:	3302      	addmi	r3, #2
 8007ef8:	6033      	strmi	r3, [r6, #0]
 8007efa:	6825      	ldr	r5, [r4, #0]
 8007efc:	f015 0506 	ands.w	r5, r5, #6
 8007f00:	d106      	bne.n	8007f10 <_printf_common+0x48>
 8007f02:	f104 0a19 	add.w	sl, r4, #25
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	6832      	ldr	r2, [r6, #0]
 8007f0a:	1a9b      	subs	r3, r3, r2
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dc28      	bgt.n	8007f62 <_printf_common+0x9a>
 8007f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f14:	1e13      	subs	r3, r2, #0
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	bf18      	it	ne
 8007f1a:	2301      	movne	r3, #1
 8007f1c:	0692      	lsls	r2, r2, #26
 8007f1e:	d42d      	bmi.n	8007f7c <_printf_common+0xb4>
 8007f20:	4649      	mov	r1, r9
 8007f22:	4638      	mov	r0, r7
 8007f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f28:	47c0      	blx	r8
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d020      	beq.n	8007f70 <_printf_common+0xa8>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	68e5      	ldr	r5, [r4, #12]
 8007f32:	f003 0306 	and.w	r3, r3, #6
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	bf18      	it	ne
 8007f3a:	2500      	movne	r5, #0
 8007f3c:	6832      	ldr	r2, [r6, #0]
 8007f3e:	f04f 0600 	mov.w	r6, #0
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	bf08      	it	eq
 8007f46:	1aad      	subeq	r5, r5, r2
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	bf08      	it	eq
 8007f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f50:	4293      	cmp	r3, r2
 8007f52:	bfc4      	itt	gt
 8007f54:	1a9b      	subgt	r3, r3, r2
 8007f56:	18ed      	addgt	r5, r5, r3
 8007f58:	341a      	adds	r4, #26
 8007f5a:	42b5      	cmp	r5, r6
 8007f5c:	d11a      	bne.n	8007f94 <_printf_common+0xcc>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e008      	b.n	8007f74 <_printf_common+0xac>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4652      	mov	r2, sl
 8007f66:	4649      	mov	r1, r9
 8007f68:	4638      	mov	r0, r7
 8007f6a:	47c0      	blx	r8
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d103      	bne.n	8007f78 <_printf_common+0xb0>
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f78:	3501      	adds	r5, #1
 8007f7a:	e7c4      	b.n	8007f06 <_printf_common+0x3e>
 8007f7c:	2030      	movs	r0, #48	; 0x30
 8007f7e:	18e1      	adds	r1, r4, r3
 8007f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f8a:	4422      	add	r2, r4
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f92:	e7c5      	b.n	8007f20 <_printf_common+0x58>
 8007f94:	2301      	movs	r3, #1
 8007f96:	4622      	mov	r2, r4
 8007f98:	4649      	mov	r1, r9
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	47c0      	blx	r8
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d0e6      	beq.n	8007f70 <_printf_common+0xa8>
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7d9      	b.n	8007f5a <_printf_common+0x92>
	...

08007fa8 <_printf_i>:
 8007fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fac:	7e0f      	ldrb	r7, [r1, #24]
 8007fae:	4691      	mov	r9, r2
 8007fb0:	2f78      	cmp	r7, #120	; 0x78
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	469a      	mov	sl, r3
 8007fb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fbe:	d807      	bhi.n	8007fd0 <_printf_i+0x28>
 8007fc0:	2f62      	cmp	r7, #98	; 0x62
 8007fc2:	d80a      	bhi.n	8007fda <_printf_i+0x32>
 8007fc4:	2f00      	cmp	r7, #0
 8007fc6:	f000 80d9 	beq.w	800817c <_printf_i+0x1d4>
 8007fca:	2f58      	cmp	r7, #88	; 0x58
 8007fcc:	f000 80a4 	beq.w	8008118 <_printf_i+0x170>
 8007fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fd8:	e03a      	b.n	8008050 <_printf_i+0xa8>
 8007fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fde:	2b15      	cmp	r3, #21
 8007fe0:	d8f6      	bhi.n	8007fd0 <_printf_i+0x28>
 8007fe2:	a101      	add	r1, pc, #4	; (adr r1, 8007fe8 <_printf_i+0x40>)
 8007fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fe8:	08008041 	.word	0x08008041
 8007fec:	08008055 	.word	0x08008055
 8007ff0:	08007fd1 	.word	0x08007fd1
 8007ff4:	08007fd1 	.word	0x08007fd1
 8007ff8:	08007fd1 	.word	0x08007fd1
 8007ffc:	08007fd1 	.word	0x08007fd1
 8008000:	08008055 	.word	0x08008055
 8008004:	08007fd1 	.word	0x08007fd1
 8008008:	08007fd1 	.word	0x08007fd1
 800800c:	08007fd1 	.word	0x08007fd1
 8008010:	08007fd1 	.word	0x08007fd1
 8008014:	08008163 	.word	0x08008163
 8008018:	08008085 	.word	0x08008085
 800801c:	08008145 	.word	0x08008145
 8008020:	08007fd1 	.word	0x08007fd1
 8008024:	08007fd1 	.word	0x08007fd1
 8008028:	08008185 	.word	0x08008185
 800802c:	08007fd1 	.word	0x08007fd1
 8008030:	08008085 	.word	0x08008085
 8008034:	08007fd1 	.word	0x08007fd1
 8008038:	08007fd1 	.word	0x08007fd1
 800803c:	0800814d 	.word	0x0800814d
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	1d1a      	adds	r2, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	602a      	str	r2, [r5, #0]
 8008048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800804c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008050:	2301      	movs	r3, #1
 8008052:	e0a4      	b.n	800819e <_printf_i+0x1f6>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	6829      	ldr	r1, [r5, #0]
 8008058:	0606      	lsls	r6, r0, #24
 800805a:	f101 0304 	add.w	r3, r1, #4
 800805e:	d50a      	bpl.n	8008076 <_printf_i+0xce>
 8008060:	680e      	ldr	r6, [r1, #0]
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	2e00      	cmp	r6, #0
 8008066:	da03      	bge.n	8008070 <_printf_i+0xc8>
 8008068:	232d      	movs	r3, #45	; 0x2d
 800806a:	4276      	negs	r6, r6
 800806c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008070:	230a      	movs	r3, #10
 8008072:	485e      	ldr	r0, [pc, #376]	; (80081ec <_printf_i+0x244>)
 8008074:	e019      	b.n	80080aa <_printf_i+0x102>
 8008076:	680e      	ldr	r6, [r1, #0]
 8008078:	f010 0f40 	tst.w	r0, #64	; 0x40
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	bf18      	it	ne
 8008080:	b236      	sxthne	r6, r6
 8008082:	e7ef      	b.n	8008064 <_printf_i+0xbc>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	1d19      	adds	r1, r3, #4
 800808a:	6029      	str	r1, [r5, #0]
 800808c:	0601      	lsls	r1, r0, #24
 800808e:	d501      	bpl.n	8008094 <_printf_i+0xec>
 8008090:	681e      	ldr	r6, [r3, #0]
 8008092:	e002      	b.n	800809a <_printf_i+0xf2>
 8008094:	0646      	lsls	r6, r0, #25
 8008096:	d5fb      	bpl.n	8008090 <_printf_i+0xe8>
 8008098:	881e      	ldrh	r6, [r3, #0]
 800809a:	2f6f      	cmp	r7, #111	; 0x6f
 800809c:	bf0c      	ite	eq
 800809e:	2308      	moveq	r3, #8
 80080a0:	230a      	movne	r3, #10
 80080a2:	4852      	ldr	r0, [pc, #328]	; (80081ec <_printf_i+0x244>)
 80080a4:	2100      	movs	r1, #0
 80080a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080aa:	6865      	ldr	r5, [r4, #4]
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	bfa8      	it	ge
 80080b0:	6821      	ldrge	r1, [r4, #0]
 80080b2:	60a5      	str	r5, [r4, #8]
 80080b4:	bfa4      	itt	ge
 80080b6:	f021 0104 	bicge.w	r1, r1, #4
 80080ba:	6021      	strge	r1, [r4, #0]
 80080bc:	b90e      	cbnz	r6, 80080c2 <_printf_i+0x11a>
 80080be:	2d00      	cmp	r5, #0
 80080c0:	d04d      	beq.n	800815e <_printf_i+0x1b6>
 80080c2:	4615      	mov	r5, r2
 80080c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80080c8:	fb03 6711 	mls	r7, r3, r1, r6
 80080cc:	5dc7      	ldrb	r7, [r0, r7]
 80080ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080d2:	4637      	mov	r7, r6
 80080d4:	42bb      	cmp	r3, r7
 80080d6:	460e      	mov	r6, r1
 80080d8:	d9f4      	bls.n	80080c4 <_printf_i+0x11c>
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d10b      	bne.n	80080f6 <_printf_i+0x14e>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	07de      	lsls	r6, r3, #31
 80080e2:	d508      	bpl.n	80080f6 <_printf_i+0x14e>
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	6861      	ldr	r1, [r4, #4]
 80080e8:	4299      	cmp	r1, r3
 80080ea:	bfde      	ittt	le
 80080ec:	2330      	movle	r3, #48	; 0x30
 80080ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080f6:	1b52      	subs	r2, r2, r5
 80080f8:	6122      	str	r2, [r4, #16]
 80080fa:	464b      	mov	r3, r9
 80080fc:	4621      	mov	r1, r4
 80080fe:	4640      	mov	r0, r8
 8008100:	f8cd a000 	str.w	sl, [sp]
 8008104:	aa03      	add	r2, sp, #12
 8008106:	f7ff fedf 	bl	8007ec8 <_printf_common>
 800810a:	3001      	adds	r0, #1
 800810c:	d14c      	bne.n	80081a8 <_printf_i+0x200>
 800810e:	f04f 30ff 	mov.w	r0, #4294967295
 8008112:	b004      	add	sp, #16
 8008114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008118:	4834      	ldr	r0, [pc, #208]	; (80081ec <_printf_i+0x244>)
 800811a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800811e:	6829      	ldr	r1, [r5, #0]
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	f851 6b04 	ldr.w	r6, [r1], #4
 8008126:	6029      	str	r1, [r5, #0]
 8008128:	061d      	lsls	r5, r3, #24
 800812a:	d514      	bpl.n	8008156 <_printf_i+0x1ae>
 800812c:	07df      	lsls	r7, r3, #31
 800812e:	bf44      	itt	mi
 8008130:	f043 0320 	orrmi.w	r3, r3, #32
 8008134:	6023      	strmi	r3, [r4, #0]
 8008136:	b91e      	cbnz	r6, 8008140 <_printf_i+0x198>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	f023 0320 	bic.w	r3, r3, #32
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	2310      	movs	r3, #16
 8008142:	e7af      	b.n	80080a4 <_printf_i+0xfc>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	f043 0320 	orr.w	r3, r3, #32
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	2378      	movs	r3, #120	; 0x78
 800814e:	4828      	ldr	r0, [pc, #160]	; (80081f0 <_printf_i+0x248>)
 8008150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008154:	e7e3      	b.n	800811e <_printf_i+0x176>
 8008156:	0659      	lsls	r1, r3, #25
 8008158:	bf48      	it	mi
 800815a:	b2b6      	uxthmi	r6, r6
 800815c:	e7e6      	b.n	800812c <_printf_i+0x184>
 800815e:	4615      	mov	r5, r2
 8008160:	e7bb      	b.n	80080da <_printf_i+0x132>
 8008162:	682b      	ldr	r3, [r5, #0]
 8008164:	6826      	ldr	r6, [r4, #0]
 8008166:	1d18      	adds	r0, r3, #4
 8008168:	6961      	ldr	r1, [r4, #20]
 800816a:	6028      	str	r0, [r5, #0]
 800816c:	0635      	lsls	r5, r6, #24
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	d501      	bpl.n	8008176 <_printf_i+0x1ce>
 8008172:	6019      	str	r1, [r3, #0]
 8008174:	e002      	b.n	800817c <_printf_i+0x1d4>
 8008176:	0670      	lsls	r0, r6, #25
 8008178:	d5fb      	bpl.n	8008172 <_printf_i+0x1ca>
 800817a:	8019      	strh	r1, [r3, #0]
 800817c:	2300      	movs	r3, #0
 800817e:	4615      	mov	r5, r2
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	e7ba      	b.n	80080fa <_printf_i+0x152>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	2100      	movs	r1, #0
 8008188:	1d1a      	adds	r2, r3, #4
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	681d      	ldr	r5, [r3, #0]
 800818e:	6862      	ldr	r2, [r4, #4]
 8008190:	4628      	mov	r0, r5
 8008192:	f000 f8d9 	bl	8008348 <memchr>
 8008196:	b108      	cbz	r0, 800819c <_printf_i+0x1f4>
 8008198:	1b40      	subs	r0, r0, r5
 800819a:	6060      	str	r0, [r4, #4]
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	2300      	movs	r3, #0
 80081a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a6:	e7a8      	b.n	80080fa <_printf_i+0x152>
 80081a8:	462a      	mov	r2, r5
 80081aa:	4649      	mov	r1, r9
 80081ac:	4640      	mov	r0, r8
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	47d0      	blx	sl
 80081b2:	3001      	adds	r0, #1
 80081b4:	d0ab      	beq.n	800810e <_printf_i+0x166>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	079b      	lsls	r3, r3, #30
 80081ba:	d413      	bmi.n	80081e4 <_printf_i+0x23c>
 80081bc:	68e0      	ldr	r0, [r4, #12]
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	4298      	cmp	r0, r3
 80081c2:	bfb8      	it	lt
 80081c4:	4618      	movlt	r0, r3
 80081c6:	e7a4      	b.n	8008112 <_printf_i+0x16a>
 80081c8:	2301      	movs	r3, #1
 80081ca:	4632      	mov	r2, r6
 80081cc:	4649      	mov	r1, r9
 80081ce:	4640      	mov	r0, r8
 80081d0:	47d0      	blx	sl
 80081d2:	3001      	adds	r0, #1
 80081d4:	d09b      	beq.n	800810e <_printf_i+0x166>
 80081d6:	3501      	adds	r5, #1
 80081d8:	68e3      	ldr	r3, [r4, #12]
 80081da:	9903      	ldr	r1, [sp, #12]
 80081dc:	1a5b      	subs	r3, r3, r1
 80081de:	42ab      	cmp	r3, r5
 80081e0:	dcf2      	bgt.n	80081c8 <_printf_i+0x220>
 80081e2:	e7eb      	b.n	80081bc <_printf_i+0x214>
 80081e4:	2500      	movs	r5, #0
 80081e6:	f104 0619 	add.w	r6, r4, #25
 80081ea:	e7f5      	b.n	80081d8 <_printf_i+0x230>
 80081ec:	08009d69 	.word	0x08009d69
 80081f0:	08009d7a 	.word	0x08009d7a

080081f4 <_sbrk_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	2300      	movs	r3, #0
 80081f8:	4d05      	ldr	r5, [pc, #20]	; (8008210 <_sbrk_r+0x1c>)
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	602b      	str	r3, [r5, #0]
 8008200:	f7fa fab8 	bl	8002774 <_sbrk>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_sbrk_r+0x1a>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_sbrk_r+0x1a>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	200008c0 	.word	0x200008c0

08008214 <__sread>:
 8008214:	b510      	push	{r4, lr}
 8008216:	460c      	mov	r4, r1
 8008218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821c:	f000 f906 	bl	800842c <_read_r>
 8008220:	2800      	cmp	r0, #0
 8008222:	bfab      	itete	ge
 8008224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008226:	89a3      	ldrhlt	r3, [r4, #12]
 8008228:	181b      	addge	r3, r3, r0
 800822a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800822e:	bfac      	ite	ge
 8008230:	6563      	strge	r3, [r4, #84]	; 0x54
 8008232:	81a3      	strhlt	r3, [r4, #12]
 8008234:	bd10      	pop	{r4, pc}

08008236 <__swrite>:
 8008236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823a:	461f      	mov	r7, r3
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	4605      	mov	r5, r0
 8008240:	05db      	lsls	r3, r3, #23
 8008242:	460c      	mov	r4, r1
 8008244:	4616      	mov	r6, r2
 8008246:	d505      	bpl.n	8008254 <__swrite+0x1e>
 8008248:	2302      	movs	r3, #2
 800824a:	2200      	movs	r2, #0
 800824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008250:	f000 f868 	bl	8008324 <_lseek_r>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	4632      	mov	r2, r6
 8008258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	4628      	mov	r0, r5
 8008260:	463b      	mov	r3, r7
 8008262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826a:	f000 b817 	b.w	800829c <_write_r>

0800826e <__sseek>:
 800826e:	b510      	push	{r4, lr}
 8008270:	460c      	mov	r4, r1
 8008272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008276:	f000 f855 	bl	8008324 <_lseek_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	bf15      	itete	ne
 8008280:	6560      	strne	r0, [r4, #84]	; 0x54
 8008282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800828a:	81a3      	strheq	r3, [r4, #12]
 800828c:	bf18      	it	ne
 800828e:	81a3      	strhne	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__sclose>:
 8008292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008296:	f000 b813 	b.w	80082c0 <_close_r>
	...

0800829c <_write_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	2200      	movs	r2, #0
 80082a6:	4d05      	ldr	r5, [pc, #20]	; (80082bc <_write_r+0x20>)
 80082a8:	602a      	str	r2, [r5, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f7f8 faba 	bl	8000824 <_write>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_write_r+0x1e>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_write_r+0x1e>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	200008c0 	.word	0x200008c0

080082c0 <_close_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	2300      	movs	r3, #0
 80082c4:	4d05      	ldr	r5, [pc, #20]	; (80082dc <_close_r+0x1c>)
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7fa fa21 	bl	8002712 <_close>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_close_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_close_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	200008c0 	.word	0x200008c0

080082e0 <_fstat_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	2300      	movs	r3, #0
 80082e4:	4d06      	ldr	r5, [pc, #24]	; (8008300 <_fstat_r+0x20>)
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f7fa fa1b 	bl	8002728 <_fstat>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d102      	bne.n	80082fc <_fstat_r+0x1c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b103      	cbz	r3, 80082fc <_fstat_r+0x1c>
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	200008c0 	.word	0x200008c0

08008304 <_isatty_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	2300      	movs	r3, #0
 8008308:	4d05      	ldr	r5, [pc, #20]	; (8008320 <_isatty_r+0x1c>)
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7fa fa19 	bl	8002746 <_isatty>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_isatty_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_isatty_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	200008c0 	.word	0x200008c0

08008324 <_lseek_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	4611      	mov	r1, r2
 800832c:	2200      	movs	r2, #0
 800832e:	4d05      	ldr	r5, [pc, #20]	; (8008344 <_lseek_r+0x20>)
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7fa fa11 	bl	800275a <_lseek>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_lseek_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_lseek_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200008c0 	.word	0x200008c0

08008348 <memchr>:
 8008348:	4603      	mov	r3, r0
 800834a:	b510      	push	{r4, lr}
 800834c:	b2c9      	uxtb	r1, r1
 800834e:	4402      	add	r2, r0
 8008350:	4293      	cmp	r3, r2
 8008352:	4618      	mov	r0, r3
 8008354:	d101      	bne.n	800835a <memchr+0x12>
 8008356:	2000      	movs	r0, #0
 8008358:	e003      	b.n	8008362 <memchr+0x1a>
 800835a:	7804      	ldrb	r4, [r0, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	428c      	cmp	r4, r1
 8008360:	d1f6      	bne.n	8008350 <memchr+0x8>
 8008362:	bd10      	pop	{r4, pc}

08008364 <memcpy>:
 8008364:	440a      	add	r2, r1
 8008366:	4291      	cmp	r1, r2
 8008368:	f100 33ff 	add.w	r3, r0, #4294967295
 800836c:	d100      	bne.n	8008370 <memcpy+0xc>
 800836e:	4770      	bx	lr
 8008370:	b510      	push	{r4, lr}
 8008372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008376:	4291      	cmp	r1, r2
 8008378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800837c:	d1f9      	bne.n	8008372 <memcpy+0xe>
 800837e:	bd10      	pop	{r4, pc}

08008380 <memmove>:
 8008380:	4288      	cmp	r0, r1
 8008382:	b510      	push	{r4, lr}
 8008384:	eb01 0402 	add.w	r4, r1, r2
 8008388:	d902      	bls.n	8008390 <memmove+0x10>
 800838a:	4284      	cmp	r4, r0
 800838c:	4623      	mov	r3, r4
 800838e:	d807      	bhi.n	80083a0 <memmove+0x20>
 8008390:	1e43      	subs	r3, r0, #1
 8008392:	42a1      	cmp	r1, r4
 8008394:	d008      	beq.n	80083a8 <memmove+0x28>
 8008396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800839a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800839e:	e7f8      	b.n	8008392 <memmove+0x12>
 80083a0:	4601      	mov	r1, r0
 80083a2:	4402      	add	r2, r0
 80083a4:	428a      	cmp	r2, r1
 80083a6:	d100      	bne.n	80083aa <memmove+0x2a>
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083b2:	e7f7      	b.n	80083a4 <memmove+0x24>

080083b4 <__malloc_lock>:
 80083b4:	4801      	ldr	r0, [pc, #4]	; (80083bc <__malloc_lock+0x8>)
 80083b6:	f7ff b98f 	b.w	80076d8 <__retarget_lock_acquire_recursive>
 80083ba:	bf00      	nop
 80083bc:	200008b4 	.word	0x200008b4

080083c0 <__malloc_unlock>:
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <__malloc_unlock+0x8>)
 80083c2:	f7ff b98a 	b.w	80076da <__retarget_lock_release_recursive>
 80083c6:	bf00      	nop
 80083c8:	200008b4 	.word	0x200008b4

080083cc <_realloc_r>:
 80083cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d0:	4680      	mov	r8, r0
 80083d2:	4614      	mov	r4, r2
 80083d4:	460e      	mov	r6, r1
 80083d6:	b921      	cbnz	r1, 80083e2 <_realloc_r+0x16>
 80083d8:	4611      	mov	r1, r2
 80083da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	f7ff ba4b 	b.w	8007878 <_malloc_r>
 80083e2:	b92a      	cbnz	r2, 80083f0 <_realloc_r+0x24>
 80083e4:	f7ff f9e0 	bl	80077a8 <_free_r>
 80083e8:	4625      	mov	r5, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	f000 f82e 	bl	8008450 <_malloc_usable_size_r>
 80083f4:	4284      	cmp	r4, r0
 80083f6:	4607      	mov	r7, r0
 80083f8:	d802      	bhi.n	8008400 <_realloc_r+0x34>
 80083fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083fe:	d812      	bhi.n	8008426 <_realloc_r+0x5a>
 8008400:	4621      	mov	r1, r4
 8008402:	4640      	mov	r0, r8
 8008404:	f7ff fa38 	bl	8007878 <_malloc_r>
 8008408:	4605      	mov	r5, r0
 800840a:	2800      	cmp	r0, #0
 800840c:	d0ed      	beq.n	80083ea <_realloc_r+0x1e>
 800840e:	42bc      	cmp	r4, r7
 8008410:	4622      	mov	r2, r4
 8008412:	4631      	mov	r1, r6
 8008414:	bf28      	it	cs
 8008416:	463a      	movcs	r2, r7
 8008418:	f7ff ffa4 	bl	8008364 <memcpy>
 800841c:	4631      	mov	r1, r6
 800841e:	4640      	mov	r0, r8
 8008420:	f7ff f9c2 	bl	80077a8 <_free_r>
 8008424:	e7e1      	b.n	80083ea <_realloc_r+0x1e>
 8008426:	4635      	mov	r5, r6
 8008428:	e7df      	b.n	80083ea <_realloc_r+0x1e>
	...

0800842c <_read_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	4611      	mov	r1, r2
 8008434:	2200      	movs	r2, #0
 8008436:	4d05      	ldr	r5, [pc, #20]	; (800844c <_read_r+0x20>)
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7fa f94c 	bl	80026d8 <_read>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_read_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_read_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	200008c0 	.word	0x200008c0

08008450 <_malloc_usable_size_r>:
 8008450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008454:	1f18      	subs	r0, r3, #4
 8008456:	2b00      	cmp	r3, #0
 8008458:	bfbc      	itt	lt
 800845a:	580b      	ldrlt	r3, [r1, r0]
 800845c:	18c0      	addlt	r0, r0, r3
 800845e:	4770      	bx	lr

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
