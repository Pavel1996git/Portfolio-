
F103C8T6_E32_Transmit_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001838  08007ca0  08007ca0  00017ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  080094d8  080094d8  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094d8  080094d8  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094dc  080094dc  000194dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  080094e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  20000388  08009868  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  08009868  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001547a  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331e  00000000  00000000  0003582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00038b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abd2  00000000  00000000  0003b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001875d  00000000  00000000  00056062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009553e  00000000  00000000  0006e7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103cfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  00103d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000388 	.word	0x20000388
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c88 	.word	0x08007c88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000038c 	.word	0x2000038c
 8000148:	08007c88 	.word	0x08007c88

0800014c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e016      	b.n	8000188 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000160:	3301      	adds	r3, #1
 8000162:	029b      	lsls	r3, r3, #10
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	429a      	cmp	r2, r3
 8000168:	d20b      	bcs.n	8000182 <GetPage+0x36>
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000170:	029b      	lsls	r3, r3, #10
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	429a      	cmp	r2, r3
 8000176:	d304      	bcc.n	8000182 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800017e:	029b      	lsls	r3, r3, #10
 8000180:	e006      	b.n	8000190 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	3301      	adds	r3, #1
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	2b7f      	cmp	r3, #127	; 0x7f
 800018c:	dde5      	ble.n	800015a <GetPage+0xe>
	  }
  }

  return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800019c:	b5b0      	push	{r4, r5, r7, lr}
 800019e:	b08a      	sub	sp, #40	; 0x28
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	4613      	mov	r3, r2
 80001a8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80001ae:	f003 fa7f 	bl	80036b0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80001b2:	68f8      	ldr	r0, [r7, #12]
 80001b4:	f7ff ffca 	bl	800014c <GetPage>
 80001b8:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80001ba:	88fb      	ldrh	r3, [r7, #6]
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4413      	add	r3, r2
 80001c4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80001c6:	69f8      	ldr	r0, [r7, #28]
 80001c8:	f7ff ffc0 	bl	800014c <GetPage>
 80001cc:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80001ce:	4b20      	ldr	r3, [pc, #128]	; (8000250 <Flash_Write_Data+0xb4>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80001d4:	4a1e      	ldr	r2, [pc, #120]	; (8000250 <Flash_Write_Data+0xb4>)
 80001d6:	6a3b      	ldr	r3, [r7, #32]
 80001d8:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	6a3b      	ldr	r3, [r7, #32]
 80001de:	1ad3      	subs	r3, r2, r3
 80001e0:	0a9b      	lsrs	r3, r3, #10
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a1a      	ldr	r2, [pc, #104]	; (8000250 <Flash_Write_Data+0xb4>)
 80001e6:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	4619      	mov	r1, r3
 80001ee:	4818      	ldr	r0, [pc, #96]	; (8000250 <Flash_Write_Data+0xb4>)
 80001f0:	f003 fb50 	bl	8003894 <HAL_FLASHEx_Erase>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d01f      	beq.n	800023a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80001fa:	f003 fa8f 	bl	800371c <HAL_FLASH_GetError>
 80001fe:	4603      	mov	r3, r0
 8000200:	e022      	b.n	8000248 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	4413      	add	r3, r2
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2200      	movs	r2, #0
 800020e:	461c      	mov	r4, r3
 8000210:	4615      	mov	r5, r2
 8000212:	4622      	mov	r2, r4
 8000214:	462b      	mov	r3, r5
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	2002      	movs	r0, #2
 800021a:	f003 f9d9 	bl	80035d0 <HAL_FLASH_Program>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d106      	bne.n	8000232 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3304      	adds	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800022c:	3301      	adds	r3, #1
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
 8000230:	e003      	b.n	800023a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000232:	f003 fa73 	bl	800371c <HAL_FLASH_GetError>
 8000236:	4603      	mov	r3, r0
 8000238:	e006      	b.n	8000248 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800023e:	429a      	cmp	r2, r3
 8000240:	dbdf      	blt.n	8000202 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000242:	f003 fa5b 	bl	80036fc <HAL_FLASH_Lock>

	   return 0;
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	3728      	adds	r7, #40	; 0x28
 800024c:	46bd      	mov	sp, r7
 800024e:	bdb0      	pop	{r4, r5, r7, pc}
 8000250:	200003a4 	.word	0x200003a4

08000254 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000260:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d013      	beq.n	8000294 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800026c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000270:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000274:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	2b00      	cmp	r3, #0
 800027a:	d00b      	beq.n	8000294 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800027c:	e000      	b.n	8000280 <ITM_SendChar+0x2c>
    {
      __NOP();
 800027e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000280:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800028a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	b2d2      	uxtb	r2, r2
 8000292:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <_write>:
//====================================================================//
//====================================================================//
//====================================================================//

int _write(int file, char *ptr, int len)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e009      	b.n	80002c6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	1c5a      	adds	r2, r3, #1
 80002b6:	60ba      	str	r2, [r7, #8]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ffca 	bl	8000254 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	3301      	adds	r3, #1
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	697a      	ldr	r2, [r7, #20]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	dbf1      	blt.n	80002b2 <_write+0x12>
  }
  return len;
 80002ce:	687b      	ldr	r3, [r7, #4]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <setInterruptBeginState>:

NumberStateInterrupt InterruptState;
void setInterruptBeginState(NumberStateInterrupt sInterruptbeginState){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
#ifdef Debug
	printf("setInterruptBeginState.\n");
 80002e2:	4807      	ldr	r0, [pc, #28]	; (8000300 <setInterruptBeginState+0x28>)
 80002e4:	f006 fd4c 	bl	8006d80 <puts>
#endif
	InterruptState= sInterruptbeginState;
 80002e8:	4a06      	ldr	r2, [pc, #24]	; (8000304 <setInterruptBeginState+0x2c>)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	7013      	strb	r3, [r2, #0]
	setInterruptState(InterruptState);
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <setInterruptBeginState+0x2c>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f820 	bl	8000338 <setInterruptState>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08007ca0 	.word	0x08007ca0
 8000304:	200003b4 	.word	0x200003b4

08000308 <setInterruptEndState>:

void setInterruptEndState(NumberStateInterrupt sInterruptEndState){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
#ifdef Debug
	printf("setInterruptEndState().\n");
 8000312:	4807      	ldr	r0, [pc, #28]	; (8000330 <setInterruptEndState+0x28>)
 8000314:	f006 fd34 	bl	8006d80 <puts>
#endif
	InterruptState= sInterruptEndState;
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <setInterruptEndState+0x2c>)
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	7013      	strb	r3, [r2, #0]
	setInterruptState(InterruptState);
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <setInterruptEndState+0x2c>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f808 	bl	8000338 <setInterruptState>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	08007cb8 	.word	0x08007cb8
 8000334:	200003b4 	.word	0x200003b4

08000338 <setInterruptState>:
void setInterruptState(NumberStateInterrupt sInterruptState){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	switch (sInterruptState){
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b03      	cmp	r3, #3
 8000346:	d833      	bhi.n	80003b0 <setInterruptState+0x78>
 8000348:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <setInterruptState+0x18>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000361 	.word	0x08000361
 8000354:	08000375 	.word	0x08000375
 8000358:	08000389 	.word	0x08000389
 800035c:	0800039d 	.word	0x0800039d
	case NoUsaNoExtern:
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000360:	2025      	movs	r0, #37	; 0x25
 8000362:	f002 fe78 	bl	8003056 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000366:	2028      	movs	r0, #40	; 0x28
 8000368:	f002 fe75 	bl	8003056 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800036c:	2017      	movs	r0, #23
 800036e:	f002 fe72 	bl	8003056 <HAL_NVIC_DisableIRQ>
		break;
 8000372:	e01e      	b.n	80003b2 <setInterruptState+0x7a>
	case NoUsaExtern:
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000374:	2025      	movs	r0, #37	; 0x25
 8000376:	f002 fe6e 	bl	8003056 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f002 fe5d 	bl	800303a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000380:	2017      	movs	r0, #23
 8000382:	f002 fe5a 	bl	800303a <HAL_NVIC_EnableIRQ>
		break;
 8000386:	e014      	b.n	80003b2 <setInterruptState+0x7a>
	case UsaNoExtern:
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000388:	2025      	movs	r0, #37	; 0x25
 800038a:	f002 fe56 	bl	800303a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800038e:	2028      	movs	r0, #40	; 0x28
 8000390:	f002 fe61 	bl	8003056 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000394:	2017      	movs	r0, #23
 8000396:	f002 fe5e 	bl	8003056 <HAL_NVIC_DisableIRQ>
		break;
 800039a:	e00a      	b.n	80003b2 <setInterruptState+0x7a>
	case UsaExtern:
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800039c:	2025      	movs	r0, #37	; 0x25
 800039e:	f002 fe4c 	bl	800303a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a2:	2028      	movs	r0, #40	; 0x28
 80003a4:	f002 fe49 	bl	800303a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003a8:	2017      	movs	r0, #23
 80003aa:	f002 fe46 	bl	800303a <HAL_NVIC_EnableIRQ>
		break;
 80003ae:	e000      	b.n	80003b2 <setInterruptState+0x7a>
	default:
		break;
 80003b0:	bf00      	nop
	}
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop

080003bc <outError>:
//out

void outError(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("outError().\n");
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <outError+0x14>)
 80003c2:	f006 fcdd 	bl	8006d80 <puts>
#endif
	HAL_Delay(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f002 f8d2 	bl	8002570 <HAL_Delay>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08007cd0 	.word	0x08007cd0

080003d4 <outBlank>:

void outBlank(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80003d8:	2001      	movs	r0, #1
 80003da:	f002 f8c9 	bl	8002570 <HAL_Delay>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <outRxMessage>:
void outLoadMenu(void){
	HAL_Delay(1);
}
void outRxMessage(void){
 80003e2:	b580      	push	{r7, lr}
 80003e4:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f002 f8c2 	bl	8002570 <HAL_Delay>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <waitShort>:
}
*/


//time
void waitShort(void){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("waitShort().\n");
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <waitShort+0x14>)
 80003f6:	f006 fcc3 	bl	8006d80 <puts>
#endif
	HAL_Delay(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f002 f8b8 	bl	8002570 <HAL_Delay>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	08007cdc 	.word	0x08007cdc

08000408 <waitLongMenu>:

void waitLongMenu(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f002 f8af 	bl	8002570 <HAL_Delay>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f002 f846 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f850 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 fa02 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000428:	f000 f9d2 	bl	80007d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800042c:	f000 f9a6 	bl	800077c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000430:	f000 f8d6 	bl	80005e0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000434:	f000 f896 	bl	8000564 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000438:	f000 f900 	bl	800063c <MX_TIM1_Init>
  MX_TIM2_Init();
 800043c:	f000 f950 	bl	80006e0 <MX_TIM2_Init>
  while (1)
  {


	  //setInterruptBeginState(FSM[currentState].interruptBeginState);
	  FSM[currentState].out();
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <main+0xa0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <main+0xa4>)
 8000446:	019b      	lsls	r3, r3, #6
 8000448:	4413      	add	r3, r2
 800044a:	3304      	adds	r3, #4
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4798      	blx	r3
	  setInterruptBeginState(FSM[currentState].interruptBeginState);
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <main+0xa0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a19      	ldr	r2, [pc, #100]	; (80004bc <main+0xa4>)
 8000456:	019b      	lsls	r3, r3, #6
 8000458:	4413      	add	r3, r2
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff3b 	bl	80002d8 <setInterruptBeginState>
	  FSM[currentState].time();//wait(FSM[currentState].time);
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <main+0xa0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a15      	ldr	r2, [pc, #84]	; (80004bc <main+0xa4>)
 8000468:	019b      	lsls	r3, r3, #6
 800046a:	4413      	add	r3, r2
 800046c:	330c      	adds	r3, #12
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4798      	blx	r3
	  setInterruptEndState(FSM[currentState].interruptEndState);
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <main+0xa0>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a11      	ldr	r2, [pc, #68]	; (80004bc <main+0xa4>)
 8000478:	019b      	lsls	r3, r3, #6
 800047a:	4413      	add	r3, r2
 800047c:	3301      	adds	r3, #1
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff41 	bl	8000308 <setInterruptEndState>
	  input = FSM[currentState].in();
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <main+0xa0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <main+0xa4>)
 800048c:	019b      	lsls	r3, r3, #6
 800048e:	4413      	add	r3, r2
 8000490:	3308      	adds	r3, #8
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4798      	blx	r3
 8000496:	4603      	mov	r3, r0
 8000498:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <main+0xa8>)
 800049a:	6013      	str	r3, [r2, #0]
	  currentState = FSM[currentState].next[input];
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <main+0xa0>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <main+0xa8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4905      	ldr	r1, [pc, #20]	; (80004bc <main+0xa4>)
 80004a6:	0112      	lsls	r2, r2, #4
 80004a8:	4413      	add	r3, r2
 80004aa:	3304      	adds	r3, #4
 80004ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004b0:	4a01      	ldr	r2, [pc, #4]	; (80004b8 <main+0xa0>)
 80004b2:	6013      	str	r3, [r2, #0]
	  FSM[currentState].out();
 80004b4:	e7c4      	b.n	8000440 <main+0x28>
 80004b6:	bf00      	nop
 80004b8:	20000644 	.word	0x20000644
 80004bc:	20000018 	.word	0x20000018
 80004c0:	20000648 	.word	0x20000648

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b094      	sub	sp, #80	; 0x50
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ce:	2228      	movs	r2, #40	; 0x28
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f006 fbc6 	bl	8006c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f4:	2302      	movs	r3, #2
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2310      	movs	r3, #16
 80004fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000508:	4618      	mov	r0, r3
 800050a:	f004 fa6f 	bl	80049ec <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000514:	f001 f9fe 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fcdc 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800053e:	f001 f9e9 	bl	8001914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000542:	2302      	movs	r3, #2
 8000544:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f004 fe5d 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000558:	f001 f9dc 	bl	8001914 <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3750      	adds	r7, #80	; 0x50
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_ADC1_Init+0x74>)
 8000576:	4a19      	ldr	r2, [pc, #100]	; (80005dc <MX_ADC1_Init+0x78>)
 8000578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_ADC1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_ADC1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_ADC1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_ADC1_Init+0x74>)
 800058e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000592:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MX_ADC1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_ADC1_Init+0x74>)
 800059c:	2201      	movs	r2, #1
 800059e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_ADC1_Init+0x74>)
 80005a2:	f002 f825 	bl	80025f0 <HAL_ADC_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005ac:	f001 f9b2 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005b8:	2307      	movs	r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_ADC1_Init+0x74>)
 80005c2:	f002 fa29 	bl	8002a18 <HAL_ADC_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005cc:	f001 f9a2 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200003b8 	.word	0x200003b8
 80005dc:	40012400 	.word	0x40012400

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f003 fbc5 	bl	8003dac <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f001 f974 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000042c 	.word	0x2000042c
 8000634:	40005400 	.word	0x40005400
 8000638:	00061a80 	.word	0x00061a80

0800063c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_TIM1_Init+0x9c>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_TIM1_Init+0xa0>)
 800065c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15000;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000660:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000664:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15000;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_TIM1_Init+0x9c>)
 800066e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_TIM1_Init+0x9c>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000686:	4814      	ldr	r0, [pc, #80]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000688:	f004 fe76 	bl	8005378 <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000692:	f001 f93f 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_TIM1_Init+0x9c>)
 80006a4:	f005 f840 	bl	8005728 <HAL_TIM_ConfigClockSource>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006ae:	f001 f931 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_TIM1_Init+0x9c>)
 80006c0:	f005 fa16 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006ca:	f001 f923 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000480 	.word	0x20000480
 80006dc:	40012c00 	.word	0x40012c00

080006e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_TIM2_Init+0x98>)
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_TIM2_Init+0x98>)
 8000706:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800070a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_TIM2_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_TIM2_Init+0x98>)
 8000714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_TIM2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_TIM2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_TIM2_Init+0x98>)
 8000728:	f004 fe26 	bl	8005378 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000732:	f001 f8ef 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_TIM2_Init+0x98>)
 8000744:	f004 fff0 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800074e:	f001 f8e1 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_TIM2_Init+0x98>)
 8000760:	f005 f9c6 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076a:	f001 f8d3 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200004c8 	.word	0x200004c8

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART1_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000788:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f005 fa0c 	bl	8005bd0 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f001 f8a9 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000510 	.word	0x20000510
 80007cc:	40013800 	.word	0x40013800

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_DMA_Init+0x58>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_DMA_Init+0x58>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA_Init+0x58>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200b      	movs	r0, #11
 80007f4:	f002 fc05 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007f8:	200b      	movs	r0, #11
 80007fa:	f002 fc1e 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200e      	movs	r0, #14
 8000804:	f002 fbfd 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000808:	200e      	movs	r0, #14
 800080a:	f002 fc16 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200f      	movs	r0, #15
 8000814:	f002 fbf5 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000818:	200f      	movs	r0, #15
 800081a:	f002 fc0e 	bl	800303a <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4b49      	ldr	r3, [pc, #292]	; (8000968 <MX_GPIO_Init+0x13c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a48      	ldr	r2, [pc, #288]	; (8000968 <MX_GPIO_Init+0x13c>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b46      	ldr	r3, [pc, #280]	; (8000968 <MX_GPIO_Init+0x13c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <MX_GPIO_Init+0x13c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a42      	ldr	r2, [pc, #264]	; (8000968 <MX_GPIO_Init+0x13c>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x13c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <MX_GPIO_Init+0x13c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a3c      	ldr	r2, [pc, #240]	; (8000968 <MX_GPIO_Init+0x13c>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <MX_GPIO_Init+0x13c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_Pin|PIN_POWER_DISPLAY_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800088e:	4837      	ldr	r0, [pc, #220]	; (800096c <MX_GPIO_Init+0x140>)
 8000890:	f003 fa43 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_M0_Pin|PIN_M1_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2160      	movs	r1, #96	; 0x60
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <MX_GPIO_Init+0x144>)
 800089a:	f003 fa3e 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_LED_Pin PIN_POWER_DISPLAY_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin|PIN_POWER_DISPLAY_Pin;
 800089e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	482d      	ldr	r0, [pc, #180]	; (800096c <MX_GPIO_Init+0x140>)
 80008b8:	f003 f894 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_M0_Pin PIN_M1_Pin */
  GPIO_InitStruct.Pin = PIN_M0_Pin|PIN_M1_Pin;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4827      	ldr	r0, [pc, #156]	; (8000970 <MX_GPIO_Init+0x144>)
 80008d4:	f003 f886 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_AUX_Pin */
  GPIO_InitStruct.Pin = PIN_AUX_Pin;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0x148>)
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIN_AUX_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x144>)
 80008ec:	f003 f87a 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_BUTTON_10_Pin PIN_BUTTON_11_Pin PIN_BUTTON_12_Pin PIN_BUTTON_13_Pin
                           PIN_BUTTON_14_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_10_Pin|PIN_BUTTON_11_Pin|PIN_BUTTON_12_Pin|PIN_BUTTON_13_Pin
 80008f0:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80008f4:	613b      	str	r3, [r7, #16]
                          |PIN_BUTTON_14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <MX_GPIO_Init+0x150>)
 8000906:	f003 f86d 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_BUTTON_DEMOLITION_Pin PIN_BUTTON_TEST_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_DEMOLITION_Pin|PIN_BUTTON_TEST_Pin;
 800090a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_GPIO_Init+0x154>)
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4817      	ldr	r0, [pc, #92]	; (800097c <MX_GPIO_Init+0x150>)
 8000920:	f003 f860 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_BUTTON_ARM_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_ARM_Pin;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_GPIO_Init+0x14c>)
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIN_BUTTON_ARM_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4619      	mov	r1, r3
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_GPIO_Init+0x144>)
 800093a:	f003 f853 	bl	80039e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2017      	movs	r0, #23
 8000944:	f002 fb5d 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000948:	2017      	movs	r0, #23
 800094a:	f002 fb76 	bl	800303a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2028      	movs	r0, #40	; 0x28
 8000954:	f002 fb55 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000958:	2028      	movs	r0, #40	; 0x28
 800095a:	f002 fb6e 	bl	800303a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	40011000 	.word	0x40011000
 8000970:	40010800 	.word	0x40010800
 8000974:	10110000 	.word	0x10110000
 8000978:	10310000 	.word	0x10310000
 800097c:	40010c00 	.word	0x40010c00
 8000980:	10210000 	.word	0x10210000

08000984 <startstart>:

/* USER CODE BEGIN 4 */
//=========================================================================================================================================//
//=================================================startstart=================================================================//
//=========================================================================================================================================//
void startstart(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
#ifdef Debug
        printf("stnvartstart: \n");
 8000988:	4833      	ldr	r0, [pc, #204]	; (8000a58 <startstart+0xd4>)
 800098a:	f006 f9f9 	bl	8006d80 <puts>
#endif
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f002 fb61 	bl	8003056 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000994:	2017      	movs	r0, #23
 8000996:	f002 fb5e 	bl	8003056 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a0:	482e      	ldr	r0, [pc, #184]	; (8000a5c <startstart+0xd8>)
 80009a2:	f003 f9ba 	bl	8003d1a <HAL_GPIO_WritePin>
	e32PinSetup(sleepMode);
 80009a6:	2003      	movs	r0, #3
 80009a8:	f000 f86a 	bl	8000a80 <e32PinSetup>
	HAL_Delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f001 fdde 	bl	8002570 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart1, &txByteSetup0, sizeof(txByteSetup0));
 80009b4:	2206      	movs	r2, #6
 80009b6:	492a      	ldr	r1, [pc, #168]	; (8000a60 <startstart+0xdc>)
 80009b8:	482a      	ldr	r0, [pc, #168]	; (8000a64 <startstart+0xe0>)
 80009ba:	f005 f959 	bl	8005c70 <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 80009be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c2:	f001 fdd5 	bl	8002570 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart1, &txByteSetup1, sizeof(txByteSetup1));
 80009c6:	2203      	movs	r2, #3
 80009c8:	4927      	ldr	r1, [pc, #156]	; (8000a68 <startstart+0xe4>)
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <startstart+0xe0>)
 80009cc:	f005 f950 	bl	8005c70 <HAL_UART_Transmit_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveBuffer, rxByteSize);
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <startstart+0xe8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	4925      	ldr	r1, [pc, #148]	; (8000a70 <startstart+0xec>)
 80009da:	4822      	ldr	r0, [pc, #136]	; (8000a64 <startstart+0xe0>)
 80009dc:	f005 f9b8 	bl	8005d50 <HAL_UARTEx_ReceiveToIdle_DMA>
	checkRxStartMessage(txByteSetup0, rxByteSize);
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <startstart+0xe8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <startstart+0xdc>)
 80009e8:	f000 f896 	bl	8000b18 <checkRxStartMessage>
	rxByteSize = sizeof(txByteDemolition);
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <startstart+0xe8>)
 80009ee:	2206      	movs	r2, #6
 80009f0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PIN_POWER_DISPLAY_GPIO_Port, PIN_POWER_DISPLAY_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f8:	4818      	ldr	r0, [pc, #96]	; (8000a5c <startstart+0xd8>)
 80009fa:	f003 f98e 	bl	8003d1a <HAL_GPIO_WritePin>
	//
	//e32PinSetup(powerSavingMode);
	HAL_Delay(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f001 fdb5 	bl	8002570 <HAL_Delay>
	SSD1306_Init();
 8000a06:	f000 ff8b 	bl	8001920 <SSD1306_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a0a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2178      	movs	r1, #120	; 0x78
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <startstart+0xf0>)
 8000a14:	f003 fc0c 	bl	8004230 <HAL_I2C_IsDeviceReady>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d009      	beq.n	8000a32 <startstart+0xae>
			/* Return false */
		while(1){
			HAL_Delay(1000);
 8000a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a22:	f001 fda5 	bl	8002570 <HAL_Delay>
			HAL_GPIO_TogglePin(PIN_LED_GPIO_Port, PIN_LED_Pin);
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <startstart+0xd8>)
 8000a2c:	f003 f98d 	bl	8003d4a <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000a30:	e7f5      	b.n	8000a1e <startstart+0x9a>
		}
			return 0;
		}
	outDispl = outDisplayUser;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <startstart+0xf4>)
 8000a34:	4a11      	ldr	r2, [pc, #68]	; (8000a7c <startstart+0xf8>)
 8000a36:	601a      	str	r2, [r3, #0]
	outBufferDisplay();
 8000a38:	f000 f9c8 	bl	8000dcc <outBufferDisplay>
	e32PinSetup(powerSavingMode);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 f81f 	bl	8000a80 <e32PinSetup>
	//
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a42:	2028      	movs	r0, #40	; 0x28
 8000a44:	f002 faf9 	bl	800303a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a48:	2017      	movs	r0, #23
 8000a4a:	f002 faf6 	bl	800303a <HAL_NVIC_EnableIRQ>
	//////////////////////////////////////////////////////////////////////////////////////////////
	HAL_Delay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f001 fd8e 	bl	8002570 <HAL_Delay>

}
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08007cec 	.word	0x08007cec
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	080093f0 	.word	0x080093f0
 8000a64:	20000510 	.word	0x20000510
 8000a68:	080093f8 	.word	0x080093f8
 8000a6c:	20000016 	.word	0x20000016
 8000a70:	200005e4 	.word	0x200005e4
 8000a74:	2000042c 	.word	0x2000042c
 8000a78:	20000640 	.word	0x20000640
 8000a7c:	08000ee9 	.word	0x08000ee9

08000a80 <e32PinSetup>:


//===============================================================================================================================//
//==============================================e32PinSetup(E32PinState mode)====================================================//
//===============================================================================================================================//
void e32PinSetup(E32PinState mode){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d837      	bhi.n	8000b00 <e32PinSetup+0x80>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <e32PinSetup+0x18>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000abf 	.word	0x08000abf
 8000a9c:	08000ad5 	.word	0x08000ad5
 8000aa0:	08000aeb 	.word	0x08000aeb
 8000aa4:	08000aa9 	.word	0x08000aa9
	case sleepMode:
    	HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2120      	movs	r1, #32
 8000aac:	4818      	ldr	r0, [pc, #96]	; (8000b10 <e32PinSetup+0x90>)
 8000aae:	f003 f934 	bl	8003d1a <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	4816      	ldr	r0, [pc, #88]	; (8000b10 <e32PinSetup+0x90>)
 8000ab8:	f003 f92f 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000abc:	e024      	b.n	8000b08 <e32PinSetup+0x88>
	case normalMode:
    	HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <e32PinSetup+0x90>)
 8000ac4:	f003 f929 	bl	8003d1a <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <e32PinSetup+0x90>)
 8000ace:	f003 f924 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000ad2:	e019      	b.n	8000b08 <e32PinSetup+0x88>
	case wakeUpMode:
    	HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <e32PinSetup+0x90>)
 8000ada:	f003 f91e 	bl	8003d1a <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <e32PinSetup+0x90>)
 8000ae4:	f003 f919 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000ae8:	e00e      	b.n	8000b08 <e32PinSetup+0x88>
	case powerSavingMode:
    	HAL_GPIO_WritePin(PIN_M0_GPIO_Port, PIN_M0_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <e32PinSetup+0x90>)
 8000af0:	f003 f913 	bl	8003d1a <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(PIN_M1_GPIO_Port, PIN_M1_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <e32PinSetup+0x90>)
 8000afa:	f003 f90e 	bl	8003d1a <HAL_GPIO_WritePin>
	break;
 8000afe:	e003      	b.n	8000b08 <e32PinSetup+0x88>
	default:
		#ifdef Debug
			printf("NUMBER_ERROR_SETUP_E32_PIN\n");
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <e32PinSetup+0x94>)
 8000b02:	f006 f93d 	bl	8006d80 <puts>
		#endif

		break;
 8000b06:	bf00      	nop
	}

}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40010800 	.word	0x40010800
 8000b14:	08007cfc 	.word	0x08007cfc

08000b18 <checkRxStartMessage>:
//=============================================================================================================================//
//=====================================================checkRxStartMessage=====================================================//
//=============================================================================================================================//
void checkRxStartMessage(uint8_t* pTx, uint8_t n){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
#ifdef Debug
	printf("checkRxStartMessage().\n");
 8000b24:	481d      	ldr	r0, [pc, #116]	; (8000b9c <checkRxStartMessage+0x84>)
 8000b26:	f006 f92b 	bl	8006d80 <puts>
#endif
	HAL_Delay(500);
 8000b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2e:	f001 fd1f 	bl	8002570 <HAL_Delay>
	/*
	if(fsmEvent == fsmEventError){
		return;
	}
	*/
	for(uint8_t i = 0; i < n;i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e029      	b.n	8000b8c <checkRxStartMessage+0x74>
		if(receiveBuffer[i] != *(pTx+i)){
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <checkRxStartMessage+0x88>)
 8000b3c:	5cd2      	ldrb	r2, [r2, r3]
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	440b      	add	r3, r1
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d01a      	beq.n	8000b80 <checkRxStartMessage+0x68>
			errorHandleError = 1;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <checkRxStartMessage+0x8c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
			nextState = error;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <checkRxStartMessage+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
			#ifdef Debug
				printf("compareRxMessage_Error.\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <checkRxStartMessage+0x94>)
 8000b58:	f006 f912 	bl	8006d80 <puts>
				for(int k = 0; k<5; k++){
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	e00a      	b.n	8000b78 <checkRxStartMessage+0x60>
					printf("compareRxMessage_Error.%d\n",receiveBuffer[k]);
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <checkRxStartMessage+0x88>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <checkRxStartMessage+0x98>)
 8000b6e:	f006 f881 	bl	8006c74 <iprintf>
				for(int k = 0; k<5; k++){
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	ddf1      	ble.n	8000b62 <checkRxStartMessage+0x4a>
				}

			#endif
			return;
 8000b7e:	e009      	b.n	8000b94 <checkRxStartMessage+0x7c>
		}
		errorHandleError = 2;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <checkRxStartMessage+0x8c>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < n;i++){
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3d1      	bcc.n	8000b38 <checkRxStartMessage+0x20>
		//nextState = wait;
	}
	//fsmEvent = fsmEventNoEvent;
}
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08007d18 	.word	0x08007d18
 8000ba0:	200005e4 	.word	0x200005e4
 8000ba4:	200005e0 	.word	0x200005e0
 8000ba8:	20000628 	.word	0x20000628
 8000bac:	08007d30 	.word	0x08007d30
 8000bb0:	08007d48 	.word	0x08007d48

08000bb4 <chekRxMessage>:
		}
	}

}
*/
uint8_t chekRxMessage(uint8_t* pTx, uint8_t* pTx2, uint8_t n){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	71fb      	strb	r3, [r7, #7]
	if (bufferDisplay.timeTxWake>=1){
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <chekRxMessage+0x98>)
 8000bc4:	7fdb      	ldrb	r3, [r3, #31]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d026      	beq.n	8000c18 <chekRxMessage+0x64>
		if((compareMessage(pTx, n) == 1) && (compareAdressMessage(pTx) == 1)){
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 f840 	bl	8000c54 <compareMessage>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d11e      	bne.n	8000c18 <chekRxMessage+0x64>
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f874 	bl	8000cc8 <compareAdressMessage>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d118      	bne.n	8000c18 <chekRxMessage+0x64>
			bufferDisplay.numberRxExploder[receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]] = 1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <chekRxMessage+0x9c>)
 8000be8:	78db      	ldrb	r3, [r3, #3]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <chekRxMessage+0x98>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	715a      	strb	r2, [r3, #5]
			bufferDisplay.numberRxExploderOnDetonator[receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]] = receiveBuffer[ADRES_NUMBER_BYTE_DETONATOR_ON];
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <chekRxMessage+0x9c>)
 8000bf6:	78db      	ldrb	r3, [r3, #3]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <chekRxMessage+0x9c>)
 8000bfc:	791a      	ldrb	r2, [r3, #4]
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <chekRxMessage+0x98>)
 8000c00:	440b      	add	r3, r1
 8000c02:	73da      	strb	r2, [r3, #15]
			bufferDisplay.numberRxExploderVolt[receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]] = receiveBuffer[ADRES_NUMBER_BYTE_VOLT];
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <chekRxMessage+0x9c>)
 8000c06:	78db      	ldrb	r3, [r3, #3]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <chekRxMessage+0x9c>)
 8000c0c:	795a      	ldrb	r2, [r3, #5]
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <chekRxMessage+0x98>)
 8000c10:	440b      	add	r3, r1
 8000c12:	751a      	strb	r2, [r3, #20]
			return waitTx;
 8000c14:	2309      	movs	r3, #9
 8000c16:	e014      	b.n	8000c42 <chekRxMessage+0x8e>
			}
		}
	if (bufferDisplay.timeTxWake<1){
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <chekRxMessage+0x98>)
 8000c1a:	7fdb      	ldrb	r3, [r3, #31]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10f      	bne.n	8000c40 <chekRxMessage+0x8c>
		if((compareMessage(pTx2, n) == 1) && (compareAdressMessage(pTx2) == 1)){
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4619      	mov	r1, r3
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f000 f815 	bl	8000c54 <compareMessage>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <chekRxMessage+0x8c>
 8000c30:	68b8      	ldr	r0, [r7, #8]
 8000c32:	f000 f849 	bl	8000cc8 <compareAdressMessage>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <chekRxMessage+0x8c>

					return waitMenu;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	e000      	b.n	8000c42 <chekRxMessage+0x8e>
			}
		}
	return wait;
 8000c40:	230b      	movs	r3, #11
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000608 	.word	0x20000608
 8000c50:	200005e4 	.word	0x200005e4

08000c54 <compareMessage>:

uint8_t compareMessage(uint8_t* pTx, uint8_t n){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < n;i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e021      	b.n	8000caa <compareMessage+0x56>
					if(receiveBuffer[i] != *(pTx+i)){
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <compareMessage+0x68>)
 8000c6a:	5cd2      	ldrb	r2, [r2, r3]
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	440b      	add	r3, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d015      	beq.n	8000ca4 <compareMessage+0x50>
						#ifdef Debug
							printf("compareRxMessage_Error.\n");
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <compareMessage+0x6c>)
 8000c7a:	f006 f881 	bl	8006d80 <puts>
							for(int k = 0; k<16; k++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	e00a      	b.n	8000c9a <compareMessage+0x46>
								printf("compareRxMessage_Error.%d\n",receiveBuffer[k]);
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <compareMessage+0x68>)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <compareMessage+0x70>)
 8000c90:	f005 fff0 	bl	8006c74 <iprintf>
							for(int k = 0; k<16; k++){
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	ddf1      	ble.n	8000c84 <compareMessage+0x30>
							}
						#endif
							return 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e007      	b.n	8000cb4 <compareMessage+0x60>
	for(uint8_t i = 0; i < n;i++){
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3d9      	bcc.n	8000c66 <compareMessage+0x12>
					}
				}
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200005e4 	.word	0x200005e4
 8000cc0:	08007d30 	.word	0x08007d30
 8000cc4:	08007d48 	.word	0x08007d48

08000cc8 <compareAdressMessage>:
uint8_t compareAdressMessage(uint8_t* pTx){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if(receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]>NUMBER_EXPLODER){
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <compareAdressMessage+0x2c>)
 8000cd2:	78db      	ldrb	r3, [r3, #3]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d907      	bls.n	8000ce8 <compareAdressMessage+0x20>
							#ifdef Debug
							printf("+++++++++++++++ERROR NUMBAR EXPLODER RX MESSAGE TEST.%d\n",receiveBuffer[ADRES_NUMBER_BYTE_EXPLODER]);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <compareAdressMessage+0x2c>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <compareAdressMessage+0x30>)
 8000ce0:	f005 ffc8 	bl	8006c74 <iprintf>
							#endif
							return 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e000      	b.n	8000cea <compareAdressMessage+0x22>
						} else {return 1;}
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200005e4 	.word	0x200005e4
 8000cf8:	08007d64 	.word	0x08007d64

08000cfc <handlerError>:
//=============================================================================================================================//
//=====================================================handlerError=====================================================//
//=============================================================================================================================//
uint32_t handlerError(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0


	switch(errorHandleError){
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <handlerError+0x58>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b09      	cmp	r3, #9
 8000d06:	d81f      	bhi.n	8000d48 <handlerError+0x4c>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <handlerError+0x14>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d39 	.word	0x08000d39
 8000d14:	08000d3d 	.word	0x08000d3d
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	08000d49 	.word	0x08000d49
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	08000d49 	.word	0x08000d49
 8000d28:	08000d49 	.word	0x08000d49
 8000d2c:	08000d49 	.word	0x08000d49
 8000d30:	08000d49 	.word	0x08000d49
 8000d34:	08000d45 	.word	0x08000d45
	case 0:
		return 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e009      	b.n	8000d50 <handlerError+0x54>
		break;
	case 1:
		return error;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e007      	b.n	8000d50 <handlerError+0x54>
		break;
	case 2:
		return wait;
 8000d40:	230b      	movs	r3, #11
 8000d42:	e005      	b.n	8000d50 <handlerError+0x54>
	case waitTx:
		return waitTx;
 8000d44:	2309      	movs	r3, #9
 8000d46:	e003      	b.n	8000d50 <handlerError+0x54>
	default:
		break;
 8000d48:	bf00      	nop
	}
	HAL_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 fc10 	bl	8002570 <HAL_Delay>
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200005e0 	.word	0x200005e0

08000d58 <ForewerHandlerError>:
//=============================================================================================================================//
//=====================================================ForewerHandlerError=====================================================//
//=============================================================================================================================//
uint32_t ForewerHandlerError(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("NUMBER_ERROR_SETUP_E32_PIN\n");
 8000d5e:	4810      	ldr	r0, [pc, #64]	; (8000da0 <ForewerHandlerError+0x48>)
 8000d60:	f006 f80e 	bl	8006d80 <puts>
#endif
	Flash_Write_Data(FLASH_ADDRES_START_ERROR , (uint32_t *)flashData, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	490f      	ldr	r1, [pc, #60]	; (8000da4 <ForewerHandlerError+0x4c>)
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ForewerHandlerError+0x50>)
 8000d6a:	f7ff fa17 	bl	800019c <Flash_Write_Data>
	while(1){
		for(int i = 0; (i<(errorHandleError*2)); i++){
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e00a      	b.n	8000d8a <ForewerHandlerError+0x32>
			HAL_GPIO_TogglePin(PIN_LED_GPIO_Port, PIN_LED_Pin);
 8000d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <ForewerHandlerError+0x54>)
 8000d7a:	f002 ffe6 	bl	8003d4a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000d7e:	20c8      	movs	r0, #200	; 0xc8
 8000d80:	f001 fbf6 	bl	8002570 <HAL_Delay>
		for(int i = 0; (i<(errorHandleError*2)); i++){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <ForewerHandlerError+0x58>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	005a      	lsls	r2, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d8ee      	bhi.n	8000d74 <ForewerHandlerError+0x1c>
			}
		HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f001 fbe9 	bl	8002570 <HAL_Delay>
		for(int i = 0; (i<(errorHandleError*2)); i++){
 8000d9e:	e7e6      	b.n	8000d6e <ForewerHandlerError+0x16>
 8000da0:	08007cfc 	.word	0x08007cfc
 8000da4:	20000604 	.word	0x20000604
 8000da8:	08010010 	.word	0x08010010
 8000dac:	40011000 	.word	0x40011000
 8000db0:	200005e0 	.word	0x200005e0

08000db4 <outDisplay>:
	HAL_Delay(1);
}
//=============================================================================================================================//
//=====================================================ForewerHandlerError=====================================================//
//=============================================================================================================================//
void outDisplay(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f001 fbd9 	bl	8002570 <HAL_Delay>
	outDispl();
 8000dbe:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <outDisplay+0x14>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4798      	blx	r3
	}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000640 	.word	0x20000640

08000dcc <outBufferDisplay>:
void outBufferDisplay(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

	bufferDisplay.bfDetonator[0] = !HAL_GPIO_ReadPin(PIN_BUTTON_10_GPIO_Port, PIN_BUTTON_10_Pin);
 8000dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd4:	482e      	ldr	r0, [pc, #184]	; (8000e90 <outBufferDisplay+0xc4>)
 8000dd6:	f002 ff89 	bl	8003cec <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <outBufferDisplay+0xc8>)
 8000dea:	701a      	strb	r2, [r3, #0]
	bufferDisplay.bfDetonator[1] = !HAL_GPIO_ReadPin(PIN_BUTTON_11_GPIO_Port, PIN_BUTTON_11_Pin);
 8000dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df0:	4827      	ldr	r0, [pc, #156]	; (8000e90 <outBufferDisplay+0xc4>)
 8000df2:	f002 ff7b 	bl	8003cec <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <outBufferDisplay+0xc8>)
 8000e06:	705a      	strb	r2, [r3, #1]
	bufferDisplay.bfDetonator[2] = !HAL_GPIO_ReadPin(PIN_BUTTON_12_GPIO_Port, PIN_BUTTON_12_Pin);
 8000e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0c:	4820      	ldr	r0, [pc, #128]	; (8000e90 <outBufferDisplay+0xc4>)
 8000e0e:	f002 ff6d 	bl	8003cec <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf0c      	ite	eq
 8000e18:	2301      	moveq	r3, #1
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <outBufferDisplay+0xc8>)
 8000e22:	709a      	strb	r2, [r3, #2]
	bufferDisplay.bfDetonator[3] = !HAL_GPIO_ReadPin(PIN_BUTTON_13_GPIO_Port, PIN_BUTTON_13_Pin);
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	4819      	ldr	r0, [pc, #100]	; (8000e90 <outBufferDisplay+0xc4>)
 8000e2a:	f002 ff5f 	bl	8003cec <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf0c      	ite	eq
 8000e34:	2301      	moveq	r3, #1
 8000e36:	2300      	movne	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <outBufferDisplay+0xc8>)
 8000e3e:	70da      	strb	r2, [r3, #3]
	bufferDisplay.bfDetonator[4] = !HAL_GPIO_ReadPin(PIN_BUTTON_14_GPIO_Port, PIN_BUTTON_14_Pin);
 8000e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <outBufferDisplay+0xc4>)
 8000e46:	f002 ff51 	bl	8003cec <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <outBufferDisplay+0xc8>)
 8000e5a:	711a      	strb	r2, [r3, #4]
	bufferDisplay.bfArm = !HAL_GPIO_ReadPin(PIN_BUTTON_ARM_GPIO_Port, PIN_BUTTON_ARM_Pin);
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <outBufferDisplay+0xcc>)
 8000e62:	f002 ff43 	bl	8003cec <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <outBufferDisplay+0xc8>)
 8000e76:	771a      	strb	r2, [r3, #28]
	readPower();
 8000e78:	f000 f812 	bl	8000ea0 <readPower>
	bufferDisplay.bfPowerPult = adcVoltage[0];
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <outBufferDisplay+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <outBufferDisplay+0xc8>)
 8000e84:	769a      	strb	r2, [r3, #26]
	HAL_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f001 fb72 	bl	8002570 <HAL_Delay>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	20000608 	.word	0x20000608
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	200005fc 	.word	0x200005fc

08000ea0 <readPower>:

//===============================================================================================================================//
//=================================================readPower()===============================================================//
//===============================================================================================================================//
void readPower(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("readPower().\n");
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <readPower+0x34>)
 8000ea6:	f005 ff6b 	bl	8006d80 <puts>
	if(adcValInVolt>10000){
#ifdef Debug
	printf("ErrorReadVolt.\n");
#endif
*/
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM);
 8000eaa:	2202      	movs	r2, #2
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <readPower+0x38>)
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <readPower+0x3c>)
 8000eb0:	f001 fc76 	bl	80027a0 <HAL_ADC_Start_DMA>
    HAL_Delay(50);  // Задержка перед новым измерением
 8000eb4:	2032      	movs	r0, #50	; 0x32
 8000eb6:	f001 fb5b 	bl	8002570 <HAL_Delay>
    		if(adcVoltage[0]>50 || adcVoltage[0]<10){
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <readPower+0x40>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b32      	cmp	r3, #50	; 0x32
 8000ec0:	d803      	bhi.n	8000eca <readPower+0x2a>
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <readPower+0x40>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d802      	bhi.n	8000ed0 <readPower+0x30>
			#ifdef Debug
				printf("ErrorReadVolt.\n");
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <readPower+0x44>)
 8000ecc:	f005 ff58 	bl	8006d80 <puts>
	//codeError = NUMBER_ERROR_READ_DET;
	//Flash_Read_Data(FLASH_ADDRES_READ_DETON_ERROR , flashRxData, 1);
	//flashData[0]=flashRxData[0]+1;
	//Flash_Write_Data(FLASH_ADDRES_READ_DETON_ERROR , (uint32_t *)flashData, 1);
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08007da0 	.word	0x08007da0
 8000ed8:	200005f8 	.word	0x200005f8
 8000edc:	200003b8 	.word	0x200003b8
 8000ee0:	200005fc 	.word	0x200005fc
 8000ee4:	08007db0 	.word	0x08007db0

08000ee8 <outDisplayUser>:
//===============================================================================================================================//
//=================================================outDisplayUser()===============================================================//
//===============================================================================================================================//
void outDisplayUser(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	//HAL_Delay(200);
	 //SSD1306_Clear();
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000eee:	2025      	movs	r0, #37	; 0x25
 8000ef0:	f002 f8b1 	bl	8003056 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000ef4:	2028      	movs	r0, #40	; 0x28
 8000ef6:	f002 f8ae 	bl	8003056 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000efa:	2017      	movs	r0, #23
 8000efc:	f002 f8ab 	bl	8003056 <HAL_NVIC_DisableIRQ>
	SSD1306_Fill (0);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fdff 	bl	8001b04 <SSD1306_Fill>

	for(uint8_t i = 0; i< NUMBER_EXPLODER; i++ ){
 8000f06:	2300      	movs	r3, #0
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	e09c      	b.n	8001046 <outDisplayUser+0x15e>
		if (bufferDisplay.bfDetonator[i]==1){
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4a72      	ldr	r2, [pc, #456]	; (80010d8 <outDisplayUser+0x1f0>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d122      	bne.n	8000f5c <outDisplayUser+0x74>
			SSD1306_GotoXY (0,(i*12)+12);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	0052      	lsls	r2, r2, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4619      	mov	r1, r3
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fe61 	bl	8001bf0 <SSD1306_GotoXY>
			//bufferDisplay.bfDetonator[i];
			SSD1306_Puts ("Det ", &Font_7x10, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	496a      	ldr	r1, [pc, #424]	; (80010dc <outDisplayUser+0x1f4>)
 8000f32:	486b      	ldr	r0, [pc, #428]	; (80010e0 <outDisplayUser+0x1f8>)
 8000f34:	f000 fef2 	bl	8001d1c <SSD1306_Puts>
			SSD1306_Puts (intToChar((i+1), 1), &Font_7x10, 1);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f985 	bl	8001250 <intToChar>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4964      	ldr	r1, [pc, #400]	; (80010dc <outDisplayUser+0x1f4>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fee5 	bl	8001d1c <SSD1306_Puts>
			SSD1306_Puts (":", &Font_7x10, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	4961      	ldr	r1, [pc, #388]	; (80010dc <outDisplayUser+0x1f4>)
 8000f56:	4863      	ldr	r0, [pc, #396]	; (80010e4 <outDisplayUser+0x1fc>)
 8000f58:	f000 fee0 	bl	8001d1c <SSD1306_Puts>
		}
		if (bufferDisplay.numberRxExploder[i] == 1){
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4a5e      	ldr	r2, [pc, #376]	; (80010d8 <outDisplayUser+0x1f0>)
 8000f60:	4413      	add	r3, r2
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d114      	bne.n	8000f92 <outDisplayUser+0xaa>
			SSD1306_GotoXY (40,(i*12));
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	0052      	lsls	r2, r2, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	2028      	movs	r0, #40	; 0x28
 8000f7a:	f000 fe39 	bl	8001bf0 <SSD1306_GotoXY>
			SSD1306_Puts (" +", &Font_7x10, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4956      	ldr	r1, [pc, #344]	; (80010dc <outDisplayUser+0x1f4>)
 8000f82:	4859      	ldr	r0, [pc, #356]	; (80010e8 <outDisplayUser+0x200>)
 8000f84:	f000 feca 	bl	8001d1c <SSD1306_Puts>
			bufferDisplay.numberRxExploder[i] = 0;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4a53      	ldr	r2, [pc, #332]	; (80010d8 <outDisplayUser+0x1f0>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	2200      	movs	r2, #0
 8000f90:	715a      	strb	r2, [r3, #5]
		}
		if (bufferDisplay.numberRxExploderOnDetonator[i] == 1){
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a50      	ldr	r2, [pc, #320]	; (80010d8 <outDisplayUser+0x1f0>)
 8000f96:	4413      	add	r3, r2
 8000f98:	7bdb      	ldrb	r3, [r3, #15]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d114      	bne.n	8000fc8 <outDisplayUser+0xe0>
			SSD1306_GotoXY (50,(i*12));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	2032      	movs	r0, #50	; 0x32
 8000fb0:	f000 fe1e 	bl	8001bf0 <SSD1306_GotoXY>
			SSD1306_Puts ("D", &Font_7x10, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4949      	ldr	r1, [pc, #292]	; (80010dc <outDisplayUser+0x1f4>)
 8000fb8:	484c      	ldr	r0, [pc, #304]	; (80010ec <outDisplayUser+0x204>)
 8000fba:	f000 feaf 	bl	8001d1c <SSD1306_Puts>
			bufferDisplay.numberRxExploderOnDetonator[i] = 0;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <outDisplayUser+0x1f0>)
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	73da      	strb	r2, [r3, #15]
		}
		if (bufferDisplay.numberRxExploderVolt[i] >6){
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <outDisplayUser+0x1f0>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	7d1b      	ldrb	r3, [r3, #20]
 8000fd0:	2b06      	cmp	r3, #6
 8000fd2:	d935      	bls.n	8001040 <outDisplayUser+0x158>
			SSD1306_GotoXY (60,(i*12));
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	0052      	lsls	r2, r2, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	203c      	movs	r0, #60	; 0x3c
 8000fe6:	f000 fe03 	bl	8001bf0 <SSD1306_GotoXY>
			SSD1306_Puts (intToChar(bufferDisplay.numberRxExploderVolt[i], 10), &Font_7x10, 1);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <outDisplayUser+0x1f0>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	7d1b      	ldrb	r3, [r3, #20]
 8000ff2:	210a      	movs	r1, #10
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f92b 	bl	8001250 <intToChar>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4937      	ldr	r1, [pc, #220]	; (80010dc <outDisplayUser+0x1f4>)
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fe8b 	bl	8001d1c <SSD1306_Puts>
			//SSD1306_GotoXY (67,i*12+12);
			//char* til[1];
			//til[0] = ',';
			SSD1306_Puts (",", &Font_7x10, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	4934      	ldr	r1, [pc, #208]	; (80010dc <outDisplayUser+0x1f4>)
 800100a:	4839      	ldr	r0, [pc, #228]	; (80010f0 <outDisplayUser+0x208>)
 800100c:	f000 fe86 	bl	8001d1c <SSD1306_Puts>
			//SSD1306_GotoXY (72,i*12+12);
			SSD1306_Puts (intToChar(bufferDisplay.numberRxExploderVolt[i], 1), &Font_7x10, 1);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <outDisplayUser+0x1f0>)
 8001014:	4413      	add	r3, r2
 8001016:	7d1b      	ldrb	r3, [r3, #20]
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f918 	bl	8001250 <intToChar>
 8001020:	4603      	mov	r3, r0
 8001022:	2201      	movs	r2, #1
 8001024:	492d      	ldr	r1, [pc, #180]	; (80010dc <outDisplayUser+0x1f4>)
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fe78 	bl	8001d1c <SSD1306_Puts>
			//SSD1306_GotoXY (79,i*12+12);
			//char* charVolt = " volt";
			SSD1306_Puts (" volt", &Font_7x10, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	492b      	ldr	r1, [pc, #172]	; (80010dc <outDisplayUser+0x1f4>)
 8001030:	4830      	ldr	r0, [pc, #192]	; (80010f4 <outDisplayUser+0x20c>)
 8001032:	f000 fe73 	bl	8001d1c <SSD1306_Puts>
			bufferDisplay.numberRxExploderVolt[i] = 0;
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <outDisplayUser+0x1f0>)
 800103a:	4413      	add	r3, r2
 800103c:	2200      	movs	r2, #0
 800103e:	751a      	strb	r2, [r3, #20]
	for(uint8_t i = 0; i< NUMBER_EXPLODER; i++ ){
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	3301      	adds	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b04      	cmp	r3, #4
 800104a:	f67f af5f 	bls.w	8000f0c <outDisplayUser+0x24>
		}

	}

	SSD1306_GotoXY (0,0);
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f000 fdcd 	bl	8001bf0 <SSD1306_GotoXY>
	SSD1306_Puts ("Menu", &Font_7x10, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4920      	ldr	r1, [pc, #128]	; (80010dc <outDisplayUser+0x1f4>)
 800105a:	4827      	ldr	r0, [pc, #156]	; (80010f8 <outDisplayUser+0x210>)
 800105c:	f000 fe5e 	bl	8001d1c <SSD1306_Puts>

if(bufferDisplay.bfArm == 1){
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <outDisplayUser+0x1f0>)
 8001062:	7f1b      	ldrb	r3, [r3, #28]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <outDisplayUser+0x192>
	SSD1306_GotoXY (30,0);
 8001068:	2100      	movs	r1, #0
 800106a:	201e      	movs	r0, #30
 800106c:	f000 fdc0 	bl	8001bf0 <SSD1306_GotoXY>
	SSD1306_Puts ("ARM", &Font_7x10, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	491a      	ldr	r1, [pc, #104]	; (80010dc <outDisplayUser+0x1f4>)
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <outDisplayUser+0x214>)
 8001076:	f000 fe51 	bl	8001d1c <SSD1306_Puts>
}

	SSD1306_GotoXY (45,0);
 800107a:	2100      	movs	r1, #0
 800107c:	202d      	movs	r0, #45	; 0x2d
 800107e:	f000 fdb7 	bl	8001bf0 <SSD1306_GotoXY>
	SSD1306_Puts ("Volt: ", &Font_7x10, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	4915      	ldr	r1, [pc, #84]	; (80010dc <outDisplayUser+0x1f4>)
 8001086:	481e      	ldr	r0, [pc, #120]	; (8001100 <outDisplayUser+0x218>)
 8001088:	f000 fe48 	bl	8001d1c <SSD1306_Puts>
	SSD1306_Puts (intToChar(bufferDisplay.bfPowerPult, 10), &Font_7x10, 1);
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <outDisplayUser+0x1f0>)
 800108e:	7e9b      	ldrb	r3, [r3, #26]
 8001090:	210a      	movs	r1, #10
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8dc 	bl	8001250 <intToChar>
 8001098:	4603      	mov	r3, r0
 800109a:	2201      	movs	r2, #1
 800109c:	490f      	ldr	r1, [pc, #60]	; (80010dc <outDisplayUser+0x1f4>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fe3c 	bl	8001d1c <SSD1306_Puts>
	SSD1306_Puts (",", &Font_7x10, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	490d      	ldr	r1, [pc, #52]	; (80010dc <outDisplayUser+0x1f4>)
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <outDisplayUser+0x208>)
 80010aa:	f000 fe37 	bl	8001d1c <SSD1306_Puts>
	SSD1306_Puts (intToChar(bufferDisplay.bfPowerPult, 1), &Font_7x10, 1);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <outDisplayUser+0x1f0>)
 80010b0:	7e9b      	ldrb	r3, [r3, #26]
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f8cb 	bl	8001250 <intToChar>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2201      	movs	r2, #1
 80010be:	4907      	ldr	r1, [pc, #28]	; (80010dc <outDisplayUser+0x1f4>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fe2b 	bl	8001d1c <SSD1306_Puts>

	SSD1306_UpdateScreen();
 80010c6:	f000 fcef 	bl	8001aa8 <SSD1306_UpdateScreen>
	HAL_Delay(50);
 80010ca:	2032      	movs	r0, #50	; 0x32
 80010cc:	f001 fa50 	bl	8002570 <HAL_Delay>
		        SSD1306_GotoXY (0, 30);
		        SSD1306_Puts ("MOHIDEEN", &Font_11x18, 1);
		        SSD1306_UpdateScreen();
		        HAL_Delay (1000);
		        */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000608 	.word	0x20000608
 80010dc:	20000000 	.word	0x20000000
 80010e0:	08007dc0 	.word	0x08007dc0
 80010e4:	08007dc8 	.word	0x08007dc8
 80010e8:	08007dcc 	.word	0x08007dcc
 80010ec:	08007dd0 	.word	0x08007dd0
 80010f0:	08007dd4 	.word	0x08007dd4
 80010f4:	08007dd8 	.word	0x08007dd8
 80010f8:	08007de0 	.word	0x08007de0
 80010fc:	08007de8 	.word	0x08007de8
 8001100:	08007dec 	.word	0x08007dec

08001104 <outDisplayWakeTx>:
//============================================================================================================================//
//=================================================outDisplayWakeTx====================================================//
//============================================================================================================================//
void outDisplayWakeTx(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 800110a:	2025      	movs	r0, #37	; 0x25
 800110c:	f001 ffa3 	bl	8003056 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001110:	2028      	movs	r0, #40	; 0x28
 8001112:	f001 ffa0 	bl	8003056 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001116:	2017      	movs	r0, #23
 8001118:	f001 ff9d 	bl	8003056 <HAL_NVIC_DisableIRQ>
	#ifdef Debug
		printf("outDisplayWakeTx.\n");
 800111c:	4843      	ldr	r0, [pc, #268]	; (800122c <outDisplayWakeTx+0x128>)
 800111e:	f005 fe2f 	bl	8006d80 <puts>
	#endif
		int *ptr;
		int *ptr2;
		  char* ch[1];
		  char* ch2[1];
		  ptr =ch;
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	617b      	str	r3, [r7, #20]
		  ptr2 = ch2;
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	613b      	str	r3, [r7, #16]
		//SSD1306_Clear();
		  SSD1306_Fill (0);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 fce9 	bl	8001b04 <SSD1306_Fill>
		SSD1306_GotoXY (0, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fd5b 	bl	8001bf0 <SSD1306_GotoXY>
			if(flagButtonDemolition == SET){
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <outDisplayWakeTx+0x12c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <outDisplayWakeTx+0x50>
			SSD1306_Puts (" DEMOLITION", &Font_11x18, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	493b      	ldr	r1, [pc, #236]	; (8001234 <outDisplayWakeTx+0x130>)
 8001146:	483c      	ldr	r0, [pc, #240]	; (8001238 <outDisplayWakeTx+0x134>)
 8001148:	f000 fde8 	bl	8001d1c <SSD1306_Puts>
			flagButtonDemolition = RESET;
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <outDisplayWakeTx+0x12c>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e062      	b.n	800121a <outDisplayWakeTx+0x116>
		} else if (flagButtonTest == SET){
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <outDisplayWakeTx+0x138>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <outDisplayWakeTx+0x6a>
			SSD1306_Puts ("   TEST", &Font_11x18, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	4935      	ldr	r1, [pc, #212]	; (8001234 <outDisplayWakeTx+0x130>)
 8001160:	4837      	ldr	r0, [pc, #220]	; (8001240 <outDisplayWakeTx+0x13c>)
 8001162:	f000 fddb 	bl	8001d1c <SSD1306_Puts>
			flagButtonTest = RESET;
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <outDisplayWakeTx+0x138>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e055      	b.n	800121a <outDisplayWakeTx+0x116>
		} else{
		SSD1306_Puts ("   WAIT", &Font_11x18, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	4930      	ldr	r1, [pc, #192]	; (8001234 <outDisplayWakeTx+0x130>)
 8001172:	4834      	ldr	r0, [pc, #208]	; (8001244 <outDisplayWakeTx+0x140>)
 8001174:	f000 fdd2 	bl	8001d1c <SSD1306_Puts>
		SSD1306_GotoXY (40,30);
 8001178:	211e      	movs	r1, #30
 800117a:	2028      	movs	r0, #40	; 0x28
 800117c:	f000 fd38 	bl	8001bf0 <SSD1306_GotoXY>

		if (bufferDisplay.timeTxWake>9){
 8001180:	4b31      	ldr	r3, [pc, #196]	; (8001248 <outDisplayWakeTx+0x144>)
 8001182:	7fdb      	ldrb	r3, [r3, #31]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d93a      	bls.n	80011fe <outDisplayWakeTx+0xfa>
			  char g = ((char)bufferDisplay.timeTxWake/10) + '0';
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <outDisplayWakeTx+0x144>)
 800118a:	7fdb      	ldrb	r3, [r3, #31]
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <outDisplayWakeTx+0x148>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3330      	adds	r3, #48	; 0x30
 8001198:	73bb      	strb	r3, [r7, #14]
			  char g2 =((char)(bufferDisplay.timeTxWake - ((bufferDisplay.timeTxWake/10)*10))) + '0';
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <outDisplayWakeTx+0x144>)
 800119c:	7fda      	ldrb	r2, [r3, #31]
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <outDisplayWakeTx+0x144>)
 80011a0:	7fdb      	ldrb	r3, [r3, #31]
 80011a2:	492a      	ldr	r1, [pc, #168]	; (800124c <outDisplayWakeTx+0x148>)
 80011a4:	fba1 1303 	umull	r1, r3, r1, r3
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4619      	mov	r1, r3
 80011ae:	0089      	lsls	r1, r1, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3330      	adds	r3, #48	; 0x30
 80011bc:	737b      	strb	r3, [r7, #13]
			  ptr =ch;
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	617b      	str	r3, [r7, #20]
			*ptr = g;
 80011c4:	7bba      	ldrb	r2, [r7, #14]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
			*ptr2 = *ptr+4;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1d1a      	adds	r2, r3, #4
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	601a      	str	r2, [r3, #0]
			*ptr2 = g2;
 80011d4:	7b7a      	ldrb	r2, [r7, #13]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

		SSD1306_Puts (ch, &Font_11x18, 1);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	2201      	movs	r2, #1
 80011e0:	4914      	ldr	r1, [pc, #80]	; (8001234 <outDisplayWakeTx+0x130>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fd9a 	bl	8001d1c <SSD1306_Puts>
		SSD1306_GotoXY (48, 30);
 80011e8:	211e      	movs	r1, #30
 80011ea:	2030      	movs	r0, #48	; 0x30
 80011ec:	f000 fd00 	bl	8001bf0 <SSD1306_GotoXY>
		SSD1306_Puts (ch2, &Font_11x18, 1);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2201      	movs	r2, #1
 80011f4:	490f      	ldr	r1, [pc, #60]	; (8001234 <outDisplayWakeTx+0x130>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd90 	bl	8001d1c <SSD1306_Puts>
 80011fc:	e00d      	b.n	800121a <outDisplayWakeTx+0x116>
		} else {
			char g = ((char)bufferDisplay.timeTxWake) + '0';
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <outDisplayWakeTx+0x144>)
 8001200:	7fdb      	ldrb	r3, [r3, #31]
 8001202:	3330      	adds	r3, #48	; 0x30
 8001204:	73fb      	strb	r3, [r7, #15]
			   *ptr = g;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	601a      	str	r2, [r3, #0]
			SSD1306_Puts (ch, &Font_11x18, 1);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2201      	movs	r2, #1
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <outDisplayWakeTx+0x130>)
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fd81 	bl	8001d1c <SSD1306_Puts>
		}
		}
		SSD1306_UpdateScreen();
 800121a:	f000 fc45 	bl	8001aa8 <SSD1306_UpdateScreen>
		HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f001 f9a6 	bl	8002570 <HAL_Delay>
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08007df4 	.word	0x08007df4
 8001230:	2000062a 	.word	0x2000062a
 8001234:	20000008 	.word	0x20000008
 8001238:	08007e08 	.word	0x08007e08
 800123c:	2000062b 	.word	0x2000062b
 8001240:	08007e14 	.word	0x08007e14
 8001244:	08007e1c 	.word	0x08007e1c
 8001248:	20000608 	.word	0x20000608
 800124c:	cccccccd 	.word	0xcccccccd

08001250 <intToChar>:

char* intToChar(uint8_t int_, uint8_t n){
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr2;
	uint8_t *ptr3;
	  //char* ch[1];
	  //char* ch2[1];
	  //char* ch3[1];
	  ptr =ch;
 8001260:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <intToChar+0x198>)
 8001262:	61fb      	str	r3, [r7, #28]
	  ptr2 = ch2;
 8001264:	4b61      	ldr	r3, [pc, #388]	; (80013ec <intToChar+0x19c>)
 8001266:	61bb      	str	r3, [r7, #24]
	  ptr3 = ch3;
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <intToChar+0x1a0>)
 800126a:	617b      	str	r3, [r7, #20]
	if (int_<=9){
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b09      	cmp	r3, #9
 8001270:	d80c      	bhi.n	800128c <intToChar+0x3c>
		if(n>1){
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d901      	bls.n	800127c <intToChar+0x2c>
			return "";
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <intToChar+0x1a4>)
 800127a:	e0af      	b.n	80013dc <intToChar+0x18c>
		}
		char g = ((char)int_) + '0';
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	73bb      	strb	r3, [r7, #14]
		 *ptr = g;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	7bba      	ldrb	r2, [r7, #14]
 8001286:	701a      	strb	r2, [r3, #0]
		 return ch;
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <intToChar+0x198>)
 800128a:	e0a7      	b.n	80013dc <intToChar+0x18c>
	}else if(int_>99){
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b63      	cmp	r3, #99	; 0x63
 8001290:	d96f      	bls.n	8001372 <intToChar+0x122>
		char g = ((char)int_/100) + '0';
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <intToChar+0x1a8>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3330      	adds	r3, #48	; 0x30
 80012a0:	747b      	strb	r3, [r7, #17]
		char g2 =((char)((int_ - ((int_/100)*100)))/10) + '0';
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <intToChar+0x1a8>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	0091      	lsls	r1, r2, #2
 80012b8:	461a      	mov	r2, r3
 80012ba:	460b      	mov	r3, r1
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <intToChar+0x1ac>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3330      	adds	r3, #48	; 0x30
 80012d4:	743b      	strb	r3, [r7, #16]
		char g3 =((char)(int_ - ((int_/100)*100) -(((int_ - ((int_/100)*100))/10)*10)))+ '0';
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a47      	ldr	r2, [pc, #284]	; (80013f8 <intToChar+0x1a8>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	0091      	lsls	r1, r2, #2
 80012ec:	461a      	mov	r2, r3
 80012ee:	460b      	mov	r3, r1
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	79f9      	ldrb	r1, [r7, #7]
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	483d      	ldr	r0, [pc, #244]	; (80013f8 <intToChar+0x1a8>)
 8001302:	fba0 0303 	umull	r0, r3, r0, r3
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001310:	fb00 f303 	mul.w	r3, r0, r3
 8001314:	440b      	add	r3, r1
 8001316:	493a      	ldr	r1, [pc, #232]	; (8001400 <intToChar+0x1b0>)
 8001318:	fb81 0103 	smull	r0, r1, r1, r3
 800131c:	1089      	asrs	r1, r1, #2
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1acb      	subs	r3, r1, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	0089      	lsls	r1, r1, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3330      	adds	r3, #48	; 0x30
 8001334:	73fb      	strb	r3, [r7, #15]
		 ptr =ch[0];
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <intToChar+0x198>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	61fb      	str	r3, [r7, #28]
		*ptr = g;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	7c7a      	ldrb	r2, [r7, #17]
 8001340:	701a      	strb	r2, [r3, #0]
		*ptr2 = *ptr+4;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	b2da      	uxtb	r2, r3
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	701a      	strb	r2, [r3, #0]
		*ptr2 = g2;
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	7c3a      	ldrb	r2, [r7, #16]
 8001352:	701a      	strb	r2, [r3, #0]
		if(n==100){
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d101      	bne.n	800135e <intToChar+0x10e>
			return ch;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <intToChar+0x198>)
 800135c:	e03e      	b.n	80013dc <intToChar+0x18c>
		}
		else if (n==10){
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	2b0a      	cmp	r3, #10
 8001362:	d101      	bne.n	8001368 <intToChar+0x118>
			return ch2;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <intToChar+0x19c>)
 8001366:	e039      	b.n	80013dc <intToChar+0x18c>
			} else if (n == 1){
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d136      	bne.n	80013dc <intToChar+0x18c>
				return ch3;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <intToChar+0x1a0>)
 8001370:	e034      	b.n	80013dc <intToChar+0x18c>
		}
	}else {
		if((n==100)){
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d101      	bne.n	800137c <intToChar+0x12c>
			return "";
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <intToChar+0x1a4>)
 800137a:	e02f      	b.n	80013dc <intToChar+0x18c>
		}
		char g = ((char)int_/10) + '0';
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <intToChar+0x1ac>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	74fb      	strb	r3, [r7, #19]
		char g2 =((char)(int_ - ((int_/10)*10))) + '0';
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <intToChar+0x1ac>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	3330      	adds	r3, #48	; 0x30
 80013aa:	74bb      	strb	r3, [r7, #18]
		 ptr =ch;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <intToChar+0x198>)
 80013ae:	61fb      	str	r3, [r7, #28]
		*ptr = g;
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	7cfa      	ldrb	r2, [r7, #19]
 80013b4:	701a      	strb	r2, [r3, #0]
		*ptr2 = *ptr+4;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	701a      	strb	r2, [r3, #0]
		*ptr2 = g2;
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	7cba      	ldrb	r2, [r7, #18]
 80013c6:	701a      	strb	r2, [r3, #0]
		if (n==10){
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d101      	bne.n	80013d2 <intToChar+0x182>
			return ch;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <intToChar+0x198>)
 80013d0:	e004      	b.n	80013dc <intToChar+0x18c>
			} else if (n == 1){
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <intToChar+0x18c>
				return ch2;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <intToChar+0x19c>)
 80013da:	e7ff      	b.n	80013dc <intToChar+0x18c>
		}
	}

}
 80013dc:	4618      	mov	r0, r3
 80013de:	3724      	adds	r7, #36	; 0x24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000634 	.word	0x20000634
 80013ec:	20000638 	.word	0x20000638
 80013f0:	2000063c 	.word	0x2000063c
 80013f4:	08007e24 	.word	0x08007e24
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	66666667 	.word	0x66666667

08001404 <waitLong>:

//============================================================================================================================//
//=================================================waitLong====================================================//
//============================================================================================================================//
void waitLong(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("waitLong.\n");
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <waitLong+0x30>)
 800140a:	f005 fcb9 	bl	8006d80 <puts>
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  */
	HAL_TIM_Base_Start_IT(&htim1);
 800140e:	480a      	ldr	r0, [pc, #40]	; (8001438 <waitLong+0x34>)
 8001410:	f004 f802 	bl	8005418 <HAL_TIM_Base_Start_IT>
	HAL_SuspendTick();
 8001414:	f001 f8d0 	bl	80025b8 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001418:	2101      	movs	r1, #1
 800141a:	2001      	movs	r0, #1
 800141c:	f003 fa98 	bl	8004950 <HAL_PWR_EnterSLEEPMode>
	//HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	HAL_ResumeTick();
 8001420:	f001 f8d8 	bl	80025d4 <HAL_ResumeTick>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <waitLong+0x34>)
 8001426:	f004 f849 	bl	80054bc <HAL_TIM_Base_Stop_IT>
	HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f001 f8a0 	bl	8002570 <HAL_Delay>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	08007e28 	.word	0x08007e28
 8001438:	20000480 	.word	0x20000480

0800143c <readInterrupt>:
//============================================================================================================================//
//================================================readInterrupt====================================================//
//============================================================================================================================//
uint32_t readInterrupt(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

	HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f001 f895 	bl	8002570 <HAL_Delay>
	return nextState;
 8001446:	4b02      	ldr	r3, [pc, #8]	; (8001450 <readInterrupt+0x14>)
 8001448:	781b      	ldrb	r3, [r3, #0]
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000628 	.word	0x20000628

08001454 <waitForever>:
//============================================================================================================================//
//================================================waitForever====================================================//
//============================================================================================================================//
void waitForever(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
#ifdef Debug
	printf("waitForever.\n");
 8001458:	480e      	ldr	r0, [pc, #56]	; (8001494 <waitForever+0x40>)
 800145a:	f005 fc91 	bl	8006d80 <puts>
#endif
	SSD1306_Clear();
 800145e:	f000 fc82 	bl	8001d66 <SSD1306_Clear>
	//SSD1306_WRITECOMMAND(0xAE);
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAE);
 8001462:	22ae      	movs	r2, #174	; 0xae
 8001464:	2100      	movs	r1, #0
 8001466:	2078      	movs	r0, #120	; 0x78
 8001468:	f000 fd00 	bl	8001e6c <ssd1306_I2C_Write>
	//HAL_GPIO_WritePin(PIN_POWER_DISPLAY_GPIO_Port, PIN_POWER_DISPLAY_Pin, RESET);
	HAL_SuspendTick();
 800146c:	f001 f8a4 	bl	80025b8 <HAL_SuspendTick>
	//HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001470:	2101      	movs	r1, #1
 8001472:	2001      	movs	r0, #1
 8001474:	f003 fa88 	bl	8004988 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick();
 8001478:	f001 f8ac 	bl	80025d4 <HAL_ResumeTick>
	//HAL_GPIO_WritePin(PIN_POWER_DISPLAY_GPIO_Port, PIN_POWER_DISPLAY_Pin, SET);
	//SSD1306_WRITECOMMAND(0xAF);
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAF);
 800147c:	22af      	movs	r2, #175	; 0xaf
 800147e:	2100      	movs	r1, #0
 8001480:	2078      	movs	r0, #120	; 0x78
 8001482:	f000 fcf3 	bl	8001e6c <ssd1306_I2C_Write>
	//SSD1306_Init();
	HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f001 f871 	bl	8002570 <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	08007e34 	.word	0x08007e34

08001498 <outTxMessage>:
//============================================================================================================================//
//================================================outTxMessage================================================================//
//============================================================================================================================//
void outTxMessage(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	//HAL_Delay(NUMBER_NOD*2000);
#ifdef Debug
	printf(" outTxMessage.\n");
 800149e:	4847      	ldr	r0, [pc, #284]	; (80015bc <outTxMessage+0x124>)
 80014a0:	f005 fc6e 	bl	8006d80 <puts>
#endif
	switch(txStatus){
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <outTxMessage+0x128>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d006      	beq.n	80014ba <outTxMessage+0x22>
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	dc70      	bgt.n	8001592 <outTxMessage+0xfa>
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d028      	beq.n	8001506 <outTxMessage+0x6e>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d007      	beq.n	80014c8 <outTxMessage+0x30>
 80014b8:	e06b      	b.n	8001592 <outTxMessage+0xfa>
	case txNoTx:
	#ifdef Debug
		printf("ERROR outTxMessage.\n");
 80014ba:	4842      	ldr	r0, [pc, #264]	; (80015c4 <outTxMessage+0x12c>)
 80014bc:	f005 fc60 	bl	8006d80 <puts>
	#endif
		errorHandleError = waitForev;
 80014c0:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <outTxMessage+0x130>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	601a      	str	r2, [r3, #0]
		break;
 80014c6:	e06b      	b.n	80015a0 <outTxMessage+0x108>
	case txTest:
		if(flagButtonTest == RESET){
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <outTxMessage+0x134>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <outTxMessage+0x44>
			#ifdef Debug
				printf("ERROR outTxMessage.\n");
 80014d0:	483c      	ldr	r0, [pc, #240]	; (80015c4 <outTxMessage+0x12c>)
 80014d2:	f005 fc55 	bl	8006d80 <puts>
			#endif
				errorHandleError = waitForev;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <outTxMessage+0x130>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
		}
		e32PinSetup(wakeUpMode);
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff facf 	bl	8000a80 <e32PinSetup>
		HAL_Delay(10);
 80014e2:	200a      	movs	r0, #10
 80014e4:	f001 f844 	bl	8002570 <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart1, &txByteTest, sizeof(txByteTest));
 80014e8:	2206      	movs	r2, #6
 80014ea:	4939      	ldr	r1, [pc, #228]	; (80015d0 <outTxMessage+0x138>)
 80014ec:	4839      	ldr	r0, [pc, #228]	; (80015d4 <outTxMessage+0x13c>)
 80014ee:	f004 fbbf 	bl	8005c70 <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 80014f2:	2064      	movs	r0, #100	; 0x64
 80014f4:	f001 f83c 	bl	8002570 <HAL_Delay>
		bufferDisplay.timeTxWake = (TIME_TX_DEMOLITION_WEAKE)+((TIME_TX_TEST_1_WEAKE)*(NUMBER_EXPLODER));
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <outTxMessage+0x140>)
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	77da      	strb	r2, [r3, #31]
		txStatus = txNoTx;
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <outTxMessage+0x128>)
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
		break;
 8001504:	e04c      	b.n	80015a0 <outTxMessage+0x108>
	case txDemolition:
		if(flagButtonDemolition == RESET){
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <outTxMessage+0x144>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <outTxMessage+0x82>
			#ifdef Debug
				printf("ERROR outTxMessage.\n");
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <outTxMessage+0x12c>)
 8001510:	f005 fc36 	bl	8006d80 <puts>
			#endif
				errorHandleError = waitForev;
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <outTxMessage+0x130>)
 8001516:	2207      	movs	r2, #7
 8001518:	601a      	str	r2, [r3, #0]
		}

		if(bufferDisplay.bfArm == 0){
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <outTxMessage+0x140>)
 800151c:	7f1b      	ldrb	r3, [r3, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d048      	beq.n	80015b4 <outTxMessage+0x11c>
			return;
		}

		e32PinSetup(wakeUpMode);
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff faac 	bl	8000a80 <e32PinSetup>
		HAL_Delay(10);
 8001528:	200a      	movs	r0, #10
 800152a:	f001 f821 	bl	8002570 <HAL_Delay>
		txByteDemolition[ADRES_NUMBER_BYTE_DEMOLITION_ON_EXPLODER]=0;
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <outTxMessage+0x148>)
 8001530:	2200      	movs	r2, #0
 8001532:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i< NUMBER_EXPLODER; i++ ){
 8001534:	2300      	movs	r3, #0
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	e019      	b.n	800156e <outTxMessage+0xd6>
			int8_t x= 1;
 800153a:	2301      	movs	r3, #1
 800153c:	71bb      	strb	r3, [r7, #6]
			if (bufferDisplay.bfDetonator[i]==1){
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <outTxMessage+0x140>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d10f      	bne.n	8001568 <outTxMessage+0xd0>
				x = x<<(i+1);
 8001548:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	71bb      	strb	r3, [r7, #6]
				txByteDemolition[ADRES_NUMBER_BYTE_DEMOLITION_ON_EXPLODER] = txByteDemolition[ADRES_NUMBER_BYTE_DEMOLITION_ON_EXPLODER] | x;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <outTxMessage+0x148>)
 8001558:	791b      	ldrb	r3, [r3, #4]
 800155a:	b25a      	sxtb	r2, r3
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	4313      	orrs	r3, r2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <outTxMessage+0x148>)
 8001566:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i< NUMBER_EXPLODER; i++ ){
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	3301      	adds	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b04      	cmp	r3, #4
 8001572:	d9e2      	bls.n	800153a <outTxMessage+0xa2>
			}
		}
		HAL_UART_Transmit_DMA(&huart1, &txByteDemolition, sizeof(txByteDemolition));
 8001574:	2206      	movs	r2, #6
 8001576:	491a      	ldr	r1, [pc, #104]	; (80015e0 <outTxMessage+0x148>)
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <outTxMessage+0x13c>)
 800157a:	f004 fb79 	bl	8005c70 <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 800157e:	2064      	movs	r0, #100	; 0x64
 8001580:	f000 fff6 	bl	8002570 <HAL_Delay>
		bufferDisplay.timeTxWake = TIME_TX_DEMOLITION_WEAKE;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <outTxMessage+0x140>)
 8001586:	2206      	movs	r2, #6
 8001588:	77da      	strb	r2, [r3, #31]
		txStatus = txNoTx;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <outTxMessage+0x128>)
 800158c:	2202      	movs	r2, #2
 800158e:	701a      	strb	r2, [r3, #0]
		break;
 8001590:	e006      	b.n	80015a0 <outTxMessage+0x108>
	default:
		errorHandleError = waitForev;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <outTxMessage+0x130>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
	#ifdef Debug
		printf("ERROR outTxMessage.\n");
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <outTxMessage+0x12c>)
 800159a:	f005 fbf1 	bl	8006d80 <puts>
	#endif
		break;
 800159e:	bf00      	nop
	}

	outDispl = outDisplayWakeTx;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <outTxMessage+0x14c>)
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <outTxMessage+0x150>)
 80015a4:	601a      	str	r2, [r3, #0]
	errorHandleError = waitTx;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <outTxMessage+0x130>)
 80015a8:	2209      	movs	r2, #9
 80015aa:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 ffdf 	bl	8002570 <HAL_Delay>
 80015b2:	e000      	b.n	80015b6 <outTxMessage+0x11e>
			return;
 80015b4:	bf00      	nop
}
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	08007e44 	.word	0x08007e44
 80015c0:	20000017 	.word	0x20000017
 80015c4:	08007e54 	.word	0x08007e54
 80015c8:	200005e0 	.word	0x200005e0
 80015cc:	2000062b 	.word	0x2000062b
 80015d0:	080093fc 	.word	0x080093fc
 80015d4:	20000510 	.word	0x20000510
 80015d8:	20000608 	.word	0x20000608
 80015dc:	2000062a 	.word	0x2000062a
 80015e0:	20000010 	.word	0x20000010
 80015e4:	20000640 	.word	0x20000640
 80015e8:	08001105 	.word	0x08001105

080015ec <waitLongTest>:
//============================================================================================================================//
//======================================================waitLongTest====================================================//
//============================================================================================================================//
void waitLongTest(void){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

#ifdef Debug
	printf("waitLongTest\n");
 80015f0:	4828      	ldr	r0, [pc, #160]	; (8001694 <waitLongTest+0xa8>)
 80015f2:	f005 fbc5 	bl	8006d80 <puts>
	HAL_TIM_Base_Stop_IT(&htim2);
	*/



	if (countButtonDemolitionClock<6){//<TIME_TX_DEMOLITION_WEAKE
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <waitLongTest+0xac>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d813      	bhi.n	8001626 <waitLongTest+0x3a>
	HAL_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 ffb6 	bl	8002570 <HAL_Delay>
	HAL_Delay(1000);
 8001604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001608:	f000 ffb2 	bl	8002570 <HAL_Delay>
	bufferDisplay.timeTxWake--;
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <waitLongTest+0xb0>)
 800160e:	7fdb      	ldrb	r3, [r3, #31]
 8001610:	3b01      	subs	r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <waitLongTest+0xb0>)
 8001616:	77da      	strb	r2, [r3, #31]
	countButtonDemolitionClock++;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <waitLongTest+0xac>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <waitLongTest+0xac>)
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e026      	b.n	8001674 <waitLongTest+0x88>
	} else{
		e32PinSetup(normalMode);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fa2a 	bl	8000a80 <e32PinSetup>
		HAL_TIM_Base_Start_IT(&htim2);
 800162c:	481c      	ldr	r0, [pc, #112]	; (80016a0 <waitLongTest+0xb4>)
 800162e:	f003 fef3 	bl	8005418 <HAL_TIM_Base_Start_IT>
		HAL_SuspendTick();
 8001632:	f000 ffc1 	bl	80025b8 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001636:	2101      	movs	r1, #1
 8001638:	2001      	movs	r0, #1
 800163a:	f003 f989 	bl	8004950 <HAL_PWR_EnterSLEEPMode>
		//HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
		HAL_ResumeTick();
 800163e:	f000 ffc9 	bl	80025d4 <HAL_ResumeTick>
#ifdef Debug
	printf("HAL_PWR_EnterSLEEPMode\n");
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <waitLongTest+0xb8>)
 8001644:	f005 fb9c 	bl	8006d80 <puts>
#endif
		if(flagPeriodic2 == SET){
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <waitLongTest+0xbc>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d111      	bne.n	8001674 <waitLongTest+0x88>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <waitLongTest+0xb4>)
 8001652:	f003 ff33 	bl	80054bc <HAL_TIM_Base_Stop_IT>
			bufferDisplay.timeTxWake--;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <waitLongTest+0xb0>)
 8001658:	7fdb      	ldrb	r3, [r3, #31]
 800165a:	3b01      	subs	r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <waitLongTest+0xb0>)
 8001660:	77da      	strb	r2, [r3, #31]
			countButtonDemolitionClock++;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <waitLongTest+0xac>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <waitLongTest+0xac>)
 800166c:	701a      	strb	r2, [r3, #0]
			flagPeriodic2 = RESET;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <waitLongTest+0xbc>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		}
	}

	//Ко�?тыли
	if (bufferDisplay.timeTxWake < 1){
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <waitLongTest+0xb0>)
 8001676:	7fdb      	ldrb	r3, [r3, #31]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <waitLongTest+0xa2>
		e32PinSetup(sleepMode);
 800167c:	2003      	movs	r0, #3
 800167e:	f7ff f9ff 	bl	8000a80 <e32PinSetup>
		nextState = wait;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <waitLongTest+0xc0>)
 8001684:	220b      	movs	r2, #11
 8001686:	701a      	strb	r2, [r3, #0]
		outDispl = outDisplayUser;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <waitLongTest+0xc4>)
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <waitLongTest+0xc8>)
 800168c:	601a      	str	r2, [r3, #0]
	}
	//uint8_t numberRxExploderOnDetonator[NUMBER_EXPLODER];
	//uint8_t numberRxExploderVolt[NUMBER_EXPLODER];
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08007e68 	.word	0x08007e68
 8001698:	2000062d 	.word	0x2000062d
 800169c:	20000608 	.word	0x20000608
 80016a0:	200004c8 	.word	0x200004c8
 80016a4:	08007e78 	.word	0x08007e78
 80016a8:	20000631 	.word	0x20000631
 80016ac:	20000628 	.word	0x20000628
 80016b0:	20000640 	.word	0x20000640
 80016b4:	08000ee9 	.word	0x08000ee9

080016b8 <handlerRxMessage>:
//============================================================================================================================//
//=================================================HAL_UART_RxCpltCallback====================================================//
//============================================================================================================================//
uint32_t handlerRxMessage(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	return chekRxMessage(rxByteTest, rxByteLog, ADRES_NUMBER_BYTE_EXPLODER);
 80016bc:	2203      	movs	r2, #3
 80016be:	4903      	ldr	r1, [pc, #12]	; (80016cc <handlerRxMessage+0x14>)
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <handlerRxMessage+0x18>)
 80016c2:	f7ff fa77 	bl	8000bb4 <chekRxMessage>
 80016c6:	4603      	mov	r3, r0

	HAL_Delay(1);
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800940c 	.word	0x0800940c
 80016d0:	08009404 	.word	0x08009404

080016d4 <HAL_UARTEx_RxEventCallback>:
//============================================================================================================================//
//=================================================HAL_UART_RxCpltCallback====================================================//
//============================================================================================================================//
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]

	#ifdef Debug
		printf("HAL_UARTEx_RxEventCallback.\n");
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <HAL_UARTEx_RxEventCallback+0x50>)
 80016e2:	f005 fb4d 	bl	8006d80 <puts>
	#endif

	if(huart->Instance == USART1){
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_UARTEx_RxEventCallback+0x54>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d115      	bne.n	800171c <HAL_UARTEx_RxEventCallback+0x48>
		flagInterrupt = SET;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_UARTEx_RxEventCallback+0x58>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
		nextState = rxMessage;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_UARTEx_RxEventCallback+0x5c>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveBuffer, rxByteSize);
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_UARTEx_RxEventCallback+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <HAL_UARTEx_RxEventCallback+0x64>)
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <HAL_UARTEx_RxEventCallback+0x68>)
 8001708:	f004 fb22 	bl	8005d50 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_UARTEx_RxEventCallback+0x6c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]

	}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08007e90 	.word	0x08007e90
 8001728:	40013800 	.word	0x40013800
 800172c:	20000629 	.word	0x20000629
 8001730:	20000628 	.word	0x20000628
 8001734:	20000016 	.word	0x20000016
 8001738:	200005e4 	.word	0x200005e4
 800173c:	20000510 	.word	0x20000510
 8001740:	20000558 	.word	0x20000558

08001744 <HAL_GPIO_EXTI_Callback>:
//=============================================================================================================================//
//=================================================HAL_GPIO_EXTI_Callback======================================================//
//=============================================================================================================================//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	for(uint32_t i = 0; i<1; i++){
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e002      	b.n	800175a <HAL_GPIO_EXTI_Callback+0x16>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f9      	beq.n	8001754 <HAL_GPIO_EXTI_Callback+0x10>

	}

		#ifdef Debug
			printf("HAL_GPIO_EXTI_Callback.\n");
 8001760:	482c      	ldr	r0, [pc, #176]	; (8001814 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001762:	f005 fb0d 	bl	8006d80 <puts>
		#endif
			nextState = buttonMenu;
			flagInterrupt = SET;
		}
		*/
		if((GPIO_Pin == PIN_BUTTON_10_Pin) ||(GPIO_Pin == PIN_BUTTON_11_Pin)|| (GPIO_Pin == PIN_BUTTON_12_Pin)|| (GPIO_Pin == PIN_BUTTON_13_Pin)|| (GPIO_Pin == PIN_BUTTON_14_Pin) || (GPIO_Pin == PIN_BUTTON_ARM_Pin)){
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_EXTI_Callback+0x52>
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001774:	d00f      	beq.n	8001796 <HAL_GPIO_EXTI_Callback+0x52>
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177c:	d00b      	beq.n	8001796 <HAL_GPIO_EXTI_Callback+0x52>
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_EXTI_Callback+0x52>
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_EXTI_Callback+0x52>
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001794:	d108      	bne.n	80017a8 <HAL_GPIO_EXTI_Callback+0x64>
		#ifdef Debug
			printf("GPIO_Pin == PIN_BUTTON_DETONATOR.\n");
 8001796:	4820      	ldr	r0, [pc, #128]	; (8001818 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001798:	f005 faf2 	bl	8006d80 <puts>
		#endif
			nextState = buttonDetonator;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_GPIO_EXTI_Callback+0xd8>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
			flagInterrupt = SET;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_GPIO_EXTI_Callback+0xdc>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
		}

		if(GPIO_Pin == PIN_BUTTON_DEMOLITION_Pin){
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ae:	d114      	bne.n	80017da <HAL_GPIO_EXTI_Callback+0x96>
		#ifdef Debug
			printf("GPIO_Pin == PIN_BUTTON_DETONATOR.\n");
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <HAL_GPIO_EXTI_Callback+0xd4>)
 80017b2:	f005 fae5 	bl	8006d80 <puts>
		#endif
			nextState = buttonDemolition;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_GPIO_EXTI_Callback+0xd8>)
 80017b8:	2205      	movs	r2, #5
 80017ba:	701a      	strb	r2, [r3, #0]
			flagInterrupt = SET;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_GPIO_EXTI_Callback+0xdc>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
			flagButtonDemolition = SET;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
			flagButtonDemolitionUpdateDisplay = SET;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
			countButtonDemolitionClock = 0;
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_GPIO_EXTI_Callback+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]

			txStatus = txDemolition;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_GPIO_EXTI_Callback+0xec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
		}

		if(GPIO_Pin == PIN_BUTTON_TEST_Pin){
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e0:	d114      	bne.n	800180c <HAL_GPIO_EXTI_Callback+0xc8>
		//if(GPIO_Pin == PIN_BUTTON_DEMOLITION_Pin){
		#ifdef Debug
			printf("GPIO_Pin == PIN_BUTTON_TEST.\n");
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <HAL_GPIO_EXTI_Callback+0xf0>)
 80017e4:	f005 facc 	bl	8006d80 <puts>
		#endif
			nextState = buttonTest;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_GPIO_EXTI_Callback+0xd8>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	701a      	strb	r2, [r3, #0]
			flagInterrupt = SET;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_GPIO_EXTI_Callback+0xdc>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
			flagButtonTest = SET;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_GPIO_EXTI_Callback+0xf4>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
			txStatus = txTest;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_GPIO_EXTI_Callback+0xec>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
			flagButtonTestUpdateDisplay = SET;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
			countButtonTestClock = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

		}

}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	08007eac 	.word	0x08007eac
 8001818:	08007ec4 	.word	0x08007ec4
 800181c:	20000628 	.word	0x20000628
 8001820:	20000629 	.word	0x20000629
 8001824:	2000062a 	.word	0x2000062a
 8001828:	2000062c 	.word	0x2000062c
 800182c:	2000062d 	.word	0x2000062d
 8001830:	20000017 	.word	0x20000017
 8001834:	08007ee8 	.word	0x08007ee8
 8001838:	2000062b 	.word	0x2000062b
 800183c:	2000062e 	.word	0x2000062e
 8001840:	2000062f 	.word	0x2000062f

08001844 <HAL_ADC_ConvCpltCallback>:
//=============================================================================================================================//
//=================================================HAL_ADC_ConvCpltCallback======================================================//
//=============================================================================================================================//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <HAL_ADC_ConvCpltCallback+0x34>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10c      	bne.n	8001870 <HAL_ADC_ConvCpltCallback+0x2c>
    {
        HAL_ADC_Stop_DMA(&hadc1); // это необязательно
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_ADC_ConvCpltCallback+0x38>)
 8001858:	f001 f880 	bl	800295c <HAL_ADC_Stop_DMA>
        adcVoltage[0] = adcData[0]/88;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_ADC_ConvCpltCallback+0x3c>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_ADC_ConvCpltCallback+0x40>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_ADC_ConvCpltCallback+0x44>)
 800186e:	601a      	str	r2, [r3, #0]
        //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 2);
    }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40012400 	.word	0x40012400
 800187c:	200003b8 	.word	0x200003b8
 8001880:	200005f8 	.word	0x200005f8
 8001884:	ba2e8ba3 	.word	0xba2e8ba3
 8001888:	200005fc 	.word	0x200005fc

0800188c <HAL_TIM_PeriodElapsedCallback>:
//=============================================================================================================================//
//===========================================HAL_TIM_PeriodElapsedCallback=====================================================//
//=============================================================================================================================//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10d      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x2e>
		/*if (nextState == wait) {
#ifdef Debug
	printf("HAL_TIM_PeriodElapsedCallback, nextState == wait \n");
#endif
*/
		flagInterrupt = SET;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
		flagPeriodic1 = SET;
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018b0:	f002 fa4b 	bl	8003d4a <HAL_GPIO_TogglePin>
		nextState = waitForev;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018b6:	2207      	movs	r2, #7
 80018b8:	701a      	strb	r2, [r3, #0]
		}



	if(htim->Instance == TIM2){
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c2:	d112      	bne.n	80018ea <HAL_TIM_PeriodElapsedCallback+0x5e>
#ifdef Debug
	printf("HAL_TIM_PeriodElapsedCallback2 \n");
 80018c4:	4810      	ldr	r0, [pc, #64]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018c6:	f005 fa5b 	bl	8006d80 <puts>
#endif
		flagInterrupt = SET;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
		flagPeriodic2 =SET;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		nextState = waitTx;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018d8:	2209      	movs	r2, #9
 80018da:	701a      	strb	r2, [r3, #0]
		if (bufferDisplay.timeTxWake<1){
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80018de:	7fdb      	ldrb	r3, [r3, #31]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <HAL_TIM_PeriodElapsedCallback+0x5e>
		nextState = wait;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018e6:	220b      	movs	r2, #11
 80018e8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	20000629 	.word	0x20000629
 80018fc:	20000630 	.word	0x20000630
 8001900:	40011000 	.word	0x40011000
 8001904:	20000628 	.word	0x20000628
 8001908:	08007f08 	.word	0x08007f08
 800190c:	20000631 	.word	0x20000631
 8001910:	20000608 	.word	0x20000608

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001926:	f000 fa27 	bl	8001d78 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800192a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800192e:	2201      	movs	r2, #1
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	485b      	ldr	r0, [pc, #364]	; (8001aa0 <SSD1306_Init+0x180>)
 8001934:	f002 fc7c 	bl	8004230 <HAL_I2C_IsDeviceReady>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800193e:	2300      	movs	r3, #0
 8001940:	e0a9      	b.n	8001a96 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001942:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001946:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001948:	e002      	b.n	8001950 <SSD1306_Init+0x30>
		p--;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3b01      	subs	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f9      	bne.n	800194a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001956:	22ae      	movs	r2, #174	; 0xae
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 fa86 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001960:	2220      	movs	r2, #32
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	; 0x78
 8001966:	f000 fa81 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800196a:	2210      	movs	r2, #16
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f000 fa7c 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001974:	22b0      	movs	r2, #176	; 0xb0
 8001976:	2100      	movs	r1, #0
 8001978:	2078      	movs	r0, #120	; 0x78
 800197a:	f000 fa77 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800197e:	22c8      	movs	r2, #200	; 0xc8
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	; 0x78
 8001984:	f000 fa72 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	; 0x78
 800198e:	f000 fa6d 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001992:	2210      	movs	r2, #16
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	; 0x78
 8001998:	f000 fa68 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	2100      	movs	r1, #0
 80019a0:	2078      	movs	r0, #120	; 0x78
 80019a2:	f000 fa63 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80019a6:	2281      	movs	r2, #129	; 0x81
 80019a8:	2100      	movs	r1, #0
 80019aa:	2078      	movs	r0, #120	; 0x78
 80019ac:	f000 fa5e 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	2100      	movs	r1, #0
 80019b4:	2078      	movs	r0, #120	; 0x78
 80019b6:	f000 fa59 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019ba:	22a1      	movs	r2, #161	; 0xa1
 80019bc:	2100      	movs	r1, #0
 80019be:	2078      	movs	r0, #120	; 0x78
 80019c0:	f000 fa54 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019c4:	22a6      	movs	r2, #166	; 0xa6
 80019c6:	2100      	movs	r1, #0
 80019c8:	2078      	movs	r0, #120	; 0x78
 80019ca:	f000 fa4f 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019ce:	22a8      	movs	r2, #168	; 0xa8
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	; 0x78
 80019d4:	f000 fa4a 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019d8:	223f      	movs	r2, #63	; 0x3f
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	; 0x78
 80019de:	f000 fa45 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019e2:	22a4      	movs	r2, #164	; 0xa4
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	; 0x78
 80019e8:	f000 fa40 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019ec:	22d3      	movs	r2, #211	; 0xd3
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	; 0x78
 80019f2:	f000 fa3b 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	; 0x78
 80019fc:	f000 fa36 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a00:	22d5      	movs	r2, #213	; 0xd5
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	; 0x78
 8001a06:	f000 fa31 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a0a:	22f0      	movs	r2, #240	; 0xf0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	; 0x78
 8001a10:	f000 fa2c 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a14:	22d9      	movs	r2, #217	; 0xd9
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	; 0x78
 8001a1a:	f000 fa27 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a1e:	2222      	movs	r2, #34	; 0x22
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	; 0x78
 8001a24:	f000 fa22 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a28:	22da      	movs	r2, #218	; 0xda
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	; 0x78
 8001a2e:	f000 fa1d 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a32:	2212      	movs	r2, #18
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f000 fa18 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a3c:	22db      	movs	r2, #219	; 0xdb
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	; 0x78
 8001a42:	f000 fa13 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a46:	2220      	movs	r2, #32
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	; 0x78
 8001a4c:	f000 fa0e 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a50:	228d      	movs	r2, #141	; 0x8d
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	; 0x78
 8001a56:	f000 fa09 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a5a:	2214      	movs	r2, #20
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	; 0x78
 8001a60:	f000 fa04 	bl	8001e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a64:	22af      	movs	r2, #175	; 0xaf
 8001a66:	2100      	movs	r1, #0
 8001a68:	2078      	movs	r0, #120	; 0x78
 8001a6a:	f000 f9ff 	bl	8001e6c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a6e:	222e      	movs	r2, #46	; 0x2e
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	; 0x78
 8001a74:	f000 f9fa 	bl	8001e6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 f843 	bl	8001b04 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001a7e:	f000 f813 	bl	8001aa8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <SSD1306_Init+0x184>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SSD1306_Init+0x184>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SSD1306_Init+0x184>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000042c 	.word	0x2000042c
 8001aa4:	20000a4c 	.word	0x20000a4c

08001aa8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e01d      	b.n	8001af0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3b50      	subs	r3, #80	; 0x50
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	2078      	movs	r0, #120	; 0x78
 8001ac0:	f000 f9d4 	bl	8001e6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2078      	movs	r0, #120	; 0x78
 8001aca:	f000 f9cf 	bl	8001e6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001ace:	2210      	movs	r2, #16
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2078      	movs	r0, #120	; 0x78
 8001ad4:	f000 f9ca 	bl	8001e6c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	01db      	lsls	r3, r3, #7
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <SSD1306_UpdateScreen+0x58>)
 8001ade:	441a      	add	r2, r3
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	2078      	movs	r0, #120	; 0x78
 8001ae6:	f000 f95b 	bl	8001da0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	3301      	adds	r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d9de      	bls.n	8001ab4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2000064c 	.word	0x2000064c

08001b04 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <SSD1306_Fill+0x14>
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <SSD1306_Fill+0x16>
 8001b18:	23ff      	movs	r3, #255	; 0xff
 8001b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <SSD1306_Fill+0x2c>)
 8001b22:	f005 f89f 	bl	8006c64 <memset>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000064c 	.word	0x2000064c

08001b34 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	70fb      	strb	r3, [r7, #3]
	if (
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	2b7f      	cmp	r3, #127	; 0x7f
 8001b4a:	d848      	bhi.n	8001bde <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b50:	d845      	bhi.n	8001bde <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <SSD1306_DrawPixel+0xb4>)
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11a      	bne.n	8001ba4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	08db      	lsrs	r3, r3, #3
 8001b74:	b298      	uxth	r0, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	01db      	lsls	r3, r3, #7
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <SSD1306_DrawPixel+0xb8>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	b25a      	sxtb	r2, r3
 8001b82:	88bb      	ldrh	r3, [r7, #4]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b259      	sxtb	r1, r3
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	4603      	mov	r3, r0
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2c9      	uxtb	r1, r1
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <SSD1306_DrawPixel+0xb8>)
 8001ba0:	54d1      	strb	r1, [r2, r3]
 8001ba2:	e01d      	b.n	8001be0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	b298      	uxth	r0, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	01db      	lsls	r3, r3, #7
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <SSD1306_DrawPixel+0xb8>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	4013      	ands	r3, r2
 8001bcc:	b259      	sxtb	r1, r3
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b2c9      	uxtb	r1, r1
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <SSD1306_DrawPixel+0xb8>)
 8001bda:	54d1      	strb	r1, [r2, r3]
 8001bdc:	e000      	b.n	8001be0 <SSD1306_DrawPixel+0xac>
		return;
 8001bde:	bf00      	nop
	}
}
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000a4c 	.word	0x20000a4c
 8001bec:	2000064c 	.word	0x2000064c

08001bf0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460a      	mov	r2, r1
 8001bfa:	80fb      	strh	r3, [r7, #6]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SSD1306_GotoXY+0x28>)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <SSD1306_GotoXY+0x28>)
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	8053      	strh	r3, [r2, #2]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000a4c 	.word	0x20000a4c

08001c1c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
	if (
 8001c38:	2b7f      	cmp	r3, #127	; 0x7f
 8001c3a:	dc07      	bgt.n	8001c4c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001c3e:	885b      	ldrh	r3, [r3, #2]
 8001c40:	461a      	mov	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dd01      	ble.n	8001c50 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e05e      	b.n	8001d0e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e04b      	b.n	8001cee <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	3b20      	subs	r3, #32
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	7849      	ldrb	r1, [r1, #1]
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	440b      	add	r3, r1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	e030      	b.n	8001cdc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b298      	uxth	r0, r3
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001c98:	885a      	ldrh	r2, [r3, #2]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	79ba      	ldrb	r2, [r7, #6]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7ff ff45 	bl	8001b34 <SSD1306_DrawPixel>
 8001caa:	e014      	b.n	8001cd6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b298      	uxth	r0, r3
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001cba:	885a      	ldrh	r2, [r3, #2]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f7ff ff2f 	bl	8001b34 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d3c8      	bcc.n	8001c7a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d3ad      	bcc.n	8001c56 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <SSD1306_Putc+0xfc>)
 8001d0a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000a4c 	.word	0x20000a4c

08001d1c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	4613      	mov	r3, r2
 8001d28:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d2a:	e012      	b.n	8001d52 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff71 	bl	8001c1c <SSD1306_Putc>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d002      	beq.n	8001d4c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	e008      	b.n	8001d5e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e8      	bne.n	8001d2c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff feca 	bl	8001b04 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d70:	f7ff fe9a 	bl	8001aa8 <SSD1306_UpdateScreen>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <ssd1306_I2C_Init+0x24>)
 8001d80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d82:	e002      	b.n	8001d8a <ssd1306_I2C_Init+0x12>
		p--;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	0003d090 	.word	0x0003d090

08001da0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b0c7      	sub	sp, #284	; 0x11c
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	4604      	mov	r4, r0
 8001da8:	4608      	mov	r0, r1
 8001daa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001dae:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001db2:	600a      	str	r2, [r1, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dc6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001dca:	4602      	mov	r2, r0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001de2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001de6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001df4:	e015      	b.n	8001e22 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001df6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dfe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	441a      	add	r2, r3
 8001e06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	7811      	ldrb	r1, [r2, #0]
 8001e0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e12:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001e16:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e2c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001e30:	8812      	ldrh	r2, [r2, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d8df      	bhi.n	8001df6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e3a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b299      	uxth	r1, r3
 8001e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	200a      	movs	r0, #10
 8001e56:	9000      	str	r0, [sp, #0]
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e5a:	f002 f8eb 	bl	8004034 <HAL_I2C_Master_Transmit>
}
 8001e5e:	bf00      	nop
 8001e60:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	2000042c 	.word	0x2000042c

08001e6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	460b      	mov	r3, r1
 8001e78:	71bb      	strb	r3, [r7, #6]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e82:	797b      	ldrb	r3, [r7, #5]
 8001e84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	f107 020c 	add.w	r2, r7, #12
 8001e8e:	230a      	movs	r3, #10
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2302      	movs	r3, #2
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <ssd1306_I2C_Write+0x38>)
 8001e96:	f002 f8cd 	bl	8004034 <HAL_I2C_Master_Transmit>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000042c 	.word	0x2000042c

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_MspInit+0x5c>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <HAL_MspInit+0x5c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_MspInit+0x5c>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_MspInit+0x5c>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_MspInit+0x5c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_MspInit+0x5c>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_MspInit+0x60>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_MspInit+0x60>)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000

08001f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a28      	ldr	r2, [pc, #160]	; (8001fc8 <HAL_ADC_MspInit+0xbc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d149      	bne.n	8001fc0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_ADC_MspInit+0xc0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <HAL_ADC_MspInit+0xc0>)
 8001f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_ADC_MspInit+0xc0>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_ADC_MspInit+0xc0>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_ADC_MspInit+0xc0>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_ADC_MspInit+0xc0>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <HAL_ADC_MspInit+0xc4>)
 8001f6c:	f001 fd3a 	bl	80039e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_ADC_MspInit+0xcc>)
 8001f74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001fa6:	f001 f871 	bl	800308c <HAL_DMA_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001fb0:	f7ff fcb0 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001fb8:	621a      	str	r2, [r3, #32]
 8001fba:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_ADC_MspInit+0xc8>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	200003e8 	.word	0x200003e8
 8001fd8:	40020008 	.word	0x40020008

08001fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_I2C_MspInit+0x70>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d123      	bne.n	8002044 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_I2C_MspInit+0x74>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_I2C_MspInit+0x74>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_I2C_MspInit+0x74>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002018:	2312      	movs	r3, #18
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4619      	mov	r1, r3
 8002026:	480b      	ldr	r0, [pc, #44]	; (8002054 <HAL_I2C_MspInit+0x78>)
 8002028:	f001 fcdc 	bl	80039e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_I2C_MspInit+0x74>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_I2C_MspInit+0x74>)
 8002032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002036:	61d3      	str	r3, [r2, #28]
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_I2C_MspInit+0x74>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002044:	bf00      	nop
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40005400 	.word	0x40005400
 8002050:	40021000 	.word	0x40021000
 8002054:	40010c00 	.word	0x40010c00

08002058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d114      	bne.n	8002094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 8002070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2019      	movs	r0, #25
 8002088:	f000 ffbb 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800208c:	2019      	movs	r0, #25
 800208e:	f000 ffd4 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002092:	e018      	b.n	80020c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d113      	bne.n	80020c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	201c      	movs	r0, #28
 80020bc:	f000 ffa1 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020c0:	201c      	movs	r0, #28
 80020c2:	f000 ffba 	bl	800303a <HAL_NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_UART_MspInit+0x138>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f040 8086 	bne.w	8002206 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_UART_MspInit+0x13c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a45      	ldr	r2, [pc, #276]	; (8002214 <HAL_UART_MspInit+0x13c>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_UART_MspInit+0x13c>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_UART_MspInit+0x13c>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_UART_MspInit+0x13c>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6193      	str	r3, [r2, #24]
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_UART_MspInit+0x13c>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PIN_TX_Pin;
 800212a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_TX_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4619      	mov	r1, r3
 800213e:	4836      	ldr	r0, [pc, #216]	; (8002218 <HAL_UART_MspInit+0x140>)
 8002140:	f001 fc50 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_RX_Pin;
 8002144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(PIN_RX_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	4619      	mov	r1, r3
 8002158:	482f      	ldr	r0, [pc, #188]	; (8002218 <HAL_UART_MspInit+0x140>)
 800215a:	f001 fc43 	bl	80039e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_UART_MspInit+0x144>)
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <HAL_UART_MspInit+0x148>)
 8002162:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_UART_MspInit+0x144>)
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216a:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_UART_MspInit+0x144>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_UART_MspInit+0x144>)
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_UART_MspInit+0x144>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_UART_MspInit+0x144>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_UART_MspInit+0x144>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_UART_MspInit+0x144>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800218e:	4823      	ldr	r0, [pc, #140]	; (800221c <HAL_UART_MspInit+0x144>)
 8002190:	f000 ff7c 	bl	800308c <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800219a:	f7ff fbbb 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1e      	ldr	r2, [pc, #120]	; (800221c <HAL_UART_MspInit+0x144>)
 80021a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_UART_MspInit+0x144>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_UART_MspInit+0x150>)
 80021ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021b2:	2210      	movs	r2, #16
 80021b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021da:	4812      	ldr	r0, [pc, #72]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021dc:	f000 ff56 	bl	800308c <HAL_DMA_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80021e6:	f7ff fb95 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_UART_MspInit+0x14c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2025      	movs	r0, #37	; 0x25
 80021fc:	f000 ff01 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002200:	2025      	movs	r0, #37	; 0x25
 8002202:	f000 ff1a 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40013800 	.word	0x40013800
 8002214:	40021000 	.word	0x40021000
 8002218:	40010800 	.word	0x40010800
 800221c:	20000558 	.word	0x20000558
 8002220:	40020058 	.word	0x40020058
 8002224:	2000059c 	.word	0x2000059c
 8002228:	40020044 	.word	0x40020044

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002272:	f000 f961 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <DMA1_Channel1_IRQHandler+0x10>)
 8002282:	f001 f871 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200003e8 	.word	0x200003e8

08002290 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <DMA1_Channel4_IRQHandler+0x10>)
 8002296:	f001 f867 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000059c 	.word	0x2000059c

080022a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Channel5_IRQHandler+0x10>)
 80022aa:	f001 f85d 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000558 	.word	0x20000558

080022b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_AUX_Pin);
 80022bc:	2080      	movs	r0, #128	; 0x80
 80022be:	f001 fd5d 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_ARM_Pin);
 80022c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022c6:	f001 fd59 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_TEST_Pin);
 80022ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ce:	f001 fd55 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <TIM1_UP_IRQHandler+0x10>)
 80022de:	f003 f91b 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000480 	.word	0x20000480

080022ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <TIM2_IRQHandler+0x10>)
 80022f2:	f003 f911 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200004c8 	.word	0x200004c8

08002300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART1_IRQHandler+0x10>)
 8002306:	f003 fd81 	bl	8005e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000510 	.word	0x20000510

08002314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_10_Pin);
 8002318:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800231c:	f001 fd2e 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_11_Pin);
 8002320:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002324:	f001 fd2a 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_12_Pin);
 8002328:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800232c:	f001 fd26 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_13_Pin);
 8002330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002334:	f001 fd22 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_14_Pin);
 8002338:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800233c:	f001 fd1e 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_DEMOLITION_Pin);
 8002340:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002344:	f001 fd1a 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
  }

  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ac:	605a      	str	r2, [r3, #4]
  return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_isatty>:

int _isatty(int file)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f004 fbfa 	bl	8006c10 <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20005000 	.word	0x20005000
 8002448:	00000400 	.word	0x00000400
 800244c:	20000a54 	.word	0x20000a54
 8002450:	20000a90 	.word	0x20000a90

08002454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002460:	f7ff fff8 	bl	8002454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002466:	490c      	ldr	r1, [pc, #48]	; (8002498 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <LoopFillZerobss+0x16>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800247c:	4c09      	ldr	r4, [pc, #36]	; (80024a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248a:	f004 fbc7 	bl	8006c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248e:	f7fd ffc3 	bl	8000418 <main>
  bx lr
 8002492:	4770      	bx	lr
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 800249c:	080094e0 	.word	0x080094e0
  ldr r2, =_sbss
 80024a0:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 80024a4:	20000a90 	.word	0x20000a90

080024a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x28>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x28>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 fd95 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	200f      	movs	r0, #15
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fcee 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdbb 	bl	8003072 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 fd75 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000318 	.word	0x20000318
 8002530:	20000320 	.word	0x20000320
 8002534:	2000031c 	.word	0x2000031c

08002538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_IncTick+0x1c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_IncTick+0x20>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_IncTick+0x20>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000320 	.word	0x20000320
 8002558:	20000a58 	.word	0x20000a58

0800255c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_GetTick+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000a58 	.word	0x20000a58

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fff0 	bl	800255c <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_Delay+0x44>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffe0 	bl	800255c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000320 	.word	0x20000320

080025b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <HAL_SuspendTick+0x18>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_SuspendTick+0x18>)
 80025c2:	f023 0302 	bic.w	r3, r3, #2
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_ResumeTick+0x18>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a03      	ldr	r2, [pc, #12]	; (80025ec <HAL_ResumeTick+0x18>)
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0be      	b.n	8002790 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fc6c 	bl	8001f0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fb41 	bl	8002cbc <ADC_ConversionStop_Disable>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 8099 	bne.w	800277e <HAL_ADC_Init+0x18e>
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8095 	bne.w	800277e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800265c:	f023 0302 	bic.w	r3, r3, #2
 8002660:	f043 0202 	orr.w	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002670:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7b1b      	ldrb	r3, [r3, #12]
 8002676:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002678:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4313      	orrs	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002688:	d003      	beq.n	8002692 <HAL_ADC_Init+0xa2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_ADC_Init+0xa8>
 8002692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002696:	e000      	b.n	800269a <HAL_ADC_Init+0xaa>
 8002698:	2300      	movs	r3, #0
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7d1b      	ldrb	r3, [r3, #20]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d119      	bne.n	80026dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7b1b      	ldrb	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	035a      	lsls	r2, r3, #13
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	e00b      	b.n	80026dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	4b28      	ldr	r3, [pc, #160]	; (8002798 <HAL_ADC_Init+0x1a8>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	430b      	orrs	r3, r1
 8002702:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270c:	d003      	beq.n	8002716 <HAL_ADC_Init+0x126>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d104      	bne.n	8002720 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	3b01      	subs	r3, #1
 800271c:	051b      	lsls	r3, r3, #20
 800271e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	430a      	orrs	r2, r1
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_ADC_Init+0x1ac>)
 800273c:	4013      	ands	r3, r2
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	d10b      	bne.n	800275c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	f043 0201 	orr.w	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800275a:	e018      	b.n	800278e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f023 0312 	bic.w	r3, r3, #18
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800277c:	e007      	b.n	800278e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	ffe1f7fd 	.word	0xffe1f7fd
 800279c:	ff1f0efe 	.word	0xff1f0efe

080027a0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a64      	ldr	r2, [pc, #400]	; (8002948 <HAL_ADC_Start_DMA+0x1a8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_ADC_Start_DMA+0x24>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a63      	ldr	r2, [pc, #396]	; (800294c <HAL_ADC_Start_DMA+0x1ac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x32>
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <HAL_ADC_Start_DMA+0x1a8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 80b3 	bne.w	8002938 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_Start_DMA+0x40>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0ae      	b.n	800293e <HAL_ADC_Start_DMA+0x19e>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fa0d 	bl	8002c08 <ADC_Enable>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 809a 	bne.w	800292e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_ADC_Start_DMA+0x1ac>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d105      	bne.n	8002824 <HAL_ADC_Start_DMA+0x84>
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_ADC_Start_DMA+0x1a8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d115      	bne.n	8002850 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d026      	beq.n	800288c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800284e:	e01d      	b.n	800288c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_ADC_Start_DMA+0x1a8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_ADC_Start_DMA+0xd0>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a38      	ldr	r2, [pc, #224]	; (800294c <HAL_ADC_Start_DMA+0x1ac>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10d      	bne.n	800288c <HAL_ADC_Start_DMA+0xec>
 8002870:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_ADC_Start_DMA+0x1a8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002884:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f023 0206 	bic.w	r2, r3, #6
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a4:	e002      	b.n	80028ac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_ADC_Start_DMA+0x1b0>)
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_ADC_Start_DMA+0x1b4>)
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_ADC_Start_DMA+0x1b8>)
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0202 	mvn.w	r2, #2
 80028d4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a18      	ldr	r0, [r3, #32]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	334c      	adds	r3, #76	; 0x4c
 80028f0:	4619      	mov	r1, r3
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f000 fc23 	bl	8003140 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002904:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002908:	d108      	bne.n	800291c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002918:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800291a:	e00f      	b.n	800293c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800292a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800292c:	e006      	b.n	800293c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002936:	e001      	b.n	800293c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40012400 	.word	0x40012400
 800294c:	40012800 	.word	0x40012800
 8002950:	08002d3f 	.word	0x08002d3f
 8002954:	08002dbb 	.word	0x08002dbb
 8002958:	08002dd7 	.word	0x08002dd7

0800295c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Stop_DMA+0x1a>
 8002972:	2302      	movs	r3, #2
 8002974:	e03a      	b.n	80029ec <HAL_ADC_Stop_DMA+0x90>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f99c 	bl	8002cbc <ADC_ConversionStop_Disable>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d129      	bne.n	80029e2 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d11a      	bne.n	80029e2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fc25 	bl	8003200 <HAL_DMA_Abort>
 80029b6:	4603      	mov	r3, r0
 80029b8:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
 80029d4:	e005      	b.n	80029e2 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x20>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0dc      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1da>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d81c      	bhi.n	8002a82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b05      	subs	r3, #5
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	4019      	ands	r1, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b05      	subs	r3, #5
 8002a74:	fa00 f203 	lsl.w	r2, r0, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a80:	e03c      	b.n	8002afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d81c      	bhi.n	8002ac4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b23      	subs	r3, #35	; 0x23
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4019      	ands	r1, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b23      	subs	r3, #35	; 0x23
 8002ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac2:	e01b      	b.n	8002afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b41      	subs	r3, #65	; 0x41
 8002ad6:	221f      	movs	r2, #31
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4019      	ands	r1, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b41      	subs	r3, #65	; 0x41
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d91c      	bls.n	8002b3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	3b1e      	subs	r3, #30
 8002b16:	2207      	movs	r2, #7
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4019      	ands	r1, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6898      	ldr	r0, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b1e      	subs	r3, #30
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	e019      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6919      	ldr	r1, [r3, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	2207      	movs	r2, #7
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	4019      	ands	r1, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6898      	ldr	r0, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d003      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b7e:	2b11      	cmp	r3, #17
 8002b80:	d132      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_ADC_ConfigChannel+0x1e4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d125      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d126      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ba8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d11a      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9a      	lsrs	r2, r3, #18
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x1b2>
 8002bd6:	e007      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012400 	.word	0x40012400
 8002c00:	20000318 	.word	0x20000318
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d040      	beq.n	8002ca8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <ADC_Enable+0xac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <ADC_Enable+0xb0>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	0c9b      	lsrs	r3, r3, #18
 8002c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c44:	e002      	b.n	8002c4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f9      	bne.n	8002c46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c52:	f7ff fc83 	bl	800255c <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c58:	e01f      	b.n	8002c9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c5a:	f7ff fc7f 	bl	800255c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d918      	bls.n	8002c9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d011      	beq.n	8002c9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	f043 0210 	orr.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e007      	b.n	8002caa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d1d8      	bne.n	8002c5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000318 	.word	0x20000318
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d12e      	bne.n	8002d34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce6:	f7ff fc39 	bl	800255c <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cec:	e01b      	b.n	8002d26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cee:	f7ff fc35 	bl	800255c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d914      	bls.n	8002d26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d10d      	bne.n	8002d26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e007      	b.n	8002d36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d0dc      	beq.n	8002cee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d127      	bne.n	8002da8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d72:	d115      	bne.n	8002da0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7fe fd4f 	bl	8001844 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002da6:	e004      	b.n	8002db2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fe13 	bl	80029f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff fe02 	bl	8002a06 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <__NVIC_SetPriorityGrouping>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	60d3      	str	r3, [r2, #12]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_GetPriorityGrouping>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <__NVIC_GetPriorityGrouping+0x18>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0307 	and.w	r3, r3, #7
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_EnableIRQ>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0b      	blt.n	8002e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <__NVIC_EnableIRQ+0x34>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_DisableIRQ>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db12      	blt.n	8002ee0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	490a      	ldr	r1, [pc, #40]	; (8002eec <__NVIC_DisableIRQ+0x44>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	3320      	adds	r3, #32
 8002ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed4:	f3bf 8f4f 	dsb	sy
}
 8002ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eda:	f3bf 8f6f 	isb	sy
}
 8002ede:	bf00      	nop
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <SysTick_Config>:
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff90 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff09 	bl	8002e0c <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff1e 	bl	8002e54 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff90 	bl	8002f44 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5f 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff11 	bl	8002e70 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff1f 	bl	8002ea8 <__NVIC_DisableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff94 	bl	8002fa8 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e043      	b.n	800312a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <HAL_DMA_Init+0xa8>)
 80030aa:	4413      	add	r3, r2
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <HAL_DMA_Init+0xac>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	009a      	lsls	r2, r3, #2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_DMA_Init+0xb0>)
 80030be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	bffdfff8 	.word	0xbffdfff8
 8003138:	cccccccd 	.word	0xcccccccd
 800313c:	40020000 	.word	0x40020000

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Start_IT+0x20>
 800315c:	2302      	movs	r3, #2
 800315e:	e04b      	b.n	80031f8 <HAL_DMA_Start_IT+0xb8>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d13a      	bne.n	80031ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f9eb 	bl	8003574 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 020e 	orr.w	r2, r2, #14
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e00f      	b.n	80031d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 020a 	orr.w	r2, r2, #10
 80031d6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e005      	b.n	80031f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d008      	beq.n	800322a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2204      	movs	r2, #4
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e020      	b.n	800326c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 020e 	bic.w	r2, r2, #14
 8003238:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
	...

08003278 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d005      	beq.n	800329c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2204      	movs	r2, #4
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	e051      	b.n	8003340 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 020e 	bic.w	r2, r2, #14
 80032aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <HAL_DMA_Abort_IT+0xd4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d029      	beq.n	800331a <HAL_DMA_Abort_IT+0xa2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a21      	ldr	r2, [pc, #132]	; (8003350 <HAL_DMA_Abort_IT+0xd8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_Abort_IT+0x9e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <HAL_DMA_Abort_IT+0xdc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01a      	beq.n	8003310 <HAL_DMA_Abort_IT+0x98>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <HAL_DMA_Abort_IT+0xe0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d012      	beq.n	800330a <HAL_DMA_Abort_IT+0x92>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_DMA_Abort_IT+0xe4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00a      	beq.n	8003304 <HAL_DMA_Abort_IT+0x8c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <HAL_DMA_Abort_IT+0xe8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <HAL_DMA_Abort_IT+0x86>
 80032f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032fc:	e00e      	b.n	800331c <HAL_DMA_Abort_IT+0xa4>
 80032fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003302:	e00b      	b.n	800331c <HAL_DMA_Abort_IT+0xa4>
 8003304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003308:	e008      	b.n	800331c <HAL_DMA_Abort_IT+0xa4>
 800330a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330e:	e005      	b.n	800331c <HAL_DMA_Abort_IT+0xa4>
 8003310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003314:	e002      	b.n	800331c <HAL_DMA_Abort_IT+0xa4>
 8003316:	2310      	movs	r3, #16
 8003318:	e000      	b.n	800331c <HAL_DMA_Abort_IT+0xa4>
 800331a:	2301      	movs	r3, #1
 800331c:	4a11      	ldr	r2, [pc, #68]	; (8003364 <HAL_DMA_Abort_IT+0xec>)
 800331e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
    } 
  }
  return status;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40020008 	.word	0x40020008
 8003350:	4002001c 	.word	0x4002001c
 8003354:	40020030 	.word	0x40020030
 8003358:	40020044 	.word	0x40020044
 800335c:	40020058 	.word	0x40020058
 8003360:	4002006c 	.word	0x4002006c
 8003364:	40020000 	.word	0x40020000

08003368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2204      	movs	r2, #4
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d04f      	beq.n	8003430 <HAL_DMA_IRQHandler+0xc8>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d04a      	beq.n	8003430 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a66      	ldr	r2, [pc, #408]	; (8003558 <HAL_DMA_IRQHandler+0x1f0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d029      	beq.n	8003416 <HAL_DMA_IRQHandler+0xae>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_DMA_IRQHandler+0x1f4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0xaa>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a63      	ldr	r2, [pc, #396]	; (8003560 <HAL_DMA_IRQHandler+0x1f8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01a      	beq.n	800340c <HAL_DMA_IRQHandler+0xa4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a62      	ldr	r2, [pc, #392]	; (8003564 <HAL_DMA_IRQHandler+0x1fc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d012      	beq.n	8003406 <HAL_DMA_IRQHandler+0x9e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a60      	ldr	r2, [pc, #384]	; (8003568 <HAL_DMA_IRQHandler+0x200>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x98>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5f      	ldr	r2, [pc, #380]	; (800356c <HAL_DMA_IRQHandler+0x204>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d102      	bne.n	80033fa <HAL_DMA_IRQHandler+0x92>
 80033f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033f8:	e00e      	b.n	8003418 <HAL_DMA_IRQHandler+0xb0>
 80033fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033fe:	e00b      	b.n	8003418 <HAL_DMA_IRQHandler+0xb0>
 8003400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003404:	e008      	b.n	8003418 <HAL_DMA_IRQHandler+0xb0>
 8003406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800340a:	e005      	b.n	8003418 <HAL_DMA_IRQHandler+0xb0>
 800340c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003410:	e002      	b.n	8003418 <HAL_DMA_IRQHandler+0xb0>
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	e000      	b.n	8003418 <HAL_DMA_IRQHandler+0xb0>
 8003416:	2304      	movs	r3, #4
 8003418:	4a55      	ldr	r2, [pc, #340]	; (8003570 <HAL_DMA_IRQHandler+0x208>)
 800341a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8094 	beq.w	800354e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800342e:	e08e      	b.n	800354e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2202      	movs	r2, #2
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d056      	beq.n	80034ee <HAL_DMA_IRQHandler+0x186>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d051      	beq.n	80034ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020a 	bic.w	r2, r2, #10
 8003466:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a38      	ldr	r2, [pc, #224]	; (8003558 <HAL_DMA_IRQHandler+0x1f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d029      	beq.n	80034ce <HAL_DMA_IRQHandler+0x166>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a37      	ldr	r2, [pc, #220]	; (800355c <HAL_DMA_IRQHandler+0x1f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_DMA_IRQHandler+0x162>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a35      	ldr	r2, [pc, #212]	; (8003560 <HAL_DMA_IRQHandler+0x1f8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01a      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x15c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a34      	ldr	r2, [pc, #208]	; (8003564 <HAL_DMA_IRQHandler+0x1fc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d012      	beq.n	80034be <HAL_DMA_IRQHandler+0x156>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a32      	ldr	r2, [pc, #200]	; (8003568 <HAL_DMA_IRQHandler+0x200>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00a      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x150>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a31      	ldr	r2, [pc, #196]	; (800356c <HAL_DMA_IRQHandler+0x204>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <HAL_DMA_IRQHandler+0x14a>
 80034ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034b0:	e00e      	b.n	80034d0 <HAL_DMA_IRQHandler+0x168>
 80034b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b6:	e00b      	b.n	80034d0 <HAL_DMA_IRQHandler+0x168>
 80034b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034bc:	e008      	b.n	80034d0 <HAL_DMA_IRQHandler+0x168>
 80034be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c2:	e005      	b.n	80034d0 <HAL_DMA_IRQHandler+0x168>
 80034c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c8:	e002      	b.n	80034d0 <HAL_DMA_IRQHandler+0x168>
 80034ca:	2320      	movs	r3, #32
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_IRQHandler+0x168>
 80034ce:	2302      	movs	r3, #2
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_DMA_IRQHandler+0x208>)
 80034d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d034      	beq.n	800354e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034ec:	e02f      	b.n	800354e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2208      	movs	r2, #8
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d028      	beq.n	8003550 <HAL_DMA_IRQHandler+0x1e8>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 020e 	bic.w	r2, r2, #14
 8003516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
    }
  }
  return;
 800354e:	bf00      	nop
 8003550:	bf00      	nop
}
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40020008 	.word	0x40020008
 800355c:	4002001c 	.word	0x4002001c
 8003560:	40020030 	.word	0x40020030
 8003564:	40020044 	.word	0x40020044
 8003568:	40020058 	.word	0x40020058
 800356c:	4002006c 	.word	0x4002006c
 8003570:	40020000 	.word	0x40020000

08003574 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f202 	lsl.w	r2, r1, r2
 8003590:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d108      	bne.n	80035b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035b2:	e007      	b.n	80035c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_FLASH_Program+0xd8>)
 80035ec:	7e1b      	ldrb	r3, [r3, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_FLASH_Program+0x26>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e054      	b.n	80036a0 <HAL_FLASH_Program+0xd0>
 80035f6:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_FLASH_Program+0xd8>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003600:	f000 f8b2 	bl	8003768 <FLASH_WaitForLastOperation>
 8003604:	4603      	mov	r3, r0
 8003606:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d144      	bne.n	8003698 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003614:	2301      	movs	r3, #1
 8003616:	757b      	strb	r3, [r7, #21]
 8003618:	e007      	b.n	800362a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d102      	bne.n	8003626 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003620:	2302      	movs	r3, #2
 8003622:	757b      	strb	r3, [r7, #21]
 8003624:	e001      	b.n	800362a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003626:	2304      	movs	r3, #4
 8003628:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800362a:	2300      	movs	r3, #0
 800362c:	75bb      	strb	r3, [r7, #22]
 800362e:	e02d      	b.n	800368c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003630:	7dbb      	ldrb	r3, [r7, #22]
 8003632:	005a      	lsls	r2, r3, #1
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	eb02 0c03 	add.w	ip, r2, r3
 800363a:	7dbb      	ldrb	r3, [r7, #22]
 800363c:	0119      	lsls	r1, r3, #4
 800363e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003642:	f1c1 0620 	rsb	r6, r1, #32
 8003646:	f1a1 0020 	sub.w	r0, r1, #32
 800364a:	fa22 f401 	lsr.w	r4, r2, r1
 800364e:	fa03 f606 	lsl.w	r6, r3, r6
 8003652:	4334      	orrs	r4, r6
 8003654:	fa23 f000 	lsr.w	r0, r3, r0
 8003658:	4304      	orrs	r4, r0
 800365a:	fa23 f501 	lsr.w	r5, r3, r1
 800365e:	b2a3      	uxth	r3, r4
 8003660:	4619      	mov	r1, r3
 8003662:	4660      	mov	r0, ip
 8003664:	f000 f864 	bl	8003730 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003668:	f24c 3050 	movw	r0, #50000	; 0xc350
 800366c:	f000 f87c 	bl	8003768 <FLASH_WaitForLastOperation>
 8003670:	4603      	mov	r3, r0
 8003672:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_FLASH_Program+0xdc>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <HAL_FLASH_Program+0xdc>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003686:	7dbb      	ldrb	r3, [r7, #22]
 8003688:	3301      	adds	r3, #1
 800368a:	75bb      	strb	r3, [r7, #22]
 800368c:	7dba      	ldrb	r2, [r7, #22]
 800368e:	7d7b      	ldrb	r3, [r7, #21]
 8003690:	429a      	cmp	r2, r3
 8003692:	d3cd      	bcc.n	8003630 <HAL_FLASH_Program+0x60>
 8003694:	e000      	b.n	8003698 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003696:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_FLASH_Program+0xd8>)
 800369a:	2200      	movs	r2, #0
 800369c:	761a      	strb	r2, [r3, #24]

  return status;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000a60 	.word	0x20000a60
 80036ac:	40022000 	.word	0x40022000

080036b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_FLASH_Unlock+0x40>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_FLASH_Unlock+0x40>)
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_FLASH_Unlock+0x44>)
 80036ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_FLASH_Unlock+0x40>)
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <HAL_FLASH_Unlock+0x48>)
 80036d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_FLASH_Unlock+0x40>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80036e2:	79fb      	ldrb	r3, [r7, #7]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40022000 	.word	0x40022000
 80036f4:	45670123 	.word	0x45670123
 80036f8:	cdef89ab 	.word	0xcdef89ab

080036fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_FLASH_Lock+0x1c>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <HAL_FLASH_Lock+0x1c>)
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000

0800371c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003720:	4b02      	ldr	r3, [pc, #8]	; (800372c <HAL_FLASH_GetError+0x10>)
 8003722:	69db      	ldr	r3, [r3, #28]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	20000a60 	.word	0x20000a60

08003730 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <FLASH_Program_HalfWord+0x30>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <FLASH_Program_HalfWord+0x34>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <FLASH_Program_HalfWord+0x34>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	887a      	ldrh	r2, [r7, #2]
 8003752:	801a      	strh	r2, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000a60 	.word	0x20000a60
 8003764:	40022000 	.word	0x40022000

08003768 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7fe fef4 	bl	800255c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003776:	e010      	b.n	800379a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d00c      	beq.n	800379a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <FLASH_WaitForLastOperation+0x2e>
 8003786:	f7fe fee9 	bl	800255c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d201      	bcs.n	800379a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e025      	b.n	80037e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <FLASH_WaitForLastOperation+0x88>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e8      	bne.n	8003778 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <FLASH_WaitForLastOperation+0x88>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <FLASH_WaitForLastOperation+0x88>)
 80037b4:	2220      	movs	r2, #32
 80037b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <FLASH_WaitForLastOperation+0x88>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <FLASH_WaitForLastOperation+0x88>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <FLASH_WaitForLastOperation+0x88>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80037dc:	f000 f80a 	bl	80037f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000

080037f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <FLASH_SetErrorCode+0x98>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <FLASH_SetErrorCode+0x9c>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <FLASH_SetErrorCode+0x9c>)
 8003814:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <FLASH_SetErrorCode+0x98>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <FLASH_SetErrorCode+0x9c>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	4a17      	ldr	r2, [pc, #92]	; (8003890 <FLASH_SetErrorCode+0x9c>)
 8003834:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <FLASH_SetErrorCode+0x98>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <FLASH_SetErrorCode+0x9c>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <FLASH_SetErrorCode+0x9c>)
 8003854:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <FLASH_SetErrorCode+0x98>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4a0c      	ldr	r2, [pc, #48]	; (800388c <FLASH_SetErrorCode+0x98>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f240 1201 	movw	r2, #257	; 0x101
 8003868:	4293      	cmp	r3, r2
 800386a:	d106      	bne.n	800387a <FLASH_SetErrorCode+0x86>
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <FLASH_SetErrorCode+0x98>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4a06      	ldr	r2, [pc, #24]	; (800388c <FLASH_SetErrorCode+0x98>)
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	61d3      	str	r3, [r2, #28]
}  
 8003878:	e002      	b.n	8003880 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <FLASH_SetErrorCode+0x98>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60d3      	str	r3, [r2, #12]
}  
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40022000 	.word	0x40022000
 8003890:	20000a60 	.word	0x20000a60

08003894 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_FLASHEx_Erase+0xd0>)
 80038a8:	7e1b      	ldrb	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_FLASHEx_Erase+0x1e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e053      	b.n	800395a <HAL_FLASHEx_Erase+0xc6>
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_FLASHEx_Erase+0xd0>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d116      	bne.n	80038ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80038c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038c4:	f7ff ff50 	bl	8003768 <FLASH_WaitForLastOperation>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d141      	bne.n	8003952 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80038ce:	2001      	movs	r0, #1
 80038d0:	f000 f84c 	bl	800396c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038d8:	f7ff ff46 	bl	8003768 <FLASH_WaitForLastOperation>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80038e0:	4b21      	ldr	r3, [pc, #132]	; (8003968 <HAL_FLASHEx_Erase+0xd4>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a20      	ldr	r2, [pc, #128]	; (8003968 <HAL_FLASHEx_Erase+0xd4>)
 80038e6:	f023 0304 	bic.w	r3, r3, #4
 80038ea:	6113      	str	r3, [r2, #16]
 80038ec:	e031      	b.n	8003952 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80038ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038f2:	f7ff ff39 	bl	8003768 <FLASH_WaitForLastOperation>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d12a      	bne.n	8003952 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003902:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	e019      	b.n	8003940 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800390c:	68b8      	ldr	r0, [r7, #8]
 800390e:	f000 f849 	bl	80039a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003912:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003916:	f7ff ff27 	bl	8003768 <FLASH_WaitForLastOperation>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_FLASHEx_Erase+0xd4>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_FLASHEx_Erase+0xd4>)
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	601a      	str	r2, [r3, #0]
            break;
 8003936:	e00c      	b.n	8003952 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	029a      	lsls	r2, r3, #10
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d3dc      	bcc.n	800390c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <HAL_FLASHEx_Erase+0xd0>)
 8003954:	2200      	movs	r2, #0
 8003956:	761a      	strb	r2, [r3, #24]

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000a60 	.word	0x20000a60
 8003968:	40022000 	.word	0x40022000

0800396c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <FLASH_MassErase+0x30>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <FLASH_MassErase+0x34>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <FLASH_MassErase+0x34>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <FLASH_MassErase+0x34>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	4a05      	ldr	r2, [pc, #20]	; (80039a0 <FLASH_MassErase+0x34>)
 800398c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003990:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	20000a60 	.word	0x20000a60
 80039a0:	40022000 	.word	0x40022000

080039a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <FLASH_PageErase+0x38>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <FLASH_PageErase+0x3c>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <FLASH_PageErase+0x3c>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <FLASH_PageErase+0x3c>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <FLASH_PageErase+0x3c>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <FLASH_PageErase+0x3c>)
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000a60 	.word	0x20000a60
 80039e0:	40022000 	.word	0x40022000

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b08b      	sub	sp, #44	; 0x2c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	e169      	b.n	8003ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039f8:	2201      	movs	r2, #1
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f040 8158 	bne.w	8003cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a9a      	ldr	r2, [pc, #616]	; (8003c84 <HAL_GPIO_Init+0x2a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d05e      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a20:	4a98      	ldr	r2, [pc, #608]	; (8003c84 <HAL_GPIO_Init+0x2a0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d875      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a26:	4a98      	ldr	r2, [pc, #608]	; (8003c88 <HAL_GPIO_Init+0x2a4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d058      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a2c:	4a96      	ldr	r2, [pc, #600]	; (8003c88 <HAL_GPIO_Init+0x2a4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d86f      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a32:	4a96      	ldr	r2, [pc, #600]	; (8003c8c <HAL_GPIO_Init+0x2a8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d052      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a38:	4a94      	ldr	r2, [pc, #592]	; (8003c8c <HAL_GPIO_Init+0x2a8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d869      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a3e:	4a94      	ldr	r2, [pc, #592]	; (8003c90 <HAL_GPIO_Init+0x2ac>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04c      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a44:	4a92      	ldr	r2, [pc, #584]	; (8003c90 <HAL_GPIO_Init+0x2ac>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d863      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a4a:	4a92      	ldr	r2, [pc, #584]	; (8003c94 <HAL_GPIO_Init+0x2b0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d046      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a50:	4a90      	ldr	r2, [pc, #576]	; (8003c94 <HAL_GPIO_Init+0x2b0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d85d      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d82a      	bhi.n	8003ab0 <HAL_GPIO_Init+0xcc>
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d859      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_GPIO_Init+0x80>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003adf 	.word	0x08003adf
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003acb 	.word	0x08003acb
 8003a70:	08003b0d 	.word	0x08003b0d
 8003a74:	08003b13 	.word	0x08003b13
 8003a78:	08003b13 	.word	0x08003b13
 8003a7c:	08003b13 	.word	0x08003b13
 8003a80:	08003b13 	.word	0x08003b13
 8003a84:	08003b13 	.word	0x08003b13
 8003a88:	08003b13 	.word	0x08003b13
 8003a8c:	08003b13 	.word	0x08003b13
 8003a90:	08003b13 	.word	0x08003b13
 8003a94:	08003b13 	.word	0x08003b13
 8003a98:	08003b13 	.word	0x08003b13
 8003a9c:	08003b13 	.word	0x08003b13
 8003aa0:	08003b13 	.word	0x08003b13
 8003aa4:	08003b13 	.word	0x08003b13
 8003aa8:	08003ac1 	.word	0x08003ac1
 8003aac:	08003ad5 	.word	0x08003ad5
 8003ab0:	4a79      	ldr	r2, [pc, #484]	; (8003c98 <HAL_GPIO_Init+0x2b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ab6:	e02c      	b.n	8003b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	623b      	str	r3, [r7, #32]
          break;
 8003abe:	e029      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	623b      	str	r3, [r7, #32]
          break;
 8003ac8:	e024      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	623b      	str	r3, [r7, #32]
          break;
 8003ad2:	e01f      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	623b      	str	r3, [r7, #32]
          break;
 8003adc:	e01a      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	623b      	str	r3, [r7, #32]
          break;
 8003aea:	e013      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af4:	2308      	movs	r3, #8
 8003af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	611a      	str	r2, [r3, #16]
          break;
 8003afe:	e009      	b.n	8003b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b00:	2308      	movs	r3, #8
 8003b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	615a      	str	r2, [r3, #20]
          break;
 8003b0a:	e003      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	623b      	str	r3, [r7, #32]
          break;
 8003b10:	e000      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          break;
 8003b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d801      	bhi.n	8003b1e <HAL_GPIO_Init+0x13a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	e001      	b.n	8003b22 <HAL_GPIO_Init+0x13e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2bff      	cmp	r3, #255	; 0xff
 8003b28:	d802      	bhi.n	8003b30 <HAL_GPIO_Init+0x14c>
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	e002      	b.n	8003b36 <HAL_GPIO_Init+0x152>
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	3b08      	subs	r3, #8
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	210f      	movs	r1, #15
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80b1 	beq.w	8003cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6193      	str	r3, [r2, #24]
 8003b70:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b7c:	4a48      	ldr	r2, [pc, #288]	; (8003ca0 <HAL_GPIO_Init+0x2bc>)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <HAL_GPIO_Init+0x2c0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_GPIO_Init+0x1ec>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <HAL_GPIO_Init+0x2c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00d      	beq.n	8003bcc <HAL_GPIO_Init+0x1e8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3e      	ldr	r2, [pc, #248]	; (8003cac <HAL_GPIO_Init+0x2c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <HAL_GPIO_Init+0x2cc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_GPIO_Init+0x1e0>
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e004      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e002      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	f002 0203 	and.w	r2, r2, #3
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	4093      	lsls	r3, r2
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003be2:	492f      	ldr	r1, [pc, #188]	; (8003ca0 <HAL_GPIO_Init+0x2bc>)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	492c      	ldr	r1, [pc, #176]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]
 8003c08:	e006      	b.n	8003c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	4928      	ldr	r1, [pc, #160]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c24:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4922      	ldr	r1, [pc, #136]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60cb      	str	r3, [r1, #12]
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	491e      	ldr	r1, [pc, #120]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4918      	ldr	r1, [pc, #96]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	4914      	ldr	r1, [pc, #80]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d021      	beq.n	8003cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	490e      	ldr	r1, [pc, #56]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e021      	b.n	8003cc6 <HAL_GPIO_Init+0x2e2>
 8003c82:	bf00      	nop
 8003c84:	10320000 	.word	0x10320000
 8003c88:	10310000 	.word	0x10310000
 8003c8c:	10220000 	.word	0x10220000
 8003c90:	10210000 	.word	0x10210000
 8003c94:	10120000 	.word	0x10120000
 8003c98:	10110000 	.word	0x10110000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40010800 	.word	0x40010800
 8003ca8:	40010c00 	.word	0x40010c00
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_GPIO_Init+0x304>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	4909      	ldr	r1, [pc, #36]	; (8003ce8 <HAL_GPIO_Init+0x304>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f47f ae8e 	bne.w	80039f8 <HAL_GPIO_Init+0x14>
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	372c      	adds	r7, #44	; 0x2c
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	e001      	b.n	8003d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	807b      	strh	r3, [r7, #2]
 8003d26:	4613      	mov	r3, r2
 8003d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d2a:	787b      	ldrb	r3, [r7, #1]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d30:	887a      	ldrh	r2, [r7, #2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d36:	e003      	b.n	8003d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	041a      	lsls	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	041a      	lsls	r2, r3, #16
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	611a      	str	r2, [r3, #16]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fcd2 	bl	8001744 <HAL_GPIO_EXTI_Callback>
  }
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40010400 	.word	0x40010400

08003dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e12b      	b.n	8004016 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe f902 	bl	8001fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e10:	f001 f9b6 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4a81      	ldr	r2, [pc, #516]	; (8004020 <HAL_I2C_Init+0x274>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d807      	bhi.n	8003e30 <HAL_I2C_Init+0x84>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a80      	ldr	r2, [pc, #512]	; (8004024 <HAL_I2C_Init+0x278>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	bf94      	ite	ls
 8003e28:	2301      	movls	r3, #1
 8003e2a:	2300      	movhi	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e006      	b.n	8003e3e <HAL_I2C_Init+0x92>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a7d      	ldr	r2, [pc, #500]	; (8004028 <HAL_I2C_Init+0x27c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	bf94      	ite	ls
 8003e38:	2301      	movls	r3, #1
 8003e3a:	2300      	movhi	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0e7      	b.n	8004016 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a78      	ldr	r2, [pc, #480]	; (800402c <HAL_I2C_Init+0x280>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	0c9b      	lsrs	r3, r3, #18
 8003e50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a6a      	ldr	r2, [pc, #424]	; (8004020 <HAL_I2C_Init+0x274>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d802      	bhi.n	8003e80 <HAL_I2C_Init+0xd4>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	e009      	b.n	8003e94 <HAL_I2C_Init+0xe8>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	4a69      	ldr	r2, [pc, #420]	; (8004030 <HAL_I2C_Init+0x284>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	3301      	adds	r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ea6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	495c      	ldr	r1, [pc, #368]	; (8004020 <HAL_I2C_Init+0x274>)
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	d819      	bhi.n	8003ee8 <HAL_I2C_Init+0x13c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1e59      	subs	r1, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec2:	1c59      	adds	r1, r3, #1
 8003ec4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ec8:	400b      	ands	r3, r1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_I2C_Init+0x138>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1e59      	subs	r1, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003edc:	3301      	adds	r3, #1
 8003ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee2:	e051      	b.n	8003f88 <HAL_I2C_Init+0x1dc>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	e04f      	b.n	8003f88 <HAL_I2C_Init+0x1dc>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d111      	bne.n	8003f14 <HAL_I2C_Init+0x168>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e58      	subs	r0, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	440b      	add	r3, r1
 8003efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f02:	3301      	adds	r3, #1
 8003f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e012      	b.n	8003f3a <HAL_I2C_Init+0x18e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e58      	subs	r0, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	0099      	lsls	r1, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Init+0x196>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e022      	b.n	8003f88 <HAL_I2C_Init+0x1dc>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10e      	bne.n	8003f68 <HAL_I2C_Init+0x1bc>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e58      	subs	r0, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	440b      	add	r3, r1
 8003f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f66:	e00f      	b.n	8003f88 <HAL_I2C_Init+0x1dc>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e58      	subs	r0, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	0099      	lsls	r1, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	6809      	ldr	r1, [r1, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6911      	ldr	r1, [r2, #16]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68d2      	ldr	r2, [r2, #12]
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	000186a0 	.word	0x000186a0
 8004024:	001e847f 	.word	0x001e847f
 8004028:	003d08ff 	.word	0x003d08ff
 800402c:	431bde83 	.word	0x431bde83
 8004030:	10624dd3 	.word	0x10624dd3

08004034 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	461a      	mov	r2, r3
 8004040:	460b      	mov	r3, r1
 8004042:	817b      	strh	r3, [r7, #10]
 8004044:	4613      	mov	r3, r2
 8004046:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004048:	f7fe fa88 	bl	800255c <HAL_GetTick>
 800404c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	f040 80e0 	bne.w	800421c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2319      	movs	r3, #25
 8004062:	2201      	movs	r2, #1
 8004064:	4970      	ldr	r1, [pc, #448]	; (8004228 <HAL_I2C_Master_Transmit+0x1f4>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa92 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	e0d3      	b.n	800421e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_I2C_Master_Transmit+0x50>
 8004080:	2302      	movs	r3, #2
 8004082:	e0cc      	b.n	800421e <HAL_I2C_Master_Transmit+0x1ea>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d007      	beq.n	80040aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2210      	movs	r2, #16
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	893a      	ldrh	r2, [r7, #8]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a50      	ldr	r2, [pc, #320]	; (800422c <HAL_I2C_Master_Transmit+0x1f8>)
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f9ca 	bl	800448c <I2C_MasterRequestWrite>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e08d      	b.n	800421e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004118:	e066      	b.n	80041e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fb50 	bl	80047c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06b      	b.n	800421e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11b      	bne.n	80041bc <HAL_I2C_Master_Transmit+0x188>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d017      	beq.n	80041bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	6a39      	ldr	r1, [r7, #32]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fb47 	bl	8004854 <I2C_WaitOnBTFFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e01a      	b.n	800421e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d194      	bne.n	800411a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	00100002 	.word	0x00100002
 800422c:	ffff0000 	.word	0xffff0000

08004230 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	460b      	mov	r3, r1
 800423e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7fe f98c 	bl	800255c <HAL_GetTick>
 8004244:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b20      	cmp	r3, #32
 8004254:	f040 8111 	bne.w	800447a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2319      	movs	r3, #25
 800425e:	2201      	movs	r2, #1
 8004260:	4988      	ldr	r1, [pc, #544]	; (8004484 <HAL_I2C_IsDeviceReady+0x254>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f994 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	e104      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_I2C_IsDeviceReady+0x50>
 800427c:	2302      	movs	r3, #2
 800427e:	e0fd      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d007      	beq.n	80042a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a70      	ldr	r2, [pc, #448]	; (8004488 <HAL_I2C_IsDeviceReady+0x258>)
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f952 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d103      	bne.n	800430a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0b6      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800431c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800431e:	f7fe f91d 	bl	800255c <HAL_GetTick>
 8004322:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004352:	e025      	b.n	80043a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fe f902 	bl	800255c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <HAL_I2C_IsDeviceReady+0x13a>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	22a0      	movs	r2, #160	; 0xa0
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2ba0      	cmp	r3, #160	; 0xa0
 80043aa:	d005      	beq.n	80043b8 <HAL_I2C_IsDeviceReady+0x188>
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_I2C_IsDeviceReady+0x188>
 80043b2:	7dbb      	ldrb	r3, [r7, #22]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0cd      	beq.n	8004354 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d129      	bne.n	8004422 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2319      	movs	r3, #25
 80043fa:	2201      	movs	r2, #1
 80043fc:	4921      	ldr	r1, [pc, #132]	; (8004484 <HAL_I2C_IsDeviceReady+0x254>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f8c6 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e036      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e02c      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004430:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800443a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2319      	movs	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	490f      	ldr	r1, [pc, #60]	; (8004484 <HAL_I2C_IsDeviceReady+0x254>)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8a2 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e012      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	3301      	adds	r3, #1
 800445a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	f4ff af32 	bcc.w	80042ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00100002 	.word	0x00100002
 8004488:	ffff0000 	.word	0xffff0000

0800448c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	460b      	mov	r3, r1
 800449a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d006      	beq.n	80044b6 <I2C_MasterRequestWrite+0x2a>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d003      	beq.n	80044b6 <I2C_MasterRequestWrite+0x2a>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b4:	d108      	bne.n	80044c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e00b      	b.n	80044e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d107      	bne.n	80044e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f84f 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004506:	d103      	bne.n	8004510 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e035      	b.n	8004580 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800451c:	d108      	bne.n	8004530 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800452c:	611a      	str	r2, [r3, #16]
 800452e:	e01b      	b.n	8004568 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004530:	897b      	ldrh	r3, [r7, #10]
 8004532:	11db      	asrs	r3, r3, #7
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0306 	and.w	r3, r3, #6
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f063 030f 	orn	r3, r3, #15
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	490e      	ldr	r1, [pc, #56]	; (8004588 <I2C_MasterRequestWrite+0xfc>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f898 	bl	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e010      	b.n	8004580 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <I2C_MasterRequestWrite+0x100>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f888 	bl	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	00010008 	.word	0x00010008
 800458c:	00010002 	.word	0x00010002

08004590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a0:	e048      	b.n	8004634 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d044      	beq.n	8004634 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd ffd7 	bl	800255c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d139      	bne.n	8004634 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d10d      	bne.n	80045e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	43da      	mvns	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	e00c      	b.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	43da      	mvns	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4013      	ands	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	429a      	cmp	r2, r3
 8004604:	d116      	bne.n	8004634 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e023      	b.n	800467c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10d      	bne.n	800465a <I2C_WaitOnFlagUntilTimeout+0xca>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	43da      	mvns	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	e00c      	b.n	8004674 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	43da      	mvns	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	429a      	cmp	r2, r3
 8004678:	d093      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004692:	e071      	b.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	d123      	bne.n	80046ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e067      	b.n	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d041      	beq.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fd ff32 	bl	800255c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d136      	bne.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10c      	bne.n	800472e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e00b      	b.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	43da      	mvns	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e021      	b.n	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	0c1b      	lsrs	r3, r3, #16
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10c      	bne.n	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e00b      	b.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	43da      	mvns	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf14      	ite	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	2300      	moveq	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f af6d 	bne.w	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d0:	e034      	b.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f886 	bl	80048e4 <I2C_IsAcknowledgeFailed>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e034      	b.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d028      	beq.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fd feb7 	bl	800255c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11d      	bne.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d016      	beq.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e007      	b.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d1c3      	bne.n	80047d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004860:	e034      	b.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f83e 	bl	80048e4 <I2C_IsAcknowledgeFailed>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e034      	b.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d028      	beq.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fd fe6f 	bl	800255c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11d      	bne.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b04      	cmp	r3, #4
 800489c:	d016      	beq.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e007      	b.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d1c3      	bne.n	8004862 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fa:	d11b      	bne.n	8004934 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004904:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	f043 0204 	orr.w	r2, r3, #4
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8004944:	bf20      	wfe
  __asm volatile( "nop" );
 8004946:	bf00      	nop
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_PWR_EnterSLEEPMode+0x34>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004962:	f023 0304 	bic.w	r3, r3, #4
 8004966:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800496e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004970:	e002      	b.n	8004978 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004972:	bf40      	sev
    __WFE();
 8004974:	bf20      	wfe
    __WFE();
 8004976:	bf20      	wfe
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 800499a:	f023 0302 	bic.w	r3, r3, #2
 800499e:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 0201 	bic.w	r2, r3, #1
 80049a8:	490e      	ldr	r1, [pc, #56]	; (80049e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80049c2:	bf30      	wfi
 80049c4:	e004      	b.n	80049d0 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80049c6:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80049c8:	f7ff ffba 	bl	8004940 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80049cc:	f7ff ffb8 	bl	8004940 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6113      	str	r3, [r2, #16]
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40007000 	.word	0x40007000
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e272      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8087 	beq.w	8004b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a0c:	4b92      	ldr	r3, [pc, #584]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d00c      	beq.n	8004a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a18:	4b8f      	ldr	r3, [pc, #572]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d112      	bne.n	8004a4a <HAL_RCC_OscConfig+0x5e>
 8004a24:	4b8c      	ldr	r3, [pc, #560]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d10b      	bne.n	8004a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a32:	4b89      	ldr	r3, [pc, #548]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d06c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x12c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d168      	bne.n	8004b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e24c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x76>
 8004a54:	4b80      	ldr	r3, [pc, #512]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a7f      	ldr	r2, [pc, #508]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e02e      	b.n	8004ac0 <HAL_RCC_OscConfig+0xd4>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x98>
 8004a6a:	4b7b      	ldr	r3, [pc, #492]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a7a      	ldr	r2, [pc, #488]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b78      	ldr	r3, [pc, #480]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a77      	ldr	r2, [pc, #476]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e01d      	b.n	8004ac0 <HAL_RCC_OscConfig+0xd4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0xbc>
 8004a8e:	4b72      	ldr	r3, [pc, #456]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a71      	ldr	r2, [pc, #452]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b6f      	ldr	r3, [pc, #444]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6e      	ldr	r2, [pc, #440]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0xd4>
 8004aa8:	4b6b      	ldr	r3, [pc, #428]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a6a      	ldr	r2, [pc, #424]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a67      	ldr	r2, [pc, #412]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fd48 	bl	800255c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd fd44 	bl	800255c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e200      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b5d      	ldr	r3, [pc, #372]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xe4>
 8004aee:	e014      	b.n	8004b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd fd34 	bl	800255c <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fd fd30 	bl	800255c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1ec      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	4b53      	ldr	r3, [pc, #332]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x10c>
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d063      	beq.n	8004bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b26:	4b4c      	ldr	r3, [pc, #304]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b32:	4b49      	ldr	r3, [pc, #292]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x18c>
 8004b3e:	4b46      	ldr	r3, [pc, #280]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_RCC_OscConfig+0x176>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e1c0      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b62:	4b3d      	ldr	r3, [pc, #244]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4939      	ldr	r1, [pc, #228]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	e03a      	b.n	8004bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b80:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_RCC_OscConfig+0x270>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fd fce9 	bl	800255c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fd fce5 	bl	800255c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1a1      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b2a      	ldr	r3, [pc, #168]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4927      	ldr	r1, [pc, #156]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <HAL_RCC_OscConfig+0x270>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fcc8 	bl	800255c <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fd fcc4 	bl	800255c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e180      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03a      	beq.n	8004c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d019      	beq.n	8004c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c02:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c08:	f7fd fca8 	bl	800255c <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fd fca4 	bl	800255c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e160      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f000 face 	bl	80051d0 <RCC_Delay>
 8004c34:	e01c      	b.n	8004c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3c:	f7fd fc8e 	bl	800255c <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c42:	e00f      	b.n	8004c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fd fc8a 	bl	800255c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d908      	bls.n	8004c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e146      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	42420000 	.word	0x42420000
 8004c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c64:	4b92      	ldr	r3, [pc, #584]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e9      	bne.n	8004c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80a6 	beq.w	8004dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c82:	4b8b      	ldr	r3, [pc, #556]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	4a87      	ldr	r2, [pc, #540]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	61d3      	str	r3, [r2, #28]
 8004c9a:	4b85      	ldr	r3, [pc, #532]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b82      	ldr	r3, [pc, #520]	; (8004eb4 <HAL_RCC_OscConfig+0x4c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	; (8004eb4 <HAL_RCC_OscConfig+0x4c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a7e      	ldr	r2, [pc, #504]	; (8004eb4 <HAL_RCC_OscConfig+0x4c8>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd fc4b 	bl	800255c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fd fc47 	bl	800255c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b64      	cmp	r3, #100	; 0x64
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e103      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b75      	ldr	r3, [pc, #468]	; (8004eb4 <HAL_RCC_OscConfig+0x4c8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x312>
 8004cf0:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4a6e      	ldr	r2, [pc, #440]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6213      	str	r3, [r2, #32]
 8004cfc:	e02d      	b.n	8004d5a <HAL_RCC_OscConfig+0x36e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x334>
 8004d06:	4b6a      	ldr	r3, [pc, #424]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6213      	str	r3, [r2, #32]
 8004d12:	4b67      	ldr	r3, [pc, #412]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4a66      	ldr	r2, [pc, #408]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	e01c      	b.n	8004d5a <HAL_RCC_OscConfig+0x36e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	d10c      	bne.n	8004d42 <HAL_RCC_OscConfig+0x356>
 8004d28:	4b61      	ldr	r3, [pc, #388]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4a60      	ldr	r2, [pc, #384]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d2e:	f043 0304 	orr.w	r3, r3, #4
 8004d32:	6213      	str	r3, [r2, #32]
 8004d34:	4b5e      	ldr	r3, [pc, #376]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4a5d      	ldr	r2, [pc, #372]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6213      	str	r3, [r2, #32]
 8004d40:	e00b      	b.n	8004d5a <HAL_RCC_OscConfig+0x36e>
 8004d42:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	4a5a      	ldr	r2, [pc, #360]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	6213      	str	r3, [r2, #32]
 8004d4e:	4b58      	ldr	r3, [pc, #352]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	4a57      	ldr	r2, [pc, #348]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7fd fbfb 	bl	800255c <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fd fbf7 	bl	800255c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0b1      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d80:	4b4b      	ldr	r3, [pc, #300]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ee      	beq.n	8004d6a <HAL_RCC_OscConfig+0x37e>
 8004d8c:	e014      	b.n	8004db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8e:	f7fd fbe5 	bl	800255c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd fbe1 	bl	800255c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e09b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dac:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1ee      	bne.n	8004d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbe:	4b3c      	ldr	r3, [pc, #240]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	4a3b      	ldr	r2, [pc, #236]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8087 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd4:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d061      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d146      	bne.n	8004e76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de8:	4b33      	ldr	r3, [pc, #204]	; (8004eb8 <HAL_RCC_OscConfig+0x4cc>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fd fbb5 	bl	800255c <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fd fbb1 	bl	800255c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e06d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e08:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1c:	d108      	bne.n	8004e30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4921      	ldr	r1, [pc, #132]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e30:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a19      	ldr	r1, [r3, #32]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	430b      	orrs	r3, r1
 8004e42:	491b      	ldr	r1, [pc, #108]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCC_OscConfig+0x4cc>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fb85 	bl	800255c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fd fb81 	bl	800255c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e03d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e68:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x46a>
 8004e74:	e035      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <HAL_RCC_OscConfig+0x4cc>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fb6e 	bl	800255c <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd fb6a 	bl	800255c <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e026      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x498>
 8004ea2:	e01e      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e019      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_RCC_OscConfig+0x500>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d106      	bne.n	8004ede <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000

08004ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0d0      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b6a      	ldr	r3, [pc, #424]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d910      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 0207 	bic.w	r2, r3, #7
 8004f1a:	4965      	ldr	r1, [pc, #404]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b63      	ldr	r3, [pc, #396]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0b8      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d020      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f4c:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a58      	ldr	r2, [pc, #352]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f64:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f70:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	494d      	ldr	r1, [pc, #308]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d040      	beq.n	8005010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d115      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e07f      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d107      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fae:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e073      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	4b3d      	ldr	r3, [pc, #244]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06b      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fce:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f023 0203 	bic.w	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4936      	ldr	r1, [pc, #216]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe0:	f7fd fabc 	bl	800255c <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fd fab8 	bl	800255c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e053      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 020c 	and.w	r2, r3, #12
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	429a      	cmp	r2, r3
 800500e:	d1eb      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d210      	bcs.n	8005040 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 0207 	bic.w	r2, r3, #7
 8005026:	4922      	ldr	r1, [pc, #136]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e032      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4916      	ldr	r1, [pc, #88]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	490e      	ldr	r1, [pc, #56]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800507e:	f000 f821 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 8005082:	4602      	mov	r2, r0
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	490a      	ldr	r1, [pc, #40]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005090:	5ccb      	ldrb	r3, [r1, r3]
 8005092:	fa22 f303 	lsr.w	r3, r2, r3
 8005096:	4a09      	ldr	r2, [pc, #36]	; (80050bc <HAL_RCC_ClockConfig+0x1cc>)
 8005098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCC_ClockConfig+0x1d0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fa1a 	bl	80024d8 <HAL_InitTick>

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40022000 	.word	0x40022000
 80050b4:	40021000 	.word	0x40021000
 80050b8:	08009414 	.word	0x08009414
 80050bc:	20000318 	.word	0x20000318
 80050c0:	2000031c 	.word	0x2000031c

080050c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	2300      	movs	r3, #0
 80050d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCC_GetSysClockFreq+0x94>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0x30>
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d003      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x36>
 80050f2:	e027      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_GetSysClockFreq+0x98>)
 80050f6:	613b      	str	r3, [r7, #16]
      break;
 80050f8:	e027      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	0c9b      	lsrs	r3, r3, #18
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005104:	5cd3      	ldrb	r3, [r2, r3]
 8005106:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_RCC_GetSysClockFreq+0x94>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	0c5b      	lsrs	r3, r3, #17
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	4a11      	ldr	r2, [pc, #68]	; (8005164 <HAL_RCC_GetSysClockFreq+0xa0>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a0d      	ldr	r2, [pc, #52]	; (800515c <HAL_RCC_GetSysClockFreq+0x98>)
 8005126:	fb03 f202 	mul.w	r2, r3, r2
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e004      	b.n	800513e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a0c      	ldr	r2, [pc, #48]	; (8005168 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	613b      	str	r3, [r7, #16]
      break;
 8005142:	e002      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_GetSysClockFreq+0x98>)
 8005146:	613b      	str	r3, [r7, #16]
      break;
 8005148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514a:	693b      	ldr	r3, [r7, #16]
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000
 800515c:	007a1200 	.word	0x007a1200
 8005160:	0800942c 	.word	0x0800942c
 8005164:	0800943c 	.word	0x0800943c
 8005168:	003d0900 	.word	0x003d0900

0800516c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005170:	4b02      	ldr	r3, [pc, #8]	; (800517c <HAL_RCC_GetHCLKFreq+0x10>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	20000318 	.word	0x20000318

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff2 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	08009424 	.word	0x08009424

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffde 	bl	800516c <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	0adb      	lsrs	r3, r3, #11
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	08009424 	.word	0x08009424

080051d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <RCC_Delay+0x34>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <RCC_Delay+0x38>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0a5b      	lsrs	r3, r3, #9
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051ec:	bf00      	nop
  }
  while (Delay --);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	60fa      	str	r2, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f9      	bne.n	80051ec <RCC_Delay+0x1c>
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000318 	.word	0x20000318
 8005208:	10624dd3 	.word	0x10624dd3

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d07d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522c:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10d      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005238:	4b4c      	ldr	r3, [pc, #304]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4a4b      	ldr	r2, [pc, #300]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	61d3      	str	r3, [r2, #28]
 8005244:	4b49      	ldr	r3, [pc, #292]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b46      	ldr	r3, [pc, #280]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d118      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005260:	4b43      	ldr	r3, [pc, #268]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a42      	ldr	r2, [pc, #264]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526c:	f7fd f976 	bl	800255c <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005272:	e008      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fd f972 	bl	800255c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	; 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e06d      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005292:	4b36      	ldr	r3, [pc, #216]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02e      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d027      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052b0:	4b2e      	ldr	r3, [pc, #184]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d014      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d6:	f7fd f941 	bl	800255c <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fd f93d 	bl	800255c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e036      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ee      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4917      	ldr	r1, [pc, #92]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	4313      	orrs	r3, r2
 8005310:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4a13      	ldr	r2, [pc, #76]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	490b      	ldr	r1, [pc, #44]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533e:	4313      	orrs	r3, r2
 8005340:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4904      	ldr	r1, [pc, #16]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
 8005374:	42420440 	.word	0x42420440

08005378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e041      	b.n	800540e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fe5a 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 faa2 	bl	8005900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e03a      	b.n	80054a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_TIM_Base_Start_IT+0x98>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00e      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x58>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d009      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x58>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x58>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d111      	bne.n	8005494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b06      	cmp	r3, #6
 8005480:	d010      	beq.n	80054a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	e007      	b.n	80054a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800

080054bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	f241 1311 	movw	r3, #4369	; 0x1111
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <HAL_TIM_Base_Stop_IT+0x48>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a1a      	ldr	r2, [r3, #32]
 80054ea:	f240 4344 	movw	r3, #1092	; 0x444
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_Base_Stop_IT+0x48>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0202 	mvn.w	r2, #2
 8005544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9b4 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9a7 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f9b6 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f98a 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f97d 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f98c 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f960 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f953 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f962 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f936 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f929 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f938 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0201 	mvn.w	r2, #1
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc f8f8 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa7b 	bl	8005bbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8fc 	bl	80058ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b20      	cmp	r3, #32
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0220 	mvn.w	r2, #32
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa46 	bl	8005bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIM_ConfigClockSource+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e0b4      	b.n	80058ae <HAL_TIM_ConfigClockSource+0x186>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577c:	d03e      	beq.n	80057fc <HAL_TIM_ConfigClockSource+0xd4>
 800577e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005782:	f200 8087 	bhi.w	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 8005786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578a:	f000 8086 	beq.w	800589a <HAL_TIM_ConfigClockSource+0x172>
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	d87f      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d01a      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xa6>
 8005798:	2b70      	cmp	r3, #112	; 0x70
 800579a:	d87b      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d050      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x11a>
 80057a0:	2b60      	cmp	r3, #96	; 0x60
 80057a2:	d877      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d03c      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xfa>
 80057a8:	2b50      	cmp	r3, #80	; 0x50
 80057aa:	d873      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d058      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x13a>
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d86f      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d064      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	d86b      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d060      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d867      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d05c      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d05a      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057cc:	e062      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6899      	ldr	r1, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f000 f968 	bl	8005ab2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	609a      	str	r2, [r3, #8]
      break;
 80057fa:	e04f      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f000 f951 	bl	8005ab2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581e:	609a      	str	r2, [r3, #8]
      break;
 8005820:	e03c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 f8c8 	bl	80059c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2150      	movs	r1, #80	; 0x50
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f91f 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 8005840:	e02c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 f8e6 	bl	8005a20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2160      	movs	r1, #96	; 0x60
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f90f 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 8005860:	e01c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	461a      	mov	r2, r3
 8005870:	f000 f8a8 	bl	80059c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2140      	movs	r1, #64	; 0x40
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f8ff 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 8005880:	e00c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f000 f8f6 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 8005892:	e003      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e000      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800589a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
	...

08005900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <TIM_Base_SetConfig+0xb8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00b      	beq.n	8005930 <TIM_Base_SetConfig+0x30>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d007      	beq.n	8005930 <TIM_Base_SetConfig+0x30>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a26      	ldr	r2, [pc, #152]	; (80059bc <TIM_Base_SetConfig+0xbc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0x30>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <TIM_Base_SetConfig+0xc0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d108      	bne.n	8005942 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1c      	ldr	r2, [pc, #112]	; (80059b8 <TIM_Base_SetConfig+0xb8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_Base_SetConfig+0x62>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0x62>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <TIM_Base_SetConfig+0xbc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0x62>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <TIM_Base_SetConfig+0xc0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <TIM_Base_SetConfig+0xb8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	615a      	str	r2, [r3, #20]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800

080059c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f023 0201 	bic.w	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 030a 	bic.w	r3, r3, #10
 8005a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0210 	bic.w	r2, r3, #16
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	031b      	lsls	r3, r3, #12
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	621a      	str	r2, [r3, #32]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f043 0307 	orr.w	r3, r3, #7
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr

08005ab2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b087      	sub	sp, #28
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005acc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	021a      	lsls	r2, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	609a      	str	r2, [r3, #8]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e046      	b.n	8005b96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d009      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10c      	bne.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800

08005bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e042      	b.n	8005c68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fc fa6e 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 ff6d 	bl	8006af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08c      	sub	sp, #48	; 0x30
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d156      	bne.n	8005d38 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_UART_Transmit_DMA+0x26>
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e04f      	b.n	8005d3a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2221      	movs	r2, #33	; 0x21
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_UART_Transmit_DMA+0xd4>)
 8005cc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	4a20      	ldr	r2, [pc, #128]	; (8005d48 <HAL_UART_Transmit_DMA+0xd8>)
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <HAL_UART_Transmit_DMA+0xdc>)
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	461a      	mov	r2, r3
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	f7fd fa25 	bl	8003140 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d20:	627a      	str	r2, [r7, #36]	; 0x24
 8005d22:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6a39      	ldr	r1, [r7, #32]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e5      	bne.n	8005d00 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e000      	b.n	8005d3a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3730      	adds	r7, #48	; 0x30
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	0800638b 	.word	0x0800638b
 8005d48:	08006425 	.word	0x08006425
 8005d4c:	080065a9 	.word	0x080065a9

08005d50 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d14a      	bne.n	8005e00 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e043      	b.n	8005e02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fc55 	bl	800663c <UART_Start_Receive_DMA>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d12c      	bne.n	8005dfa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d125      	bne.n	8005df4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da8:	2300      	movs	r3, #0
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f043 0310 	orr.w	r3, r3, #16
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dde:	627a      	str	r2, [r7, #36]	; 0x24
 8005de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005df2:	e002      	b.n	8005dfa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dfe:	e000      	b.n	8005e02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3730      	adds	r7, #48	; 0x30
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b0ba      	sub	sp, #232	; 0xe8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10f      	bne.n	8005e72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <HAL_UART_IRQHandler+0x66>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fd84 	bl	8006978 <UART_Receive_IT>
      return;
 8005e70:	e25b      	b.n	800632a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80de 	beq.w	8006038 <HAL_UART_IRQHandler+0x22c>
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80d1 	beq.w	8006038 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0xae>
 8005ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f043 0201 	orr.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <HAL_UART_IRQHandler+0xd2>
 8005ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f043 0202 	orr.w	r2, r3, #2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_UART_IRQHandler+0xf6>
 8005eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	f043 0204 	orr.w	r2, r3, #4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d011      	beq.n	8005f32 <HAL_UART_IRQHandler+0x126>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d105      	bne.n	8005f26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0208 	orr.w	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 81f2 	beq.w	8006320 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_UART_IRQHandler+0x14e>
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fd0f 	bl	8006978 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <HAL_UART_IRQHandler+0x17a>
 8005f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d04f      	beq.n	8006026 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fc19 	bl	80067be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d041      	beq.n	800601e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3314      	adds	r3, #20
 8005fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d9      	bne.n	8005f9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d013      	beq.n	8006016 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	4a7e      	ldr	r2, [pc, #504]	; (80061ec <HAL_UART_IRQHandler+0x3e0>)
 8005ff4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd f93c 	bl	8003278 <HAL_DMA_Abort_IT>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	e00e      	b.n	8006034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9ae 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	e00a      	b.n	8006034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9aa 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	e006      	b.n	8006034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9a6 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006032:	e175      	b.n	8006320 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	bf00      	nop
    return;
 8006036:	e173      	b.n	8006320 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	2b01      	cmp	r3, #1
 800603e:	f040 814f 	bne.w	80062e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8148 	beq.w	80062e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8141 	beq.w	80062e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 80b6 	beq.w	80061f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8145 	beq.w	8006324 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800609e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f080 813e 	bcs.w	8006324 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	f000 8088 	beq.w	80061cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1d9      	bne.n	80060bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3314      	adds	r3, #20
 8006128:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800612c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006130:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006134:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800613e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e1      	bne.n	8006108 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006168:	66fa      	str	r2, [r7, #108]	; 0x6c
 800616a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800616e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e3      	bne.n	8006144 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80061b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e3      	bne.n	800618a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd f81a 	bl	8003200 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fb fa76 	bl	80016d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e8:	e09c      	b.n	8006324 <HAL_UART_IRQHandler+0x518>
 80061ea:	bf00      	nop
 80061ec:	08006883 	.word	0x08006883
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 808e 	beq.w	8006328 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800620c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8089 	beq.w	8006328 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800622c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800623a:	647a      	str	r2, [r7, #68]	; 0x44
 800623c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	623b      	str	r3, [r7, #32]
   return(result);
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006272:	633a      	str	r2, [r7, #48]	; 0x30
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e3      	bne.n	800624e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0310 	bic.w	r3, r3, #16
 80062aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062b8:	61fa      	str	r2, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	617b      	str	r3, [r7, #20]
   return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e3      	bne.n	8006294 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fb f9fb 	bl	80016d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062de:	e023      	b.n	8006328 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <HAL_UART_IRQHandler+0x4f4>
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fad6 	bl	80068aa <UART_Transmit_IT>
    return;
 80062fe:	e014      	b.n	800632a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <HAL_UART_IRQHandler+0x51e>
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fb15 	bl	8006948 <UART_EndTransmit_IT>
    return;
 800631e:	e004      	b.n	800632a <HAL_UART_IRQHandler+0x51e>
    return;
 8006320:	bf00      	nop
 8006322:	e002      	b.n	800632a <HAL_UART_IRQHandler+0x51e>
      return;
 8006324:	bf00      	nop
 8006326:	e000      	b.n	800632a <HAL_UART_IRQHandler+0x51e>
      return;
 8006328:	bf00      	nop
  }
}
 800632a:	37e8      	adds	r7, #232	; 0xe8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr

08006342 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr

08006366 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b090      	sub	sp, #64	; 0x40
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d137      	bne.n	8006416 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	2200      	movs	r2, #0
 80063aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	623b      	str	r3, [r7, #32]
   return(result);
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063cc:	633a      	str	r2, [r7, #48]	; 0x30
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006400:	61fa      	str	r2, [r7, #28]
 8006402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	69b9      	ldr	r1, [r7, #24]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	617b      	str	r3, [r7, #20]
   return(result);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e5      	bne.n	80063e0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006414:	e002      	b.n	800641c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006416:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006418:	f7ff ff8a 	bl	8006330 <HAL_UART_TxCpltCallback>
}
 800641c:	bf00      	nop
 800641e:	3740      	adds	r7, #64	; 0x40
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff85 	bl	8006342 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b09c      	sub	sp, #112	; 0x70
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d172      	bne.n	8006542 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800645c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645e:	2200      	movs	r2, #0
 8006460:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006478:	66bb      	str	r3, [r7, #104]	; 0x68
 800647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	330c      	adds	r3, #12
 8006480:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006482:	65ba      	str	r2, [r7, #88]	; 0x58
 8006484:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	667b      	str	r3, [r7, #100]	; 0x64
 80064ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064b6:	647a      	str	r2, [r7, #68]	; 0x44
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	623b      	str	r3, [r7, #32]
   return(result);
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e0:	663b      	str	r3, [r7, #96]	; 0x60
 80064e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064ea:	633a      	str	r2, [r7, #48]	; 0x30
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	2220      	movs	r2, #32
 8006502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	2b01      	cmp	r3, #1
 800650c:	d119      	bne.n	8006542 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	60fb      	str	r3, [r7, #12]
   return(result);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f023 0310 	bic.w	r3, r3, #16
 8006524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800652e:	61fa      	str	r2, [r7, #28]
 8006530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	69b9      	ldr	r1, [r7, #24]
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	617b      	str	r3, [r7, #20]
   return(result);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e5      	bne.n	800650e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006544:	2200      	movs	r2, #0
 8006546:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	d106      	bne.n	800655e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006552:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006554:	4619      	mov	r1, r3
 8006556:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006558:	f7fb f8bc 	bl	80016d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800655c:	e002      	b.n	8006564 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800655e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006560:	f7ff fef8 	bl	8006354 <HAL_UART_RxCpltCallback>
}
 8006564:	bf00      	nop
 8006566:	3770      	adds	r7, #112	; 0x70
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	2b01      	cmp	r3, #1
 8006586:	d108      	bne.n	800659a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	b29b      	uxth	r3, r3
 8006590:	4619      	mov	r1, r3
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7fb f89e 	bl	80016d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006598:	e002      	b.n	80065a0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fee3 	bl	8006366 <HAL_UART_RxHalfCpltCallback>
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b21      	cmp	r3, #33	; 0x21
 80065da:	d108      	bne.n	80065ee <UART_DMAError+0x46>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2200      	movs	r2, #0
 80065e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80065e8:	68b8      	ldr	r0, [r7, #8]
 80065ea:	f000 f8c1 	bl	8006770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b22      	cmp	r3, #34	; 0x22
 800660e:	d108      	bne.n	8006622 <UART_DMAError+0x7a>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2200      	movs	r2, #0
 800661a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800661c:	68b8      	ldr	r0, [r7, #8]
 800661e:	f000 f8ce 	bl	80067be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	f043 0210 	orr.w	r2, r3, #16
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f7ff fea2 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b098      	sub	sp, #96	; 0x60
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2222      	movs	r2, #34	; 0x22
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	4a3e      	ldr	r2, [pc, #248]	; (8006764 <UART_Start_Receive_DMA+0x128>)
 800666a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	4a3d      	ldr	r2, [pc, #244]	; (8006768 <UART_Start_Receive_DMA+0x12c>)
 8006672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	4a3c      	ldr	r2, [pc, #240]	; (800676c <UART_Start_Receive_DMA+0x130>)
 800667a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	2200      	movs	r2, #0
 8006682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	f7fc fd50 	bl	8003140 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d019      	beq.n	80066f2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80066e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80066e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80066ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e5      	bne.n	80066be <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3314      	adds	r3, #20
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	657b      	str	r3, [r7, #84]	; 0x54
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006712:	63ba      	str	r2, [r7, #56]	; 0x38
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3314      	adds	r3, #20
 800672c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	617b      	str	r3, [r7, #20]
   return(result);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673c:	653b      	str	r3, [r7, #80]	; 0x50
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006746:	627a      	str	r2, [r7, #36]	; 0x24
 8006748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6a39      	ldr	r1, [r7, #32]
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	61fb      	str	r3, [r7, #28]
   return(result);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e5      	bne.n	8006726 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3760      	adds	r7, #96	; 0x60
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08006441 	.word	0x08006441
 8006768:	0800656d 	.word	0x0800656d
 800676c:	080065a9 	.word	0x080065a9

08006770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b089      	sub	sp, #36	; 0x24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	60bb      	str	r3, [r7, #8]
   return(result);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	61ba      	str	r2, [r7, #24]
 800679a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	613b      	str	r3, [r7, #16]
   return(result);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e5      	bne.n	8006778 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80067b4:	bf00      	nop
 80067b6:	3724      	adds	r7, #36	; 0x24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr

080067be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067be:	b480      	push	{r7}
 80067c0:	b095      	sub	sp, #84	; 0x54
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067e6:	643a      	str	r2, [r7, #64]	; 0x40
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e5      	bne.n	80067c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	61fb      	str	r3, [r7, #28]
   return(result);
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	64bb      	str	r3, [r7, #72]	; 0x48
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	2b01      	cmp	r3, #1
 8006834:	d119      	bne.n	800686a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	60bb      	str	r3, [r7, #8]
   return(result);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f023 0310 	bic.w	r3, r3, #16
 800684c:	647b      	str	r3, [r7, #68]	; 0x44
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	330c      	adds	r3, #12
 8006854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006856:	61ba      	str	r2, [r7, #24]
 8006858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6979      	ldr	r1, [r7, #20]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	613b      	str	r3, [r7, #16]
   return(result);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e5      	bne.n	8006836 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006878:	bf00      	nop
 800687a:	3754      	adds	r7, #84	; 0x54
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fd6b 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b21      	cmp	r3, #33	; 0x21
 80068bc:	d13e      	bne.n	800693c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c6:	d114      	bne.n	80068f2 <UART_Transmit_IT+0x48>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d110      	bne.n	80068f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	1c9a      	adds	r2, r3, #2
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	621a      	str	r2, [r3, #32]
 80068f0:	e008      	b.n	8006904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6211      	str	r1, [r2, #32]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29b      	uxth	r3, r3
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	4619      	mov	r1, r3
 8006912:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10f      	bne.n	8006938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	e000      	b.n	800693e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800693c:	2302      	movs	r3, #2
  }
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff fce1 	bl	8006330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08c      	sub	sp, #48	; 0x30
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b22      	cmp	r3, #34	; 0x22
 800698a:	f040 80ae 	bne.w	8006aea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006996:	d117      	bne.n	80069c8 <UART_Receive_IT+0x50>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d113      	bne.n	80069c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28
 80069c6:	e026      	b.n	8006a16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069da:	d007      	beq.n	80069ec <UART_Receive_IT+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <UART_Receive_IT+0x82>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e008      	b.n	8006a0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4619      	mov	r1, r3
 8006a24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d15d      	bne.n	8006ae6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0220 	bic.w	r2, r2, #32
 8006a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695a      	ldr	r2, [r3, #20]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d135      	bne.n	8006adc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	613b      	str	r3, [r7, #16]
   return(result);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f023 0310 	bic.w	r3, r3, #16
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a96:	623a      	str	r2, [r7, #32]
 8006a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	69f9      	ldr	r1, [r7, #28]
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e5      	bne.n	8006a76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d10a      	bne.n	8006ace <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fa fdfd 	bl	80016d4 <HAL_UARTEx_RxEventCallback>
 8006ada:	e002      	b.n	8006ae2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fc39 	bl	8006354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e002      	b.n	8006aec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e000      	b.n	8006aec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
  }
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3730      	adds	r7, #48	; 0x30
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b2e:	f023 030c 	bic.w	r3, r3, #12
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <UART_SetConfig+0x114>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d103      	bne.n	8006b64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fe fb24 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	e002      	b.n	8006b6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fe fb0c 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8006b68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009a      	lsls	r2, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <UART_SetConfig+0x118>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	0119      	lsls	r1, r3, #4
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <UART_SetConfig+0x118>)
 8006ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2064      	movs	r0, #100	; 0x64
 8006baa:	fb00 f303 	mul.w	r3, r0, r3
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	; 0x32
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <UART_SetConfig+0x118>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc0:	4419      	add	r1, r3
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009a      	lsls	r2, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <UART_SetConfig+0x118>)
 8006bda:	fba3 0302 	umull	r0, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2064      	movs	r0, #100	; 0x64
 8006be2:	fb00 f303 	mul.w	r3, r0, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <UART_SetConfig+0x118>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40013800 	.word	0x40013800
 8006c0c:	51eb851f 	.word	0x51eb851f

08006c10 <__errno>:
 8006c10:	4b01      	ldr	r3, [pc, #4]	; (8006c18 <__errno+0x8>)
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20000324 	.word	0x20000324

08006c1c <__libc_init_array>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	2600      	movs	r6, #0
 8006c20:	4d0c      	ldr	r5, [pc, #48]	; (8006c54 <__libc_init_array+0x38>)
 8006c22:	4c0d      	ldr	r4, [pc, #52]	; (8006c58 <__libc_init_array+0x3c>)
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	42a6      	cmp	r6, r4
 8006c2a:	d109      	bne.n	8006c40 <__libc_init_array+0x24>
 8006c2c:	f001 f82c 	bl	8007c88 <_init>
 8006c30:	2600      	movs	r6, #0
 8006c32:	4d0a      	ldr	r5, [pc, #40]	; (8006c5c <__libc_init_array+0x40>)
 8006c34:	4c0a      	ldr	r4, [pc, #40]	; (8006c60 <__libc_init_array+0x44>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	42a6      	cmp	r6, r4
 8006c3c:	d105      	bne.n	8006c4a <__libc_init_array+0x2e>
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c44:	4798      	blx	r3
 8006c46:	3601      	adds	r6, #1
 8006c48:	e7ee      	b.n	8006c28 <__libc_init_array+0xc>
 8006c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4e:	4798      	blx	r3
 8006c50:	3601      	adds	r6, #1
 8006c52:	e7f2      	b.n	8006c3a <__libc_init_array+0x1e>
 8006c54:	080094d8 	.word	0x080094d8
 8006c58:	080094d8 	.word	0x080094d8
 8006c5c:	080094d8 	.word	0x080094d8
 8006c60:	080094dc 	.word	0x080094dc

08006c64 <memset>:
 8006c64:	4603      	mov	r3, r0
 8006c66:	4402      	add	r2, r0
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <memset+0xa>
 8006c6c:	4770      	bx	lr
 8006c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c72:	e7f9      	b.n	8006c68 <memset+0x4>

08006c74 <iprintf>:
 8006c74:	b40f      	push	{r0, r1, r2, r3}
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <iprintf+0x2c>)
 8006c78:	b513      	push	{r0, r1, r4, lr}
 8006c7a:	681c      	ldr	r4, [r3, #0]
 8006c7c:	b124      	cbz	r4, 8006c88 <iprintf+0x14>
 8006c7e:	69a3      	ldr	r3, [r4, #24]
 8006c80:	b913      	cbnz	r3, 8006c88 <iprintf+0x14>
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fa5a 	bl	800713c <__sinit>
 8006c88:	ab05      	add	r3, sp, #20
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	9a04      	ldr	r2, [sp, #16]
 8006c8e:	68a1      	ldr	r1, [r4, #8]
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	f000 fc5d 	bl	8007550 <_vfiprintf_r>
 8006c96:	b002      	add	sp, #8
 8006c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c9c:	b004      	add	sp, #16
 8006c9e:	4770      	bx	lr
 8006ca0:	20000324 	.word	0x20000324

08006ca4 <_puts_r>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	460e      	mov	r6, r1
 8006ca8:	4605      	mov	r5, r0
 8006caa:	b118      	cbz	r0, 8006cb4 <_puts_r+0x10>
 8006cac:	6983      	ldr	r3, [r0, #24]
 8006cae:	b90b      	cbnz	r3, 8006cb4 <_puts_r+0x10>
 8006cb0:	f000 fa44 	bl	800713c <__sinit>
 8006cb4:	69ab      	ldr	r3, [r5, #24]
 8006cb6:	68ac      	ldr	r4, [r5, #8]
 8006cb8:	b913      	cbnz	r3, 8006cc0 <_puts_r+0x1c>
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f000 fa3e 	bl	800713c <__sinit>
 8006cc0:	4b2c      	ldr	r3, [pc, #176]	; (8006d74 <_puts_r+0xd0>)
 8006cc2:	429c      	cmp	r4, r3
 8006cc4:	d120      	bne.n	8006d08 <_puts_r+0x64>
 8006cc6:	686c      	ldr	r4, [r5, #4]
 8006cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cca:	07db      	lsls	r3, r3, #31
 8006ccc:	d405      	bmi.n	8006cda <_puts_r+0x36>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	0598      	lsls	r0, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_puts_r+0x36>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd6:	f000 facf 	bl	8007278 <__retarget_lock_acquire_recursive>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	0719      	lsls	r1, r3, #28
 8006cde:	d51d      	bpl.n	8006d1c <_puts_r+0x78>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b1db      	cbz	r3, 8006d1c <_puts_r+0x78>
 8006ce4:	3e01      	subs	r6, #1
 8006ce6:	68a3      	ldr	r3, [r4, #8]
 8006ce8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cec:	3b01      	subs	r3, #1
 8006cee:	60a3      	str	r3, [r4, #8]
 8006cf0:	bb39      	cbnz	r1, 8006d42 <_puts_r+0x9e>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da38      	bge.n	8006d68 <_puts_r+0xc4>
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	210a      	movs	r1, #10
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 f848 	bl	8006d90 <__swbuf_r>
 8006d00:	3001      	adds	r0, #1
 8006d02:	d011      	beq.n	8006d28 <_puts_r+0x84>
 8006d04:	250a      	movs	r5, #10
 8006d06:	e011      	b.n	8006d2c <_puts_r+0x88>
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <_puts_r+0xd4>)
 8006d0a:	429c      	cmp	r4, r3
 8006d0c:	d101      	bne.n	8006d12 <_puts_r+0x6e>
 8006d0e:	68ac      	ldr	r4, [r5, #8]
 8006d10:	e7da      	b.n	8006cc8 <_puts_r+0x24>
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <_puts_r+0xd8>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	bf08      	it	eq
 8006d18:	68ec      	ldreq	r4, [r5, #12]
 8006d1a:	e7d5      	b.n	8006cc8 <_puts_r+0x24>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f888 	bl	8006e34 <__swsetup_r>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d0dd      	beq.n	8006ce4 <_puts_r+0x40>
 8006d28:	f04f 35ff 	mov.w	r5, #4294967295
 8006d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d2e:	07da      	lsls	r2, r3, #31
 8006d30:	d405      	bmi.n	8006d3e <_puts_r+0x9a>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	059b      	lsls	r3, r3, #22
 8006d36:	d402      	bmi.n	8006d3e <_puts_r+0x9a>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f000 fa9e 	bl	800727a <__retarget_lock_release_recursive>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	da04      	bge.n	8006d50 <_puts_r+0xac>
 8006d46:	69a2      	ldr	r2, [r4, #24]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	dc06      	bgt.n	8006d5a <_puts_r+0xb6>
 8006d4c:	290a      	cmp	r1, #10
 8006d4e:	d004      	beq.n	8006d5a <_puts_r+0xb6>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	6022      	str	r2, [r4, #0]
 8006d56:	7019      	strb	r1, [r3, #0]
 8006d58:	e7c5      	b.n	8006ce6 <_puts_r+0x42>
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f817 	bl	8006d90 <__swbuf_r>
 8006d62:	3001      	adds	r0, #1
 8006d64:	d1bf      	bne.n	8006ce6 <_puts_r+0x42>
 8006d66:	e7df      	b.n	8006d28 <_puts_r+0x84>
 8006d68:	250a      	movs	r5, #10
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	701d      	strb	r5, [r3, #0]
 8006d72:	e7db      	b.n	8006d2c <_puts_r+0x88>
 8006d74:	08009464 	.word	0x08009464
 8006d78:	08009484 	.word	0x08009484
 8006d7c:	08009444 	.word	0x08009444

08006d80 <puts>:
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <puts+0xc>)
 8006d82:	4601      	mov	r1, r0
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	f7ff bf8d 	b.w	8006ca4 <_puts_r>
 8006d8a:	bf00      	nop
 8006d8c:	20000324 	.word	0x20000324

08006d90 <__swbuf_r>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	460e      	mov	r6, r1
 8006d94:	4614      	mov	r4, r2
 8006d96:	4605      	mov	r5, r0
 8006d98:	b118      	cbz	r0, 8006da2 <__swbuf_r+0x12>
 8006d9a:	6983      	ldr	r3, [r0, #24]
 8006d9c:	b90b      	cbnz	r3, 8006da2 <__swbuf_r+0x12>
 8006d9e:	f000 f9cd 	bl	800713c <__sinit>
 8006da2:	4b21      	ldr	r3, [pc, #132]	; (8006e28 <__swbuf_r+0x98>)
 8006da4:	429c      	cmp	r4, r3
 8006da6:	d12b      	bne.n	8006e00 <__swbuf_r+0x70>
 8006da8:	686c      	ldr	r4, [r5, #4]
 8006daa:	69a3      	ldr	r3, [r4, #24]
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	071a      	lsls	r2, r3, #28
 8006db2:	d52f      	bpl.n	8006e14 <__swbuf_r+0x84>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b36b      	cbz	r3, 8006e14 <__swbuf_r+0x84>
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	6820      	ldr	r0, [r4, #0]
 8006dbc:	b2f6      	uxtb	r6, r6
 8006dbe:	1ac0      	subs	r0, r0, r3
 8006dc0:	6963      	ldr	r3, [r4, #20]
 8006dc2:	4637      	mov	r7, r6
 8006dc4:	4283      	cmp	r3, r0
 8006dc6:	dc04      	bgt.n	8006dd2 <__swbuf_r+0x42>
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 f922 	bl	8007014 <_fflush_r>
 8006dd0:	bb30      	cbnz	r0, 8006e20 <__swbuf_r+0x90>
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	60a3      	str	r3, [r4, #8]
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	6022      	str	r2, [r4, #0]
 8006de0:	701e      	strb	r6, [r3, #0]
 8006de2:	6963      	ldr	r3, [r4, #20]
 8006de4:	4283      	cmp	r3, r0
 8006de6:	d004      	beq.n	8006df2 <__swbuf_r+0x62>
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	07db      	lsls	r3, r3, #31
 8006dec:	d506      	bpl.n	8006dfc <__swbuf_r+0x6c>
 8006dee:	2e0a      	cmp	r6, #10
 8006df0:	d104      	bne.n	8006dfc <__swbuf_r+0x6c>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f90d 	bl	8007014 <_fflush_r>
 8006dfa:	b988      	cbnz	r0, 8006e20 <__swbuf_r+0x90>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <__swbuf_r+0x9c>)
 8006e02:	429c      	cmp	r4, r3
 8006e04:	d101      	bne.n	8006e0a <__swbuf_r+0x7a>
 8006e06:	68ac      	ldr	r4, [r5, #8]
 8006e08:	e7cf      	b.n	8006daa <__swbuf_r+0x1a>
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <__swbuf_r+0xa0>)
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	bf08      	it	eq
 8006e10:	68ec      	ldreq	r4, [r5, #12]
 8006e12:	e7ca      	b.n	8006daa <__swbuf_r+0x1a>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f80c 	bl	8006e34 <__swsetup_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d0cb      	beq.n	8006db8 <__swbuf_r+0x28>
 8006e20:	f04f 37ff 	mov.w	r7, #4294967295
 8006e24:	e7ea      	b.n	8006dfc <__swbuf_r+0x6c>
 8006e26:	bf00      	nop
 8006e28:	08009464 	.word	0x08009464
 8006e2c:	08009484 	.word	0x08009484
 8006e30:	08009444 	.word	0x08009444

08006e34 <__swsetup_r>:
 8006e34:	4b32      	ldr	r3, [pc, #200]	; (8006f00 <__swsetup_r+0xcc>)
 8006e36:	b570      	push	{r4, r5, r6, lr}
 8006e38:	681d      	ldr	r5, [r3, #0]
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	b125      	cbz	r5, 8006e4a <__swsetup_r+0x16>
 8006e40:	69ab      	ldr	r3, [r5, #24]
 8006e42:	b913      	cbnz	r3, 8006e4a <__swsetup_r+0x16>
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 f979 	bl	800713c <__sinit>
 8006e4a:	4b2e      	ldr	r3, [pc, #184]	; (8006f04 <__swsetup_r+0xd0>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d10f      	bne.n	8006e70 <__swsetup_r+0x3c>
 8006e50:	686c      	ldr	r4, [r5, #4]
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e58:	0719      	lsls	r1, r3, #28
 8006e5a:	d42c      	bmi.n	8006eb6 <__swsetup_r+0x82>
 8006e5c:	06dd      	lsls	r5, r3, #27
 8006e5e:	d411      	bmi.n	8006e84 <__swsetup_r+0x50>
 8006e60:	2309      	movs	r3, #9
 8006e62:	6033      	str	r3, [r6, #0]
 8006e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	e03e      	b.n	8006eee <__swsetup_r+0xba>
 8006e70:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <__swsetup_r+0xd4>)
 8006e72:	429c      	cmp	r4, r3
 8006e74:	d101      	bne.n	8006e7a <__swsetup_r+0x46>
 8006e76:	68ac      	ldr	r4, [r5, #8]
 8006e78:	e7eb      	b.n	8006e52 <__swsetup_r+0x1e>
 8006e7a:	4b24      	ldr	r3, [pc, #144]	; (8006f0c <__swsetup_r+0xd8>)
 8006e7c:	429c      	cmp	r4, r3
 8006e7e:	bf08      	it	eq
 8006e80:	68ec      	ldreq	r4, [r5, #12]
 8006e82:	e7e6      	b.n	8006e52 <__swsetup_r+0x1e>
 8006e84:	0758      	lsls	r0, r3, #29
 8006e86:	d512      	bpl.n	8006eae <__swsetup_r+0x7a>
 8006e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e8a:	b141      	cbz	r1, 8006e9e <__swsetup_r+0x6a>
 8006e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d002      	beq.n	8006e9a <__swsetup_r+0x66>
 8006e94:	4630      	mov	r0, r6
 8006e96:	f000 fa57 	bl	8007348 <_free_r>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f043 0308 	orr.w	r3, r3, #8
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	b94b      	cbnz	r3, 8006ece <__swsetup_r+0x9a>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec4:	d003      	beq.n	8006ece <__swsetup_r+0x9a>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f9fd 	bl	80072c8 <__smakebuf_r>
 8006ece:	89a0      	ldrh	r0, [r4, #12]
 8006ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ed4:	f010 0301 	ands.w	r3, r0, #1
 8006ed8:	d00a      	beq.n	8006ef0 <__swsetup_r+0xbc>
 8006eda:	2300      	movs	r3, #0
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6963      	ldr	r3, [r4, #20]
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	61a3      	str	r3, [r4, #24]
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	b943      	cbnz	r3, 8006efa <__swsetup_r+0xc6>
 8006ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eec:	d1ba      	bne.n	8006e64 <__swsetup_r+0x30>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	0781      	lsls	r1, r0, #30
 8006ef2:	bf58      	it	pl
 8006ef4:	6963      	ldrpl	r3, [r4, #20]
 8006ef6:	60a3      	str	r3, [r4, #8]
 8006ef8:	e7f4      	b.n	8006ee4 <__swsetup_r+0xb0>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e7f7      	b.n	8006eee <__swsetup_r+0xba>
 8006efe:	bf00      	nop
 8006f00:	20000324 	.word	0x20000324
 8006f04:	08009464 	.word	0x08009464
 8006f08:	08009484 	.word	0x08009484
 8006f0c:	08009444 	.word	0x08009444

08006f10 <__sflush_r>:
 8006f10:	898a      	ldrh	r2, [r1, #12]
 8006f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f14:	4605      	mov	r5, r0
 8006f16:	0710      	lsls	r0, r2, #28
 8006f18:	460c      	mov	r4, r1
 8006f1a:	d457      	bmi.n	8006fcc <__sflush_r+0xbc>
 8006f1c:	684b      	ldr	r3, [r1, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dc04      	bgt.n	8006f2c <__sflush_r+0x1c>
 8006f22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dc01      	bgt.n	8006f2c <__sflush_r+0x1c>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	d0fa      	beq.n	8006f28 <__sflush_r+0x18>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f38:	682f      	ldr	r7, [r5, #0]
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	d032      	beq.n	8006fa4 <__sflush_r+0x94>
 8006f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	075a      	lsls	r2, r3, #29
 8006f44:	d505      	bpl.n	8006f52 <__sflush_r+0x42>
 8006f46:	6863      	ldr	r3, [r4, #4]
 8006f48:	1ac0      	subs	r0, r0, r3
 8006f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4c:	b10b      	cbz	r3, 8006f52 <__sflush_r+0x42>
 8006f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f50:	1ac0      	subs	r0, r0, r3
 8006f52:	2300      	movs	r3, #0
 8006f54:	4602      	mov	r2, r0
 8006f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f58:	4628      	mov	r0, r5
 8006f5a:	6a21      	ldr	r1, [r4, #32]
 8006f5c:	47b0      	blx	r6
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	d106      	bne.n	8006f72 <__sflush_r+0x62>
 8006f64:	6829      	ldr	r1, [r5, #0]
 8006f66:	291d      	cmp	r1, #29
 8006f68:	d82c      	bhi.n	8006fc4 <__sflush_r+0xb4>
 8006f6a:	4a29      	ldr	r2, [pc, #164]	; (8007010 <__sflush_r+0x100>)
 8006f6c:	40ca      	lsrs	r2, r1
 8006f6e:	07d6      	lsls	r6, r2, #31
 8006f70:	d528      	bpl.n	8006fc4 <__sflush_r+0xb4>
 8006f72:	2200      	movs	r2, #0
 8006f74:	6062      	str	r2, [r4, #4]
 8006f76:	6922      	ldr	r2, [r4, #16]
 8006f78:	04d9      	lsls	r1, r3, #19
 8006f7a:	6022      	str	r2, [r4, #0]
 8006f7c:	d504      	bpl.n	8006f88 <__sflush_r+0x78>
 8006f7e:	1c42      	adds	r2, r0, #1
 8006f80:	d101      	bne.n	8006f86 <__sflush_r+0x76>
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	b903      	cbnz	r3, 8006f88 <__sflush_r+0x78>
 8006f86:	6560      	str	r0, [r4, #84]	; 0x54
 8006f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f8a:	602f      	str	r7, [r5, #0]
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	d0cb      	beq.n	8006f28 <__sflush_r+0x18>
 8006f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f94:	4299      	cmp	r1, r3
 8006f96:	d002      	beq.n	8006f9e <__sflush_r+0x8e>
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 f9d5 	bl	8007348 <_free_r>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8006fa2:	e7c2      	b.n	8006f2a <__sflush_r+0x1a>
 8006fa4:	6a21      	ldr	r1, [r4, #32]
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b0      	blx	r6
 8006fac:	1c41      	adds	r1, r0, #1
 8006fae:	d1c7      	bne.n	8006f40 <__sflush_r+0x30>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0c4      	beq.n	8006f40 <__sflush_r+0x30>
 8006fb6:	2b1d      	cmp	r3, #29
 8006fb8:	d001      	beq.n	8006fbe <__sflush_r+0xae>
 8006fba:	2b16      	cmp	r3, #22
 8006fbc:	d101      	bne.n	8006fc2 <__sflush_r+0xb2>
 8006fbe:	602f      	str	r7, [r5, #0]
 8006fc0:	e7b2      	b.n	8006f28 <__sflush_r+0x18>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	e7ae      	b.n	8006f2a <__sflush_r+0x1a>
 8006fcc:	690f      	ldr	r7, [r1, #16]
 8006fce:	2f00      	cmp	r7, #0
 8006fd0:	d0aa      	beq.n	8006f28 <__sflush_r+0x18>
 8006fd2:	0793      	lsls	r3, r2, #30
 8006fd4:	bf18      	it	ne
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	680e      	ldr	r6, [r1, #0]
 8006fda:	bf08      	it	eq
 8006fdc:	694b      	ldreq	r3, [r1, #20]
 8006fde:	1bf6      	subs	r6, r6, r7
 8006fe0:	600f      	str	r7, [r1, #0]
 8006fe2:	608b      	str	r3, [r1, #8]
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	dd9f      	ble.n	8006f28 <__sflush_r+0x18>
 8006fe8:	4633      	mov	r3, r6
 8006fea:	463a      	mov	r2, r7
 8006fec:	4628      	mov	r0, r5
 8006fee:	6a21      	ldr	r1, [r4, #32]
 8006ff0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ff4:	47e0      	blx	ip
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	dc06      	bgt.n	8007008 <__sflush_r+0xf8>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	e790      	b.n	8006f2a <__sflush_r+0x1a>
 8007008:	4407      	add	r7, r0
 800700a:	1a36      	subs	r6, r6, r0
 800700c:	e7ea      	b.n	8006fe4 <__sflush_r+0xd4>
 800700e:	bf00      	nop
 8007010:	20400001 	.word	0x20400001

08007014 <_fflush_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	4605      	mov	r5, r0
 800701a:	460c      	mov	r4, r1
 800701c:	b913      	cbnz	r3, 8007024 <_fflush_r+0x10>
 800701e:	2500      	movs	r5, #0
 8007020:	4628      	mov	r0, r5
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	b118      	cbz	r0, 800702e <_fflush_r+0x1a>
 8007026:	6983      	ldr	r3, [r0, #24]
 8007028:	b90b      	cbnz	r3, 800702e <_fflush_r+0x1a>
 800702a:	f000 f887 	bl	800713c <__sinit>
 800702e:	4b14      	ldr	r3, [pc, #80]	; (8007080 <_fflush_r+0x6c>)
 8007030:	429c      	cmp	r4, r3
 8007032:	d11b      	bne.n	800706c <_fflush_r+0x58>
 8007034:	686c      	ldr	r4, [r5, #4]
 8007036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0ef      	beq.n	800701e <_fflush_r+0xa>
 800703e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007040:	07d0      	lsls	r0, r2, #31
 8007042:	d404      	bmi.n	800704e <_fflush_r+0x3a>
 8007044:	0599      	lsls	r1, r3, #22
 8007046:	d402      	bmi.n	800704e <_fflush_r+0x3a>
 8007048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800704a:	f000 f915 	bl	8007278 <__retarget_lock_acquire_recursive>
 800704e:	4628      	mov	r0, r5
 8007050:	4621      	mov	r1, r4
 8007052:	f7ff ff5d 	bl	8006f10 <__sflush_r>
 8007056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007058:	4605      	mov	r5, r0
 800705a:	07da      	lsls	r2, r3, #31
 800705c:	d4e0      	bmi.n	8007020 <_fflush_r+0xc>
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	059b      	lsls	r3, r3, #22
 8007062:	d4dd      	bmi.n	8007020 <_fflush_r+0xc>
 8007064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007066:	f000 f908 	bl	800727a <__retarget_lock_release_recursive>
 800706a:	e7d9      	b.n	8007020 <_fflush_r+0xc>
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <_fflush_r+0x70>)
 800706e:	429c      	cmp	r4, r3
 8007070:	d101      	bne.n	8007076 <_fflush_r+0x62>
 8007072:	68ac      	ldr	r4, [r5, #8]
 8007074:	e7df      	b.n	8007036 <_fflush_r+0x22>
 8007076:	4b04      	ldr	r3, [pc, #16]	; (8007088 <_fflush_r+0x74>)
 8007078:	429c      	cmp	r4, r3
 800707a:	bf08      	it	eq
 800707c:	68ec      	ldreq	r4, [r5, #12]
 800707e:	e7da      	b.n	8007036 <_fflush_r+0x22>
 8007080:	08009464 	.word	0x08009464
 8007084:	08009484 	.word	0x08009484
 8007088:	08009444 	.word	0x08009444

0800708c <std>:
 800708c:	2300      	movs	r3, #0
 800708e:	b510      	push	{r4, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	e9c0 3300 	strd	r3, r3, [r0]
 8007096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800709a:	6083      	str	r3, [r0, #8]
 800709c:	8181      	strh	r1, [r0, #12]
 800709e:	6643      	str	r3, [r0, #100]	; 0x64
 80070a0:	81c2      	strh	r2, [r0, #14]
 80070a2:	6183      	str	r3, [r0, #24]
 80070a4:	4619      	mov	r1, r3
 80070a6:	2208      	movs	r2, #8
 80070a8:	305c      	adds	r0, #92	; 0x5c
 80070aa:	f7ff fddb 	bl	8006c64 <memset>
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <std+0x38>)
 80070b0:	6224      	str	r4, [r4, #32]
 80070b2:	6263      	str	r3, [r4, #36]	; 0x24
 80070b4:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <std+0x3c>)
 80070b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <std+0x40>)
 80070ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <std+0x44>)
 80070be:	6323      	str	r3, [r4, #48]	; 0x30
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	bf00      	nop
 80070c4:	08007afd 	.word	0x08007afd
 80070c8:	08007b1f 	.word	0x08007b1f
 80070cc:	08007b57 	.word	0x08007b57
 80070d0:	08007b7b 	.word	0x08007b7b

080070d4 <_cleanup_r>:
 80070d4:	4901      	ldr	r1, [pc, #4]	; (80070dc <_cleanup_r+0x8>)
 80070d6:	f000 b8af 	b.w	8007238 <_fwalk_reent>
 80070da:	bf00      	nop
 80070dc:	08007015 	.word	0x08007015

080070e0 <__sfmoreglue>:
 80070e0:	2268      	movs	r2, #104	; 0x68
 80070e2:	b570      	push	{r4, r5, r6, lr}
 80070e4:	1e4d      	subs	r5, r1, #1
 80070e6:	4355      	muls	r5, r2
 80070e8:	460e      	mov	r6, r1
 80070ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070ee:	f000 f993 	bl	8007418 <_malloc_r>
 80070f2:	4604      	mov	r4, r0
 80070f4:	b140      	cbz	r0, 8007108 <__sfmoreglue+0x28>
 80070f6:	2100      	movs	r1, #0
 80070f8:	e9c0 1600 	strd	r1, r6, [r0]
 80070fc:	300c      	adds	r0, #12
 80070fe:	60a0      	str	r0, [r4, #8]
 8007100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007104:	f7ff fdae 	bl	8006c64 <memset>
 8007108:	4620      	mov	r0, r4
 800710a:	bd70      	pop	{r4, r5, r6, pc}

0800710c <__sfp_lock_acquire>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__sfp_lock_acquire+0x8>)
 800710e:	f000 b8b3 	b.w	8007278 <__retarget_lock_acquire_recursive>
 8007112:	bf00      	nop
 8007114:	20000a81 	.word	0x20000a81

08007118 <__sfp_lock_release>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__sfp_lock_release+0x8>)
 800711a:	f000 b8ae 	b.w	800727a <__retarget_lock_release_recursive>
 800711e:	bf00      	nop
 8007120:	20000a81 	.word	0x20000a81

08007124 <__sinit_lock_acquire>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__sinit_lock_acquire+0x8>)
 8007126:	f000 b8a7 	b.w	8007278 <__retarget_lock_acquire_recursive>
 800712a:	bf00      	nop
 800712c:	20000a82 	.word	0x20000a82

08007130 <__sinit_lock_release>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__sinit_lock_release+0x8>)
 8007132:	f000 b8a2 	b.w	800727a <__retarget_lock_release_recursive>
 8007136:	bf00      	nop
 8007138:	20000a82 	.word	0x20000a82

0800713c <__sinit>:
 800713c:	b510      	push	{r4, lr}
 800713e:	4604      	mov	r4, r0
 8007140:	f7ff fff0 	bl	8007124 <__sinit_lock_acquire>
 8007144:	69a3      	ldr	r3, [r4, #24]
 8007146:	b11b      	cbz	r3, 8007150 <__sinit+0x14>
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714c:	f7ff bff0 	b.w	8007130 <__sinit_lock_release>
 8007150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007154:	6523      	str	r3, [r4, #80]	; 0x50
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <__sinit+0x68>)
 8007158:	4a13      	ldr	r2, [pc, #76]	; (80071a8 <__sinit+0x6c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	62a2      	str	r2, [r4, #40]	; 0x28
 800715e:	42a3      	cmp	r3, r4
 8007160:	bf08      	it	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	4620      	mov	r0, r4
 8007166:	bf08      	it	eq
 8007168:	61a3      	streq	r3, [r4, #24]
 800716a:	f000 f81f 	bl	80071ac <__sfp>
 800716e:	6060      	str	r0, [r4, #4]
 8007170:	4620      	mov	r0, r4
 8007172:	f000 f81b 	bl	80071ac <__sfp>
 8007176:	60a0      	str	r0, [r4, #8]
 8007178:	4620      	mov	r0, r4
 800717a:	f000 f817 	bl	80071ac <__sfp>
 800717e:	2200      	movs	r2, #0
 8007180:	2104      	movs	r1, #4
 8007182:	60e0      	str	r0, [r4, #12]
 8007184:	6860      	ldr	r0, [r4, #4]
 8007186:	f7ff ff81 	bl	800708c <std>
 800718a:	2201      	movs	r2, #1
 800718c:	2109      	movs	r1, #9
 800718e:	68a0      	ldr	r0, [r4, #8]
 8007190:	f7ff ff7c 	bl	800708c <std>
 8007194:	2202      	movs	r2, #2
 8007196:	2112      	movs	r1, #18
 8007198:	68e0      	ldr	r0, [r4, #12]
 800719a:	f7ff ff77 	bl	800708c <std>
 800719e:	2301      	movs	r3, #1
 80071a0:	61a3      	str	r3, [r4, #24]
 80071a2:	e7d1      	b.n	8007148 <__sinit+0xc>
 80071a4:	08009440 	.word	0x08009440
 80071a8:	080070d5 	.word	0x080070d5

080071ac <__sfp>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	4607      	mov	r7, r0
 80071b0:	f7ff ffac 	bl	800710c <__sfp_lock_acquire>
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <__sfp+0x84>)
 80071b6:	681e      	ldr	r6, [r3, #0]
 80071b8:	69b3      	ldr	r3, [r6, #24]
 80071ba:	b913      	cbnz	r3, 80071c2 <__sfp+0x16>
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ffbd 	bl	800713c <__sinit>
 80071c2:	3648      	adds	r6, #72	; 0x48
 80071c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	d503      	bpl.n	80071d4 <__sfp+0x28>
 80071cc:	6833      	ldr	r3, [r6, #0]
 80071ce:	b30b      	cbz	r3, 8007214 <__sfp+0x68>
 80071d0:	6836      	ldr	r6, [r6, #0]
 80071d2:	e7f7      	b.n	80071c4 <__sfp+0x18>
 80071d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071d8:	b9d5      	cbnz	r5, 8007210 <__sfp+0x64>
 80071da:	4b16      	ldr	r3, [pc, #88]	; (8007234 <__sfp+0x88>)
 80071dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071e0:	60e3      	str	r3, [r4, #12]
 80071e2:	6665      	str	r5, [r4, #100]	; 0x64
 80071e4:	f000 f847 	bl	8007276 <__retarget_lock_init_recursive>
 80071e8:	f7ff ff96 	bl	8007118 <__sfp_lock_release>
 80071ec:	2208      	movs	r2, #8
 80071ee:	4629      	mov	r1, r5
 80071f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071f8:	6025      	str	r5, [r4, #0]
 80071fa:	61a5      	str	r5, [r4, #24]
 80071fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007200:	f7ff fd30 	bl	8006c64 <memset>
 8007204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800720c:	4620      	mov	r0, r4
 800720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007210:	3468      	adds	r4, #104	; 0x68
 8007212:	e7d9      	b.n	80071c8 <__sfp+0x1c>
 8007214:	2104      	movs	r1, #4
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ff62 	bl	80070e0 <__sfmoreglue>
 800721c:	4604      	mov	r4, r0
 800721e:	6030      	str	r0, [r6, #0]
 8007220:	2800      	cmp	r0, #0
 8007222:	d1d5      	bne.n	80071d0 <__sfp+0x24>
 8007224:	f7ff ff78 	bl	8007118 <__sfp_lock_release>
 8007228:	230c      	movs	r3, #12
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	e7ee      	b.n	800720c <__sfp+0x60>
 800722e:	bf00      	nop
 8007230:	08009440 	.word	0x08009440
 8007234:	ffff0001 	.word	0xffff0001

08007238 <_fwalk_reent>:
 8007238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800723c:	4606      	mov	r6, r0
 800723e:	4688      	mov	r8, r1
 8007240:	2700      	movs	r7, #0
 8007242:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800724a:	f1b9 0901 	subs.w	r9, r9, #1
 800724e:	d505      	bpl.n	800725c <_fwalk_reent+0x24>
 8007250:	6824      	ldr	r4, [r4, #0]
 8007252:	2c00      	cmp	r4, #0
 8007254:	d1f7      	bne.n	8007246 <_fwalk_reent+0xe>
 8007256:	4638      	mov	r0, r7
 8007258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725c:	89ab      	ldrh	r3, [r5, #12]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d907      	bls.n	8007272 <_fwalk_reent+0x3a>
 8007262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007266:	3301      	adds	r3, #1
 8007268:	d003      	beq.n	8007272 <_fwalk_reent+0x3a>
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	47c0      	blx	r8
 8007270:	4307      	orrs	r7, r0
 8007272:	3568      	adds	r5, #104	; 0x68
 8007274:	e7e9      	b.n	800724a <_fwalk_reent+0x12>

08007276 <__retarget_lock_init_recursive>:
 8007276:	4770      	bx	lr

08007278 <__retarget_lock_acquire_recursive>:
 8007278:	4770      	bx	lr

0800727a <__retarget_lock_release_recursive>:
 800727a:	4770      	bx	lr

0800727c <__swhatbuf_r>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	460e      	mov	r6, r1
 8007280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007284:	4614      	mov	r4, r2
 8007286:	2900      	cmp	r1, #0
 8007288:	461d      	mov	r5, r3
 800728a:	b096      	sub	sp, #88	; 0x58
 800728c:	da08      	bge.n	80072a0 <__swhatbuf_r+0x24>
 800728e:	2200      	movs	r2, #0
 8007290:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	061a      	lsls	r2, r3, #24
 8007298:	d410      	bmi.n	80072bc <__swhatbuf_r+0x40>
 800729a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800729e:	e00e      	b.n	80072be <__swhatbuf_r+0x42>
 80072a0:	466a      	mov	r2, sp
 80072a2:	f000 fc91 	bl	8007bc8 <_fstat_r>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	dbf1      	blt.n	800728e <__swhatbuf_r+0x12>
 80072aa:	9a01      	ldr	r2, [sp, #4]
 80072ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072b4:	425a      	negs	r2, r3
 80072b6:	415a      	adcs	r2, r3
 80072b8:	602a      	str	r2, [r5, #0]
 80072ba:	e7ee      	b.n	800729a <__swhatbuf_r+0x1e>
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	2000      	movs	r0, #0
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	b016      	add	sp, #88	; 0x58
 80072c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080072c8 <__smakebuf_r>:
 80072c8:	898b      	ldrh	r3, [r1, #12]
 80072ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072cc:	079d      	lsls	r5, r3, #30
 80072ce:	4606      	mov	r6, r0
 80072d0:	460c      	mov	r4, r1
 80072d2:	d507      	bpl.n	80072e4 <__smakebuf_r+0x1c>
 80072d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	6123      	str	r3, [r4, #16]
 80072dc:	2301      	movs	r3, #1
 80072de:	6163      	str	r3, [r4, #20]
 80072e0:	b002      	add	sp, #8
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	466a      	mov	r2, sp
 80072e6:	ab01      	add	r3, sp, #4
 80072e8:	f7ff ffc8 	bl	800727c <__swhatbuf_r>
 80072ec:	9900      	ldr	r1, [sp, #0]
 80072ee:	4605      	mov	r5, r0
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f891 	bl	8007418 <_malloc_r>
 80072f6:	b948      	cbnz	r0, 800730c <__smakebuf_r+0x44>
 80072f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fc:	059a      	lsls	r2, r3, #22
 80072fe:	d4ef      	bmi.n	80072e0 <__smakebuf_r+0x18>
 8007300:	f023 0303 	bic.w	r3, r3, #3
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	e7e3      	b.n	80072d4 <__smakebuf_r+0xc>
 800730c:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <__smakebuf_r+0x7c>)
 800730e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	6020      	str	r0, [r4, #0]
 8007314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	9b00      	ldr	r3, [sp, #0]
 800731c:	6120      	str	r0, [r4, #16]
 800731e:	6163      	str	r3, [r4, #20]
 8007320:	9b01      	ldr	r3, [sp, #4]
 8007322:	b15b      	cbz	r3, 800733c <__smakebuf_r+0x74>
 8007324:	4630      	mov	r0, r6
 8007326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732a:	f000 fc5f 	bl	8007bec <_isatty_r>
 800732e:	b128      	cbz	r0, 800733c <__smakebuf_r+0x74>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	81a3      	strh	r3, [r4, #12]
 800733c:	89a0      	ldrh	r0, [r4, #12]
 800733e:	4305      	orrs	r5, r0
 8007340:	81a5      	strh	r5, [r4, #12]
 8007342:	e7cd      	b.n	80072e0 <__smakebuf_r+0x18>
 8007344:	080070d5 	.word	0x080070d5

08007348 <_free_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4605      	mov	r5, r0
 800734c:	2900      	cmp	r1, #0
 800734e:	d040      	beq.n	80073d2 <_free_r+0x8a>
 8007350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007354:	1f0c      	subs	r4, r1, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfb8      	it	lt
 800735a:	18e4      	addlt	r4, r4, r3
 800735c:	f000 fc76 	bl	8007c4c <__malloc_lock>
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <_free_r+0x8c>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	b933      	cbnz	r3, 8007374 <_free_r+0x2c>
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	6014      	str	r4, [r2, #0]
 800736a:	4628      	mov	r0, r5
 800736c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007370:	f000 bc72 	b.w	8007c58 <__malloc_unlock>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d908      	bls.n	800738a <_free_r+0x42>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	e7ed      	b.n	8007366 <_free_r+0x1e>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x4c>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x42>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1850      	adds	r0, r2, r1
 8007398:	42a0      	cmp	r0, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x6c>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	4401      	add	r1, r0
 80073a0:	1850      	adds	r0, r2, r1
 80073a2:	4283      	cmp	r3, r0
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1e0      	bne.n	800736a <_free_r+0x22>
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4401      	add	r1, r0
 80073ae:	6011      	str	r1, [r2, #0]
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	e7da      	b.n	800736a <_free_r+0x22>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x74>
 80073b6:	230c      	movs	r3, #12
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	e7d6      	b.n	800736a <_free_r+0x22>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	1821      	adds	r1, r4, r0
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf01      	itttt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	1809      	addeq	r1, r1, r0
 80073ca:	6021      	streq	r1, [r4, #0]
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	6054      	str	r4, [r2, #4]
 80073d0:	e7cb      	b.n	800736a <_free_r+0x22>
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	20000a84 	.word	0x20000a84

080073d8 <sbrk_aligned>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	4e0e      	ldr	r6, [pc, #56]	; (8007414 <sbrk_aligned+0x3c>)
 80073dc:	460c      	mov	r4, r1
 80073de:	6831      	ldr	r1, [r6, #0]
 80073e0:	4605      	mov	r5, r0
 80073e2:	b911      	cbnz	r1, 80073ea <sbrk_aligned+0x12>
 80073e4:	f000 fb7a 	bl	8007adc <_sbrk_r>
 80073e8:	6030      	str	r0, [r6, #0]
 80073ea:	4621      	mov	r1, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 fb75 	bl	8007adc <_sbrk_r>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	d00a      	beq.n	800740c <sbrk_aligned+0x34>
 80073f6:	1cc4      	adds	r4, r0, #3
 80073f8:	f024 0403 	bic.w	r4, r4, #3
 80073fc:	42a0      	cmp	r0, r4
 80073fe:	d007      	beq.n	8007410 <sbrk_aligned+0x38>
 8007400:	1a21      	subs	r1, r4, r0
 8007402:	4628      	mov	r0, r5
 8007404:	f000 fb6a 	bl	8007adc <_sbrk_r>
 8007408:	3001      	adds	r0, #1
 800740a:	d101      	bne.n	8007410 <sbrk_aligned+0x38>
 800740c:	f04f 34ff 	mov.w	r4, #4294967295
 8007410:	4620      	mov	r0, r4
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	20000a88 	.word	0x20000a88

08007418 <_malloc_r>:
 8007418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741c:	1ccd      	adds	r5, r1, #3
 800741e:	f025 0503 	bic.w	r5, r5, #3
 8007422:	3508      	adds	r5, #8
 8007424:	2d0c      	cmp	r5, #12
 8007426:	bf38      	it	cc
 8007428:	250c      	movcc	r5, #12
 800742a:	2d00      	cmp	r5, #0
 800742c:	4607      	mov	r7, r0
 800742e:	db01      	blt.n	8007434 <_malloc_r+0x1c>
 8007430:	42a9      	cmp	r1, r5
 8007432:	d905      	bls.n	8007440 <_malloc_r+0x28>
 8007434:	230c      	movs	r3, #12
 8007436:	2600      	movs	r6, #0
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4630      	mov	r0, r6
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	4e2e      	ldr	r6, [pc, #184]	; (80074fc <_malloc_r+0xe4>)
 8007442:	f000 fc03 	bl	8007c4c <__malloc_lock>
 8007446:	6833      	ldr	r3, [r6, #0]
 8007448:	461c      	mov	r4, r3
 800744a:	bb34      	cbnz	r4, 800749a <_malloc_r+0x82>
 800744c:	4629      	mov	r1, r5
 800744e:	4638      	mov	r0, r7
 8007450:	f7ff ffc2 	bl	80073d8 <sbrk_aligned>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	4604      	mov	r4, r0
 8007458:	d14d      	bne.n	80074f6 <_malloc_r+0xde>
 800745a:	6834      	ldr	r4, [r6, #0]
 800745c:	4626      	mov	r6, r4
 800745e:	2e00      	cmp	r6, #0
 8007460:	d140      	bne.n	80074e4 <_malloc_r+0xcc>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	4631      	mov	r1, r6
 8007466:	4638      	mov	r0, r7
 8007468:	eb04 0803 	add.w	r8, r4, r3
 800746c:	f000 fb36 	bl	8007adc <_sbrk_r>
 8007470:	4580      	cmp	r8, r0
 8007472:	d13a      	bne.n	80074ea <_malloc_r+0xd2>
 8007474:	6821      	ldr	r1, [r4, #0]
 8007476:	3503      	adds	r5, #3
 8007478:	1a6d      	subs	r5, r5, r1
 800747a:	f025 0503 	bic.w	r5, r5, #3
 800747e:	3508      	adds	r5, #8
 8007480:	2d0c      	cmp	r5, #12
 8007482:	bf38      	it	cc
 8007484:	250c      	movcc	r5, #12
 8007486:	4638      	mov	r0, r7
 8007488:	4629      	mov	r1, r5
 800748a:	f7ff ffa5 	bl	80073d8 <sbrk_aligned>
 800748e:	3001      	adds	r0, #1
 8007490:	d02b      	beq.n	80074ea <_malloc_r+0xd2>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	442b      	add	r3, r5
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	e00e      	b.n	80074b8 <_malloc_r+0xa0>
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	1b52      	subs	r2, r2, r5
 800749e:	d41e      	bmi.n	80074de <_malloc_r+0xc6>
 80074a0:	2a0b      	cmp	r2, #11
 80074a2:	d916      	bls.n	80074d2 <_malloc_r+0xba>
 80074a4:	1961      	adds	r1, r4, r5
 80074a6:	42a3      	cmp	r3, r4
 80074a8:	6025      	str	r5, [r4, #0]
 80074aa:	bf18      	it	ne
 80074ac:	6059      	strne	r1, [r3, #4]
 80074ae:	6863      	ldr	r3, [r4, #4]
 80074b0:	bf08      	it	eq
 80074b2:	6031      	streq	r1, [r6, #0]
 80074b4:	5162      	str	r2, [r4, r5]
 80074b6:	604b      	str	r3, [r1, #4]
 80074b8:	4638      	mov	r0, r7
 80074ba:	f104 060b 	add.w	r6, r4, #11
 80074be:	f000 fbcb 	bl	8007c58 <__malloc_unlock>
 80074c2:	f026 0607 	bic.w	r6, r6, #7
 80074c6:	1d23      	adds	r3, r4, #4
 80074c8:	1af2      	subs	r2, r6, r3
 80074ca:	d0b6      	beq.n	800743a <_malloc_r+0x22>
 80074cc:	1b9b      	subs	r3, r3, r6
 80074ce:	50a3      	str	r3, [r4, r2]
 80074d0:	e7b3      	b.n	800743a <_malloc_r+0x22>
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	bf0c      	ite	eq
 80074d8:	6032      	streq	r2, [r6, #0]
 80074da:	605a      	strne	r2, [r3, #4]
 80074dc:	e7ec      	b.n	80074b8 <_malloc_r+0xa0>
 80074de:	4623      	mov	r3, r4
 80074e0:	6864      	ldr	r4, [r4, #4]
 80074e2:	e7b2      	b.n	800744a <_malloc_r+0x32>
 80074e4:	4634      	mov	r4, r6
 80074e6:	6876      	ldr	r6, [r6, #4]
 80074e8:	e7b9      	b.n	800745e <_malloc_r+0x46>
 80074ea:	230c      	movs	r3, #12
 80074ec:	4638      	mov	r0, r7
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	f000 fbb2 	bl	8007c58 <__malloc_unlock>
 80074f4:	e7a1      	b.n	800743a <_malloc_r+0x22>
 80074f6:	6025      	str	r5, [r4, #0]
 80074f8:	e7de      	b.n	80074b8 <_malloc_r+0xa0>
 80074fa:	bf00      	nop
 80074fc:	20000a84 	.word	0x20000a84

08007500 <__sfputc_r>:
 8007500:	6893      	ldr	r3, [r2, #8]
 8007502:	b410      	push	{r4}
 8007504:	3b01      	subs	r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	6093      	str	r3, [r2, #8]
 800750a:	da07      	bge.n	800751c <__sfputc_r+0x1c>
 800750c:	6994      	ldr	r4, [r2, #24]
 800750e:	42a3      	cmp	r3, r4
 8007510:	db01      	blt.n	8007516 <__sfputc_r+0x16>
 8007512:	290a      	cmp	r1, #10
 8007514:	d102      	bne.n	800751c <__sfputc_r+0x1c>
 8007516:	bc10      	pop	{r4}
 8007518:	f7ff bc3a 	b.w	8006d90 <__swbuf_r>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	1c58      	adds	r0, r3, #1
 8007520:	6010      	str	r0, [r2, #0]
 8007522:	7019      	strb	r1, [r3, #0]
 8007524:	4608      	mov	r0, r1
 8007526:	bc10      	pop	{r4}
 8007528:	4770      	bx	lr

0800752a <__sfputs_r>:
 800752a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	4614      	mov	r4, r2
 8007532:	18d5      	adds	r5, r2, r3
 8007534:	42ac      	cmp	r4, r5
 8007536:	d101      	bne.n	800753c <__sfputs_r+0x12>
 8007538:	2000      	movs	r0, #0
 800753a:	e007      	b.n	800754c <__sfputs_r+0x22>
 800753c:	463a      	mov	r2, r7
 800753e:	4630      	mov	r0, r6
 8007540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007544:	f7ff ffdc 	bl	8007500 <__sfputc_r>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d1f3      	bne.n	8007534 <__sfputs_r+0xa>
 800754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007550 <_vfiprintf_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	460d      	mov	r5, r1
 8007556:	4614      	mov	r4, r2
 8007558:	4698      	mov	r8, r3
 800755a:	4606      	mov	r6, r0
 800755c:	b09d      	sub	sp, #116	; 0x74
 800755e:	b118      	cbz	r0, 8007568 <_vfiprintf_r+0x18>
 8007560:	6983      	ldr	r3, [r0, #24]
 8007562:	b90b      	cbnz	r3, 8007568 <_vfiprintf_r+0x18>
 8007564:	f7ff fdea 	bl	800713c <__sinit>
 8007568:	4b89      	ldr	r3, [pc, #548]	; (8007790 <_vfiprintf_r+0x240>)
 800756a:	429d      	cmp	r5, r3
 800756c:	d11b      	bne.n	80075a6 <_vfiprintf_r+0x56>
 800756e:	6875      	ldr	r5, [r6, #4]
 8007570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007572:	07d9      	lsls	r1, r3, #31
 8007574:	d405      	bmi.n	8007582 <_vfiprintf_r+0x32>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	059a      	lsls	r2, r3, #22
 800757a:	d402      	bmi.n	8007582 <_vfiprintf_r+0x32>
 800757c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800757e:	f7ff fe7b 	bl	8007278 <__retarget_lock_acquire_recursive>
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	071b      	lsls	r3, r3, #28
 8007586:	d501      	bpl.n	800758c <_vfiprintf_r+0x3c>
 8007588:	692b      	ldr	r3, [r5, #16]
 800758a:	b9eb      	cbnz	r3, 80075c8 <_vfiprintf_r+0x78>
 800758c:	4629      	mov	r1, r5
 800758e:	4630      	mov	r0, r6
 8007590:	f7ff fc50 	bl	8006e34 <__swsetup_r>
 8007594:	b1c0      	cbz	r0, 80075c8 <_vfiprintf_r+0x78>
 8007596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007598:	07dc      	lsls	r4, r3, #31
 800759a:	d50e      	bpl.n	80075ba <_vfiprintf_r+0x6a>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	b01d      	add	sp, #116	; 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	4b7b      	ldr	r3, [pc, #492]	; (8007794 <_vfiprintf_r+0x244>)
 80075a8:	429d      	cmp	r5, r3
 80075aa:	d101      	bne.n	80075b0 <_vfiprintf_r+0x60>
 80075ac:	68b5      	ldr	r5, [r6, #8]
 80075ae:	e7df      	b.n	8007570 <_vfiprintf_r+0x20>
 80075b0:	4b79      	ldr	r3, [pc, #484]	; (8007798 <_vfiprintf_r+0x248>)
 80075b2:	429d      	cmp	r5, r3
 80075b4:	bf08      	it	eq
 80075b6:	68f5      	ldreq	r5, [r6, #12]
 80075b8:	e7da      	b.n	8007570 <_vfiprintf_r+0x20>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	0598      	lsls	r0, r3, #22
 80075be:	d4ed      	bmi.n	800759c <_vfiprintf_r+0x4c>
 80075c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075c2:	f7ff fe5a 	bl	800727a <__retarget_lock_release_recursive>
 80075c6:	e7e9      	b.n	800759c <_vfiprintf_r+0x4c>
 80075c8:	2300      	movs	r3, #0
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	2320      	movs	r3, #32
 80075ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d2:	2330      	movs	r3, #48	; 0x30
 80075d4:	f04f 0901 	mov.w	r9, #1
 80075d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800779c <_vfiprintf_r+0x24c>
 80075e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e4:	4623      	mov	r3, r4
 80075e6:	469a      	mov	sl, r3
 80075e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ec:	b10a      	cbz	r2, 80075f2 <_vfiprintf_r+0xa2>
 80075ee:	2a25      	cmp	r2, #37	; 0x25
 80075f0:	d1f9      	bne.n	80075e6 <_vfiprintf_r+0x96>
 80075f2:	ebba 0b04 	subs.w	fp, sl, r4
 80075f6:	d00b      	beq.n	8007610 <_vfiprintf_r+0xc0>
 80075f8:	465b      	mov	r3, fp
 80075fa:	4622      	mov	r2, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ff93 	bl	800752a <__sfputs_r>
 8007604:	3001      	adds	r0, #1
 8007606:	f000 80aa 	beq.w	800775e <_vfiprintf_r+0x20e>
 800760a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760c:	445a      	add	r2, fp
 800760e:	9209      	str	r2, [sp, #36]	; 0x24
 8007610:	f89a 3000 	ldrb.w	r3, [sl]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 80a2 	beq.w	800775e <_vfiprintf_r+0x20e>
 800761a:	2300      	movs	r3, #0
 800761c:	f04f 32ff 	mov.w	r2, #4294967295
 8007620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007624:	f10a 0a01 	add.w	sl, sl, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007630:	931a      	str	r3, [sp, #104]	; 0x68
 8007632:	4654      	mov	r4, sl
 8007634:	2205      	movs	r2, #5
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4858      	ldr	r0, [pc, #352]	; (800779c <_vfiprintf_r+0x24c>)
 800763c:	f000 faf8 	bl	8007c30 <memchr>
 8007640:	9a04      	ldr	r2, [sp, #16]
 8007642:	b9d8      	cbnz	r0, 800767c <_vfiprintf_r+0x12c>
 8007644:	06d1      	lsls	r1, r2, #27
 8007646:	bf44      	itt	mi
 8007648:	2320      	movmi	r3, #32
 800764a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800764e:	0713      	lsls	r3, r2, #28
 8007650:	bf44      	itt	mi
 8007652:	232b      	movmi	r3, #43	; 0x2b
 8007654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007658:	f89a 3000 	ldrb.w	r3, [sl]
 800765c:	2b2a      	cmp	r3, #42	; 0x2a
 800765e:	d015      	beq.n	800768c <_vfiprintf_r+0x13c>
 8007660:	4654      	mov	r4, sl
 8007662:	2000      	movs	r0, #0
 8007664:	f04f 0c0a 	mov.w	ip, #10
 8007668:	9a07      	ldr	r2, [sp, #28]
 800766a:	4621      	mov	r1, r4
 800766c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007670:	3b30      	subs	r3, #48	; 0x30
 8007672:	2b09      	cmp	r3, #9
 8007674:	d94e      	bls.n	8007714 <_vfiprintf_r+0x1c4>
 8007676:	b1b0      	cbz	r0, 80076a6 <_vfiprintf_r+0x156>
 8007678:	9207      	str	r2, [sp, #28]
 800767a:	e014      	b.n	80076a6 <_vfiprintf_r+0x156>
 800767c:	eba0 0308 	sub.w	r3, r0, r8
 8007680:	fa09 f303 	lsl.w	r3, r9, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	46a2      	mov	sl, r4
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	e7d2      	b.n	8007632 <_vfiprintf_r+0xe2>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	1d19      	adds	r1, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	9103      	str	r1, [sp, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbb      	ittet	lt
 8007698:	425b      	neglt	r3, r3
 800769a:	f042 0202 	orrlt.w	r2, r2, #2
 800769e:	9307      	strge	r3, [sp, #28]
 80076a0:	9307      	strlt	r3, [sp, #28]
 80076a2:	bfb8      	it	lt
 80076a4:	9204      	strlt	r2, [sp, #16]
 80076a6:	7823      	ldrb	r3, [r4, #0]
 80076a8:	2b2e      	cmp	r3, #46	; 0x2e
 80076aa:	d10c      	bne.n	80076c6 <_vfiprintf_r+0x176>
 80076ac:	7863      	ldrb	r3, [r4, #1]
 80076ae:	2b2a      	cmp	r3, #42	; 0x2a
 80076b0:	d135      	bne.n	800771e <_vfiprintf_r+0x1ce>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	3402      	adds	r4, #2
 80076b6:	1d1a      	adds	r2, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9203      	str	r2, [sp, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfb8      	it	lt
 80076c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c4:	9305      	str	r3, [sp, #20]
 80076c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80077a0 <_vfiprintf_r+0x250>
 80076ca:	2203      	movs	r2, #3
 80076cc:	4650      	mov	r0, sl
 80076ce:	7821      	ldrb	r1, [r4, #0]
 80076d0:	f000 faae 	bl	8007c30 <memchr>
 80076d4:	b140      	cbz	r0, 80076e8 <_vfiprintf_r+0x198>
 80076d6:	2340      	movs	r3, #64	; 0x40
 80076d8:	eba0 000a 	sub.w	r0, r0, sl
 80076dc:	fa03 f000 	lsl.w	r0, r3, r0
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	3401      	adds	r4, #1
 80076e4:	4303      	orrs	r3, r0
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ec:	2206      	movs	r2, #6
 80076ee:	482d      	ldr	r0, [pc, #180]	; (80077a4 <_vfiprintf_r+0x254>)
 80076f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f4:	f000 fa9c 	bl	8007c30 <memchr>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d03f      	beq.n	800777c <_vfiprintf_r+0x22c>
 80076fc:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <_vfiprintf_r+0x258>)
 80076fe:	bb1b      	cbnz	r3, 8007748 <_vfiprintf_r+0x1f8>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	3307      	adds	r3, #7
 8007704:	f023 0307 	bic.w	r3, r3, #7
 8007708:	3308      	adds	r3, #8
 800770a:	9303      	str	r3, [sp, #12]
 800770c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770e:	443b      	add	r3, r7
 8007710:	9309      	str	r3, [sp, #36]	; 0x24
 8007712:	e767      	b.n	80075e4 <_vfiprintf_r+0x94>
 8007714:	460c      	mov	r4, r1
 8007716:	2001      	movs	r0, #1
 8007718:	fb0c 3202 	mla	r2, ip, r2, r3
 800771c:	e7a5      	b.n	800766a <_vfiprintf_r+0x11a>
 800771e:	2300      	movs	r3, #0
 8007720:	f04f 0c0a 	mov.w	ip, #10
 8007724:	4619      	mov	r1, r3
 8007726:	3401      	adds	r4, #1
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	4620      	mov	r0, r4
 800772c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007730:	3a30      	subs	r2, #48	; 0x30
 8007732:	2a09      	cmp	r2, #9
 8007734:	d903      	bls.n	800773e <_vfiprintf_r+0x1ee>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0c5      	beq.n	80076c6 <_vfiprintf_r+0x176>
 800773a:	9105      	str	r1, [sp, #20]
 800773c:	e7c3      	b.n	80076c6 <_vfiprintf_r+0x176>
 800773e:	4604      	mov	r4, r0
 8007740:	2301      	movs	r3, #1
 8007742:	fb0c 2101 	mla	r1, ip, r1, r2
 8007746:	e7f0      	b.n	800772a <_vfiprintf_r+0x1da>
 8007748:	ab03      	add	r3, sp, #12
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	462a      	mov	r2, r5
 800774e:	4630      	mov	r0, r6
 8007750:	4b16      	ldr	r3, [pc, #88]	; (80077ac <_vfiprintf_r+0x25c>)
 8007752:	a904      	add	r1, sp, #16
 8007754:	f3af 8000 	nop.w
 8007758:	4607      	mov	r7, r0
 800775a:	1c78      	adds	r0, r7, #1
 800775c:	d1d6      	bne.n	800770c <_vfiprintf_r+0x1bc>
 800775e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007760:	07d9      	lsls	r1, r3, #31
 8007762:	d405      	bmi.n	8007770 <_vfiprintf_r+0x220>
 8007764:	89ab      	ldrh	r3, [r5, #12]
 8007766:	059a      	lsls	r2, r3, #22
 8007768:	d402      	bmi.n	8007770 <_vfiprintf_r+0x220>
 800776a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800776c:	f7ff fd85 	bl	800727a <__retarget_lock_release_recursive>
 8007770:	89ab      	ldrh	r3, [r5, #12]
 8007772:	065b      	lsls	r3, r3, #25
 8007774:	f53f af12 	bmi.w	800759c <_vfiprintf_r+0x4c>
 8007778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777a:	e711      	b.n	80075a0 <_vfiprintf_r+0x50>
 800777c:	ab03      	add	r3, sp, #12
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	462a      	mov	r2, r5
 8007782:	4630      	mov	r0, r6
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <_vfiprintf_r+0x25c>)
 8007786:	a904      	add	r1, sp, #16
 8007788:	f000 f882 	bl	8007890 <_printf_i>
 800778c:	e7e4      	b.n	8007758 <_vfiprintf_r+0x208>
 800778e:	bf00      	nop
 8007790:	08009464 	.word	0x08009464
 8007794:	08009484 	.word	0x08009484
 8007798:	08009444 	.word	0x08009444
 800779c:	080094a4 	.word	0x080094a4
 80077a0:	080094aa 	.word	0x080094aa
 80077a4:	080094ae 	.word	0x080094ae
 80077a8:	00000000 	.word	0x00000000
 80077ac:	0800752b 	.word	0x0800752b

080077b0 <_printf_common>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	4616      	mov	r6, r2
 80077b6:	4699      	mov	r9, r3
 80077b8:	688a      	ldr	r2, [r1, #8]
 80077ba:	690b      	ldr	r3, [r1, #16]
 80077bc:	4607      	mov	r7, r0
 80077be:	4293      	cmp	r3, r2
 80077c0:	bfb8      	it	lt
 80077c2:	4613      	movlt	r3, r2
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077ca:	460c      	mov	r4, r1
 80077cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077d0:	b10a      	cbz	r2, 80077d6 <_printf_common+0x26>
 80077d2:	3301      	adds	r3, #1
 80077d4:	6033      	str	r3, [r6, #0]
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	0699      	lsls	r1, r3, #26
 80077da:	bf42      	ittt	mi
 80077dc:	6833      	ldrmi	r3, [r6, #0]
 80077de:	3302      	addmi	r3, #2
 80077e0:	6033      	strmi	r3, [r6, #0]
 80077e2:	6825      	ldr	r5, [r4, #0]
 80077e4:	f015 0506 	ands.w	r5, r5, #6
 80077e8:	d106      	bne.n	80077f8 <_printf_common+0x48>
 80077ea:	f104 0a19 	add.w	sl, r4, #25
 80077ee:	68e3      	ldr	r3, [r4, #12]
 80077f0:	6832      	ldr	r2, [r6, #0]
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	42ab      	cmp	r3, r5
 80077f6:	dc28      	bgt.n	800784a <_printf_common+0x9a>
 80077f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077fc:	1e13      	subs	r3, r2, #0
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	bf18      	it	ne
 8007802:	2301      	movne	r3, #1
 8007804:	0692      	lsls	r2, r2, #26
 8007806:	d42d      	bmi.n	8007864 <_printf_common+0xb4>
 8007808:	4649      	mov	r1, r9
 800780a:	4638      	mov	r0, r7
 800780c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007810:	47c0      	blx	r8
 8007812:	3001      	adds	r0, #1
 8007814:	d020      	beq.n	8007858 <_printf_common+0xa8>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	68e5      	ldr	r5, [r4, #12]
 800781a:	f003 0306 	and.w	r3, r3, #6
 800781e:	2b04      	cmp	r3, #4
 8007820:	bf18      	it	ne
 8007822:	2500      	movne	r5, #0
 8007824:	6832      	ldr	r2, [r6, #0]
 8007826:	f04f 0600 	mov.w	r6, #0
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	bf08      	it	eq
 800782e:	1aad      	subeq	r5, r5, r2
 8007830:	6922      	ldr	r2, [r4, #16]
 8007832:	bf08      	it	eq
 8007834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007838:	4293      	cmp	r3, r2
 800783a:	bfc4      	itt	gt
 800783c:	1a9b      	subgt	r3, r3, r2
 800783e:	18ed      	addgt	r5, r5, r3
 8007840:	341a      	adds	r4, #26
 8007842:	42b5      	cmp	r5, r6
 8007844:	d11a      	bne.n	800787c <_printf_common+0xcc>
 8007846:	2000      	movs	r0, #0
 8007848:	e008      	b.n	800785c <_printf_common+0xac>
 800784a:	2301      	movs	r3, #1
 800784c:	4652      	mov	r2, sl
 800784e:	4649      	mov	r1, r9
 8007850:	4638      	mov	r0, r7
 8007852:	47c0      	blx	r8
 8007854:	3001      	adds	r0, #1
 8007856:	d103      	bne.n	8007860 <_printf_common+0xb0>
 8007858:	f04f 30ff 	mov.w	r0, #4294967295
 800785c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007860:	3501      	adds	r5, #1
 8007862:	e7c4      	b.n	80077ee <_printf_common+0x3e>
 8007864:	2030      	movs	r0, #48	; 0x30
 8007866:	18e1      	adds	r1, r4, r3
 8007868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007872:	4422      	add	r2, r4
 8007874:	3302      	adds	r3, #2
 8007876:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800787a:	e7c5      	b.n	8007808 <_printf_common+0x58>
 800787c:	2301      	movs	r3, #1
 800787e:	4622      	mov	r2, r4
 8007880:	4649      	mov	r1, r9
 8007882:	4638      	mov	r0, r7
 8007884:	47c0      	blx	r8
 8007886:	3001      	adds	r0, #1
 8007888:	d0e6      	beq.n	8007858 <_printf_common+0xa8>
 800788a:	3601      	adds	r6, #1
 800788c:	e7d9      	b.n	8007842 <_printf_common+0x92>
	...

08007890 <_printf_i>:
 8007890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007894:	7e0f      	ldrb	r7, [r1, #24]
 8007896:	4691      	mov	r9, r2
 8007898:	2f78      	cmp	r7, #120	; 0x78
 800789a:	4680      	mov	r8, r0
 800789c:	460c      	mov	r4, r1
 800789e:	469a      	mov	sl, r3
 80078a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078a6:	d807      	bhi.n	80078b8 <_printf_i+0x28>
 80078a8:	2f62      	cmp	r7, #98	; 0x62
 80078aa:	d80a      	bhi.n	80078c2 <_printf_i+0x32>
 80078ac:	2f00      	cmp	r7, #0
 80078ae:	f000 80d9 	beq.w	8007a64 <_printf_i+0x1d4>
 80078b2:	2f58      	cmp	r7, #88	; 0x58
 80078b4:	f000 80a4 	beq.w	8007a00 <_printf_i+0x170>
 80078b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078c0:	e03a      	b.n	8007938 <_printf_i+0xa8>
 80078c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078c6:	2b15      	cmp	r3, #21
 80078c8:	d8f6      	bhi.n	80078b8 <_printf_i+0x28>
 80078ca:	a101      	add	r1, pc, #4	; (adr r1, 80078d0 <_printf_i+0x40>)
 80078cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078d0:	08007929 	.word	0x08007929
 80078d4:	0800793d 	.word	0x0800793d
 80078d8:	080078b9 	.word	0x080078b9
 80078dc:	080078b9 	.word	0x080078b9
 80078e0:	080078b9 	.word	0x080078b9
 80078e4:	080078b9 	.word	0x080078b9
 80078e8:	0800793d 	.word	0x0800793d
 80078ec:	080078b9 	.word	0x080078b9
 80078f0:	080078b9 	.word	0x080078b9
 80078f4:	080078b9 	.word	0x080078b9
 80078f8:	080078b9 	.word	0x080078b9
 80078fc:	08007a4b 	.word	0x08007a4b
 8007900:	0800796d 	.word	0x0800796d
 8007904:	08007a2d 	.word	0x08007a2d
 8007908:	080078b9 	.word	0x080078b9
 800790c:	080078b9 	.word	0x080078b9
 8007910:	08007a6d 	.word	0x08007a6d
 8007914:	080078b9 	.word	0x080078b9
 8007918:	0800796d 	.word	0x0800796d
 800791c:	080078b9 	.word	0x080078b9
 8007920:	080078b9 	.word	0x080078b9
 8007924:	08007a35 	.word	0x08007a35
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	1d1a      	adds	r2, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	602a      	str	r2, [r5, #0]
 8007930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007938:	2301      	movs	r3, #1
 800793a:	e0a4      	b.n	8007a86 <_printf_i+0x1f6>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	6829      	ldr	r1, [r5, #0]
 8007940:	0606      	lsls	r6, r0, #24
 8007942:	f101 0304 	add.w	r3, r1, #4
 8007946:	d50a      	bpl.n	800795e <_printf_i+0xce>
 8007948:	680e      	ldr	r6, [r1, #0]
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	2e00      	cmp	r6, #0
 800794e:	da03      	bge.n	8007958 <_printf_i+0xc8>
 8007950:	232d      	movs	r3, #45	; 0x2d
 8007952:	4276      	negs	r6, r6
 8007954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007958:	230a      	movs	r3, #10
 800795a:	485e      	ldr	r0, [pc, #376]	; (8007ad4 <_printf_i+0x244>)
 800795c:	e019      	b.n	8007992 <_printf_i+0x102>
 800795e:	680e      	ldr	r6, [r1, #0]
 8007960:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	bf18      	it	ne
 8007968:	b236      	sxthne	r6, r6
 800796a:	e7ef      	b.n	800794c <_printf_i+0xbc>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	6820      	ldr	r0, [r4, #0]
 8007970:	1d19      	adds	r1, r3, #4
 8007972:	6029      	str	r1, [r5, #0]
 8007974:	0601      	lsls	r1, r0, #24
 8007976:	d501      	bpl.n	800797c <_printf_i+0xec>
 8007978:	681e      	ldr	r6, [r3, #0]
 800797a:	e002      	b.n	8007982 <_printf_i+0xf2>
 800797c:	0646      	lsls	r6, r0, #25
 800797e:	d5fb      	bpl.n	8007978 <_printf_i+0xe8>
 8007980:	881e      	ldrh	r6, [r3, #0]
 8007982:	2f6f      	cmp	r7, #111	; 0x6f
 8007984:	bf0c      	ite	eq
 8007986:	2308      	moveq	r3, #8
 8007988:	230a      	movne	r3, #10
 800798a:	4852      	ldr	r0, [pc, #328]	; (8007ad4 <_printf_i+0x244>)
 800798c:	2100      	movs	r1, #0
 800798e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007992:	6865      	ldr	r5, [r4, #4]
 8007994:	2d00      	cmp	r5, #0
 8007996:	bfa8      	it	ge
 8007998:	6821      	ldrge	r1, [r4, #0]
 800799a:	60a5      	str	r5, [r4, #8]
 800799c:	bfa4      	itt	ge
 800799e:	f021 0104 	bicge.w	r1, r1, #4
 80079a2:	6021      	strge	r1, [r4, #0]
 80079a4:	b90e      	cbnz	r6, 80079aa <_printf_i+0x11a>
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d04d      	beq.n	8007a46 <_printf_i+0x1b6>
 80079aa:	4615      	mov	r5, r2
 80079ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80079b0:	fb03 6711 	mls	r7, r3, r1, r6
 80079b4:	5dc7      	ldrb	r7, [r0, r7]
 80079b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079ba:	4637      	mov	r7, r6
 80079bc:	42bb      	cmp	r3, r7
 80079be:	460e      	mov	r6, r1
 80079c0:	d9f4      	bls.n	80079ac <_printf_i+0x11c>
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d10b      	bne.n	80079de <_printf_i+0x14e>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	07de      	lsls	r6, r3, #31
 80079ca:	d508      	bpl.n	80079de <_printf_i+0x14e>
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	6861      	ldr	r1, [r4, #4]
 80079d0:	4299      	cmp	r1, r3
 80079d2:	bfde      	ittt	le
 80079d4:	2330      	movle	r3, #48	; 0x30
 80079d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079de:	1b52      	subs	r2, r2, r5
 80079e0:	6122      	str	r2, [r4, #16]
 80079e2:	464b      	mov	r3, r9
 80079e4:	4621      	mov	r1, r4
 80079e6:	4640      	mov	r0, r8
 80079e8:	f8cd a000 	str.w	sl, [sp]
 80079ec:	aa03      	add	r2, sp, #12
 80079ee:	f7ff fedf 	bl	80077b0 <_printf_common>
 80079f2:	3001      	adds	r0, #1
 80079f4:	d14c      	bne.n	8007a90 <_printf_i+0x200>
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	b004      	add	sp, #16
 80079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a00:	4834      	ldr	r0, [pc, #208]	; (8007ad4 <_printf_i+0x244>)
 8007a02:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a06:	6829      	ldr	r1, [r5, #0]
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a0e:	6029      	str	r1, [r5, #0]
 8007a10:	061d      	lsls	r5, r3, #24
 8007a12:	d514      	bpl.n	8007a3e <_printf_i+0x1ae>
 8007a14:	07df      	lsls	r7, r3, #31
 8007a16:	bf44      	itt	mi
 8007a18:	f043 0320 	orrmi.w	r3, r3, #32
 8007a1c:	6023      	strmi	r3, [r4, #0]
 8007a1e:	b91e      	cbnz	r6, 8007a28 <_printf_i+0x198>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	f023 0320 	bic.w	r3, r3, #32
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	2310      	movs	r3, #16
 8007a2a:	e7af      	b.n	800798c <_printf_i+0xfc>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	f043 0320 	orr.w	r3, r3, #32
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	2378      	movs	r3, #120	; 0x78
 8007a36:	4828      	ldr	r0, [pc, #160]	; (8007ad8 <_printf_i+0x248>)
 8007a38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a3c:	e7e3      	b.n	8007a06 <_printf_i+0x176>
 8007a3e:	0659      	lsls	r1, r3, #25
 8007a40:	bf48      	it	mi
 8007a42:	b2b6      	uxthmi	r6, r6
 8007a44:	e7e6      	b.n	8007a14 <_printf_i+0x184>
 8007a46:	4615      	mov	r5, r2
 8007a48:	e7bb      	b.n	80079c2 <_printf_i+0x132>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	6826      	ldr	r6, [r4, #0]
 8007a4e:	1d18      	adds	r0, r3, #4
 8007a50:	6961      	ldr	r1, [r4, #20]
 8007a52:	6028      	str	r0, [r5, #0]
 8007a54:	0635      	lsls	r5, r6, #24
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	d501      	bpl.n	8007a5e <_printf_i+0x1ce>
 8007a5a:	6019      	str	r1, [r3, #0]
 8007a5c:	e002      	b.n	8007a64 <_printf_i+0x1d4>
 8007a5e:	0670      	lsls	r0, r6, #25
 8007a60:	d5fb      	bpl.n	8007a5a <_printf_i+0x1ca>
 8007a62:	8019      	strh	r1, [r3, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	4615      	mov	r5, r2
 8007a68:	6123      	str	r3, [r4, #16]
 8007a6a:	e7ba      	b.n	80079e2 <_printf_i+0x152>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	1d1a      	adds	r2, r3, #4
 8007a72:	602a      	str	r2, [r5, #0]
 8007a74:	681d      	ldr	r5, [r3, #0]
 8007a76:	6862      	ldr	r2, [r4, #4]
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f000 f8d9 	bl	8007c30 <memchr>
 8007a7e:	b108      	cbz	r0, 8007a84 <_printf_i+0x1f4>
 8007a80:	1b40      	subs	r0, r0, r5
 8007a82:	6060      	str	r0, [r4, #4]
 8007a84:	6863      	ldr	r3, [r4, #4]
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a8e:	e7a8      	b.n	80079e2 <_printf_i+0x152>
 8007a90:	462a      	mov	r2, r5
 8007a92:	4649      	mov	r1, r9
 8007a94:	4640      	mov	r0, r8
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	47d0      	blx	sl
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d0ab      	beq.n	80079f6 <_printf_i+0x166>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	079b      	lsls	r3, r3, #30
 8007aa2:	d413      	bmi.n	8007acc <_printf_i+0x23c>
 8007aa4:	68e0      	ldr	r0, [r4, #12]
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	4298      	cmp	r0, r3
 8007aaa:	bfb8      	it	lt
 8007aac:	4618      	movlt	r0, r3
 8007aae:	e7a4      	b.n	80079fa <_printf_i+0x16a>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	47d0      	blx	sl
 8007aba:	3001      	adds	r0, #1
 8007abc:	d09b      	beq.n	80079f6 <_printf_i+0x166>
 8007abe:	3501      	adds	r5, #1
 8007ac0:	68e3      	ldr	r3, [r4, #12]
 8007ac2:	9903      	ldr	r1, [sp, #12]
 8007ac4:	1a5b      	subs	r3, r3, r1
 8007ac6:	42ab      	cmp	r3, r5
 8007ac8:	dcf2      	bgt.n	8007ab0 <_printf_i+0x220>
 8007aca:	e7eb      	b.n	8007aa4 <_printf_i+0x214>
 8007acc:	2500      	movs	r5, #0
 8007ace:	f104 0619 	add.w	r6, r4, #25
 8007ad2:	e7f5      	b.n	8007ac0 <_printf_i+0x230>
 8007ad4:	080094b5 	.word	0x080094b5
 8007ad8:	080094c6 	.word	0x080094c6

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4d05      	ldr	r5, [pc, #20]	; (8007af8 <_sbrk_r+0x1c>)
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7fa fc7e 	bl	80023e8 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000a8c 	.word	0x20000a8c

08007afc <__sread>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	460c      	mov	r4, r1
 8007b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b04:	f000 f8ae 	bl	8007c64 <_read_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	bfab      	itete	ge
 8007b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b10:	181b      	addge	r3, r3, r0
 8007b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b16:	bfac      	ite	ge
 8007b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b1a:	81a3      	strhlt	r3, [r4, #12]
 8007b1c:	bd10      	pop	{r4, pc}

08007b1e <__swrite>:
 8007b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	461f      	mov	r7, r3
 8007b24:	898b      	ldrh	r3, [r1, #12]
 8007b26:	4605      	mov	r5, r0
 8007b28:	05db      	lsls	r3, r3, #23
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	d505      	bpl.n	8007b3c <__swrite+0x1e>
 8007b30:	2302      	movs	r3, #2
 8007b32:	2200      	movs	r2, #0
 8007b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b38:	f000 f868 	bl	8007c0c <_lseek_r>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	4632      	mov	r2, r6
 8007b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	4628      	mov	r0, r5
 8007b48:	463b      	mov	r3, r7
 8007b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b52:	f000 b817 	b.w	8007b84 <_write_r>

08007b56 <__sseek>:
 8007b56:	b510      	push	{r4, lr}
 8007b58:	460c      	mov	r4, r1
 8007b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5e:	f000 f855 	bl	8007c0c <_lseek_r>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	bf15      	itete	ne
 8007b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b72:	81a3      	strheq	r3, [r4, #12]
 8007b74:	bf18      	it	ne
 8007b76:	81a3      	strhne	r3, [r4, #12]
 8007b78:	bd10      	pop	{r4, pc}

08007b7a <__sclose>:
 8007b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7e:	f000 b813 	b.w	8007ba8 <_close_r>
	...

08007b84 <_write_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4d05      	ldr	r5, [pc, #20]	; (8007ba4 <_write_r+0x20>)
 8007b90:	602a      	str	r2, [r5, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f7f8 fb84 	bl	80002a0 <_write>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_write_r+0x1e>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_write_r+0x1e>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	20000a8c 	.word	0x20000a8c

08007ba8 <_close_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	2300      	movs	r3, #0
 8007bac:	4d05      	ldr	r5, [pc, #20]	; (8007bc4 <_close_r+0x1c>)
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7fa fbe7 	bl	8002386 <_close>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_close_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_close_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20000a8c 	.word	0x20000a8c

08007bc8 <_fstat_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4d06      	ldr	r5, [pc, #24]	; (8007be8 <_fstat_r+0x20>)
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	f7fa fbe1 	bl	800239c <_fstat>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d102      	bne.n	8007be4 <_fstat_r+0x1c>
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	b103      	cbz	r3, 8007be4 <_fstat_r+0x1c>
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	bd38      	pop	{r3, r4, r5, pc}
 8007be6:	bf00      	nop
 8007be8:	20000a8c 	.word	0x20000a8c

08007bec <_isatty_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4d05      	ldr	r5, [pc, #20]	; (8007c08 <_isatty_r+0x1c>)
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	f7fa fbdf 	bl	80023ba <_isatty>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_isatty_r+0x1a>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_isatty_r+0x1a>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	20000a8c 	.word	0x20000a8c

08007c0c <_lseek_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	2200      	movs	r2, #0
 8007c16:	4d05      	ldr	r5, [pc, #20]	; (8007c2c <_lseek_r+0x20>)
 8007c18:	602a      	str	r2, [r5, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f7fa fbd7 	bl	80023ce <_lseek>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_lseek_r+0x1e>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_lseek_r+0x1e>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20000a8c 	.word	0x20000a8c

08007c30 <memchr>:
 8007c30:	4603      	mov	r3, r0
 8007c32:	b510      	push	{r4, lr}
 8007c34:	b2c9      	uxtb	r1, r1
 8007c36:	4402      	add	r2, r0
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	d101      	bne.n	8007c42 <memchr+0x12>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e003      	b.n	8007c4a <memchr+0x1a>
 8007c42:	7804      	ldrb	r4, [r0, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	428c      	cmp	r4, r1
 8007c48:	d1f6      	bne.n	8007c38 <memchr+0x8>
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <__malloc_lock>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	; (8007c54 <__malloc_lock+0x8>)
 8007c4e:	f7ff bb13 	b.w	8007278 <__retarget_lock_acquire_recursive>
 8007c52:	bf00      	nop
 8007c54:	20000a80 	.word	0x20000a80

08007c58 <__malloc_unlock>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__malloc_unlock+0x8>)
 8007c5a:	f7ff bb0e 	b.w	800727a <__retarget_lock_release_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20000a80 	.word	0x20000a80

08007c64 <_read_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4d05      	ldr	r5, [pc, #20]	; (8007c84 <_read_r+0x20>)
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f7fa fb6a 	bl	800234c <_read>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_read_r+0x1e>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_read_r+0x1e>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20000a8c 	.word	0x20000a8c

08007c88 <_init>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr

08007c94 <_fini>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr
